=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class ContentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Upload content for an on-demand content check
    # Upload content for an on-demand content check
    # @param [Hash] opts the optional parameters
    # @return [ContentCheckResult]
    def content_check_post(opts = {})
      data, _status_code, _headers = content_check_post_with_http_info(opts)
      data
    end

    # Upload content for an on-demand content check
    # Upload content for an on-demand content check
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContentCheckResult, Integer, Hash)>] ContentCheckResult data, response status code and response headers
    def content_check_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_check_post ...'
      end
      # resource path
      local_var_path = '/content/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentCheckResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_check_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_check_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the a11y issues found in the content 
    # Get the a11y issues found in the content 
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IssueOnPageList]
    def content_checks_content_id_a11y_issue_on_page_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_a11y_issue_on_page_get_with_http_info(content_id, opts)
      data
    end

    # Get the a11y issues found in the content 
    # Get the a11y issues found in the content 
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IssueOnPageList, Integer, Hash)>] IssueOnPageList data, response status code and response headers
    def content_checks_content_id_a11y_issue_on_page_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_a11y_issue_on_page_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_a11y_issue_on_page_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_a11y_issue_on_page_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_a11y_issue_on_page_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_a11y_issue_on_page_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/a11y/issue_on_page'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueOnPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_a11y_issue_on_page_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_a11y_issue_on_page_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of accessibility issues for the specified content
    # Get a list of accessibility issues for the specified content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageIssueList]
    def content_checks_content_id_accessibility_issues_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_accessibility_issues_get_with_http_info(content_id, opts)
      data
    end

    # Get a list of accessibility issues for the specified content
    # Get a list of accessibility issues for the specified content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageIssueList, Integer, Hash)>] PageIssueList data, response status code and response headers
    def content_checks_content_id_accessibility_issues_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_accessibility_issues_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_accessibility_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_accessibility_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_accessibility_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_accessibility_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/accessibility/issues'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageIssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_accessibility_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_accessibility_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issue found for this page
    # Get the full list of content-check issue found for this page.
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @return [ContentCheckIssues]
    def content_checks_content_id_issues_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_issues_get_with_http_info(content_id, opts)
      data
    end

    # Get issue found for this page
    # Get the full list of content-check issue found for this page.
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContentCheckIssues, Integer, Hash)>] ContentCheckIssues data, response status code and response headers
    def content_checks_content_id_issues_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_issues_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_issues_get"
      end
      # resource path
      local_var_path = '/content/checks/{content_id}/issues'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentCheckIssues'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the matching policies for the content
    # Get the matching policies for the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ContentCheckPolicyInfoList]
    def content_checks_content_id_policy_matching_policies_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_policy_matching_policies_get_with_http_info(content_id, opts)
      data
    end

    # Get the matching policies for the content
    # Get the matching policies for the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ContentCheckPolicyInfoList, Integer, Hash)>] ContentCheckPolicyInfoList data, response status code and response headers
    def content_checks_content_id_policy_matching_policies_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_policy_matching_policies_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_policy_matching_policies_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_policy_matching_policies_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_policy_matching_policies_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_policy_matching_policies_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/policy/matching_policies'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentCheckPolicyInfoList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_policy_matching_policies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_policy_matching_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the capture tags found in the content
    # Get the capture tags found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [BodyTagNameList]
    def content_checks_content_id_quality_assurance_inventory_capture_tags_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_capture_tags_get_with_http_info(content_id, opts)
      data
    end

    # Get the capture tags found in the content
    # Get the capture tags found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(BodyTagNameList, Integer, Hash)>] BodyTagNameList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_capture_tags_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_capture_tags_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_capture_tags_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_capture_tags_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_capture_tags_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_capture_tags_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/capture_tags'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BodyTagNameList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_capture_tags_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_capture_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the email addresses found in the content
    # Get the email addresses found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [EmailAddressList]
    def content_checks_content_id_quality_assurance_inventory_email_addresses_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_email_addresses_get_with_http_info(content_id, opts)
      data
    end

    # Get the email addresses found in the content
    # Get the email addresses found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(EmailAddressList, Integer, Hash)>] EmailAddressList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_email_addresses_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_email_addresses_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_email_addresses_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_email_addresses_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_email_addresses_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_email_addresses_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/email_addresses'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmailAddressList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_email_addresses_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_email_addresses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the link texts found in the content
    # Get the link texts found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [LinkTextList]
    def content_checks_content_id_quality_assurance_inventory_link_texts_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_link_texts_get_with_http_info(content_id, opts)
      data
    end

    # Get the link texts found in the content
    # Get the link texts found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(LinkTextList, Integer, Hash)>] LinkTextList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_link_texts_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_link_texts_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_link_texts_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_link_texts_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_link_texts_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_link_texts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/link_texts'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkTextList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_link_texts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_link_texts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the links found in the content
    # Get the links found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [LinkList]
    def content_checks_content_id_quality_assurance_inventory_links_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_links_get_with_http_info(content_id, opts)
      data
    end

    # Get the links found in the content
    # Get the links found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(LinkList, Integer, Hash)>] LinkList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_links_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_links_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/links'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the meta tags found in the content
    # Get the meta tags found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [MetaTagNameList]
    def content_checks_content_id_quality_assurance_inventory_meta_tags_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_meta_tags_get_with_http_info(content_id, opts)
      data
    end

    # Get the meta tags found in the content
    # Get the meta tags found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(MetaTagNameList, Integer, Hash)>] MetaTagNameList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_meta_tags_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_meta_tags_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_meta_tags_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_meta_tags_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_meta_tags_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_meta_tags_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/meta_tags'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTagNameList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_meta_tags_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_meta_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the personal id numbers found in the content
    # Get the personal id numbers found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PersonalIdNumberList]
    def content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get_with_http_info(content_id, opts)
      data
    end

    # Get the personal id numbers found in the content
    # Get the personal id numbers found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PersonalIdNumberList, Integer, Hash)>] PersonalIdNumberList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/personal_id_numbers'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalIdNumberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_personal_id_numbers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the phone numbers found in the content
    # Get the phone numbers found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PhoneNumberList]
    def content_checks_content_id_quality_assurance_inventory_phone_numbers_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_phone_numbers_get_with_http_info(content_id, opts)
      data
    end

    # Get the phone numbers found in the content
    # Get the phone numbers found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PhoneNumberList, Integer, Hash)>] PhoneNumberList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_phone_numbers_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_phone_numbers_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_phone_numbers_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_phone_numbers_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_phone_numbers_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_phone_numbers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/phone_numbers'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PhoneNumberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_phone_numbers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_phone_numbers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the trademarks found in the content
    # Get the trademarks found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [TrademarkList]
    def content_checks_content_id_quality_assurance_inventory_trademarks_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_inventory_trademarks_get_with_http_info(content_id, opts)
      data
    end

    # Get the trademarks found in the content
    # Get the trademarks found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(TrademarkList, Integer, Hash)>] TrademarkList data, response status code and response headers
    def content_checks_content_id_quality_assurance_inventory_trademarks_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_inventory_trademarks_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_inventory_trademarks_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_trademarks_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_trademarks_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_inventory_trademarks_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/inventory/trademarks'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TrademarkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_inventory_trademarks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_inventory_trademarks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the broken links found in the content
    # Get the broken links found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [BrokenPageLinkList]
    def content_checks_content_id_quality_assurance_links_broken_links_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_links_broken_links_get_with_http_info(content_id, opts)
      data
    end

    # Get the broken links found in the content
    # Get the broken links found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(BrokenPageLinkList, Integer, Hash)>] BrokenPageLinkList data, response status code and response headers
    def content_checks_content_id_quality_assurance_links_broken_links_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_links_broken_links_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_links_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_links_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_links_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_links_broken_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/links/broken_links'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrokenPageLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_links_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_links_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of links to unsafe domains found in the content
    # Get the list of links to unsafe domains found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [UnsafeDomainList]
    def content_checks_content_id_quality_assurance_links_unsafe_domains_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_links_unsafe_domains_get_with_http_info(content_id, opts)
      data
    end

    # Get the list of links to unsafe domains found in the content
    # Get the list of links to unsafe domains found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(UnsafeDomainList, Integer, Hash)>] UnsafeDomainList data, response status code and response headers
    def content_checks_content_id_quality_assurance_links_unsafe_domains_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_links_unsafe_domains_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_links_unsafe_domains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_links_unsafe_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_links_unsafe_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_links_unsafe_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/links/unsafe_domains'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeDomainList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_links_unsafe_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_links_unsafe_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed information of the readability scores of the content for the various metrics
    # Get detailed information of the readability scores of the content for the various metrics
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @return [ContentCheckReadability]
    def content_checks_content_id_quality_assurance_readability_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_readability_get_with_http_info(content_id, opts)
      data
    end

    # Get detailed information of the readability scores of the content for the various metrics
    # Get detailed information of the readability scores of the content for the various metrics
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContentCheckReadability, Integer, Hash)>] ContentCheckReadability data, response status code and response headers
    def content_checks_content_id_quality_assurance_readability_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_readability_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_readability_get"
      end
      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/readability'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentCheckReadability'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_readability_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_readability_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the languages found in the content
    # Lists the languages that was detected in the content, along with info about the percentage of the total content is in that language, and whether spellchecking is supported for the language.
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [LanguageList]
    def content_checks_content_id_quality_assurance_spelling_languages_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_spelling_languages_get_with_http_info(content_id, opts)
      data
    end

    # Get the languages found in the content
    # Lists the languages that was detected in the content, along with info about the percentage of the total content is in that language, and whether spellchecking is supported for the language.
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(LanguageList, Integer, Hash)>] LanguageList data, response status code and response headers
    def content_checks_content_id_quality_assurance_spelling_languages_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_spelling_languages_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_spelling_languages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_languages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_languages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_languages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/spelling/languages'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LanguageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_spelling_languages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_spelling_languages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the misspellings found in the content
    # Get the misspellings found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [MisspellingOnPageList]
    def content_checks_content_id_quality_assurance_spelling_misspellings_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_spelling_misspellings_get_with_http_info(content_id, opts)
      data
    end

    # Get the misspellings found in the content
    # Get the misspellings found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(MisspellingOnPageList, Integer, Hash)>] MisspellingOnPageList data, response status code and response headers
    def content_checks_content_id_quality_assurance_spelling_misspellings_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_spelling_misspellings_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_spelling_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/spelling/misspellings'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MisspellingOnPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_spelling_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_spelling_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the potential misspellings found in the content
    # Get the potential misspellings found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PagePotentialMisspellingList]
    def content_checks_content_id_quality_assurance_spelling_potential_misspellings_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_quality_assurance_spelling_potential_misspellings_get_with_http_info(content_id, opts)
      data
    end

    # Get the potential misspellings found in the content
    # Get the potential misspellings found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PagePotentialMisspellingList, Integer, Hash)>] PagePotentialMisspellingList data, response status code and response headers
    def content_checks_content_id_quality_assurance_spelling_potential_misspellings_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_quality_assurance_spelling_potential_misspellings_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_quality_assurance_spelling_potential_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_potential_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_potential_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_quality_assurance_spelling_potential_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/quality_assurance/spelling/potential_misspellings'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagePotentialMisspellingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_quality_assurance_spelling_potential_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_quality_assurance_spelling_potential_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of SEO issues found in the content
    # Get a list of SEO issues found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueWithRecommendationList]
    def content_checks_content_id_seov2_issues_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_seov2_issues_get_with_http_info(content_id, opts)
      data
    end

    # Get a list of SEO issues found in the content
    # Get a list of SEO issues found in the content
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueWithRecommendationList, Integer, Hash)>] SeoIssueWithRecommendationList data, response status code and response headers
    def content_checks_content_id_seov2_issues_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_seov2_issues_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_seov2_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.content_checks_content_id_seov2_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_seov2_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.content_checks_content_id_seov2_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/content/checks/{content_id}/seov2/issues'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueWithRecommendationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_seov2_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_seov2_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a summary of the findings of the content check
    # Get a summary of the findings of the content check
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @return [ContentCheckSummary]
    def content_checks_content_id_summary_get(content_id, opts = {})
      data, _status_code, _headers = content_checks_content_id_summary_get_with_http_info(content_id, opts)
      data
    end

    # Get a summary of the findings of the content check
    # Get a summary of the findings of the content check
    # @param content_id [Integer] The content id returned when the content was uploaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContentCheckSummary, Integer, Hash)>] ContentCheckSummary data, response status code and response headers
    def content_checks_content_id_summary_get_with_http_info(content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_checks_content_id_summary_get ...'
      end
      # verify the required parameter 'content_id' is set
      if @api_client.config.client_side_validation && content_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_id' when calling ContentApi.content_checks_content_id_summary_get"
      end
      # resource path
      local_var_path = '/content/checks/{content_id}/summary'.sub('{' + 'content_id' + '}', CGI.escape(content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentCheckSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_checks_content_id_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_checks_content_id_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get unpublishing impact for a page via Url
    # Get all information for this page that will be impacted in case of unpublishing it.
    # @param url [String] Url of the site
    # @param [Hash] opts the optional parameters
    # @return [PageDeletionMetaCrossProduct]
    def content_unpublish_impact_get(url, opts = {})
      data, _status_code, _headers = content_unpublish_impact_get_with_http_info(url, opts)
      data
    end

    # Get unpublishing impact for a page via Url
    # Get all information for this page that will be impacted in case of unpublishing it.
    # @param url [String] Url of the site
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageDeletionMetaCrossProduct, Integer, Hash)>] PageDeletionMetaCrossProduct data, response status code and response headers
    def content_unpublish_impact_get_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_unpublish_impact_get ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling ContentApi.content_unpublish_impact_get"
      end
      # resource path
      local_var_path = '/content/unpublish_impact'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageDeletionMetaCrossProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.content_unpublish_impact_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_unpublish_impact_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get check status for a page via Url
    # Get check status for a page specified by Url.
    # @param site_id [Integer] Id for specific site.
    # @param url [String] Url of the site
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PageChecking]
    def sites_site_id_content_check_page_get(site_id, url, opts = {})
      data, _status_code, _headers = sites_site_id_content_check_page_get_with_http_info(site_id, url, opts)
      data
    end

    # Get check status for a page via Url
    # Get check status for a page specified by Url.
    # @param site_id [Integer] Id for specific site.
    # @param url [String] Url of the site
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PageChecking, Integer, Hash)>] PageChecking data, response status code and response headers
    def sites_site_id_content_check_page_get_with_http_info(site_id, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_check_page_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_check_page_get"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling ContentApi.sites_site_id_content_check_page_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/check/page'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageChecking'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_check_page_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_check_page_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get check status for a page via page id
    # Get check status for a page via page id.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PageChecking]
    def sites_site_id_content_check_page_page_id_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_check_page_page_id_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get check status for a page via page id
    # Get check status for a page via page id.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PageChecking, Integer, Hash)>] PageChecking data, response status code and response headers
    def sites_site_id_content_check_page_page_id_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_check_page_page_id_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_check_page_page_id_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ContentApi.sites_site_id_content_check_page_page_id_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/check/page/{page_id}'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageChecking'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_check_page_page_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_check_page_page_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post a page check request via page id
    # POST a page check request via page id.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @return [RecheckResult]
    def sites_site_id_content_check_page_page_id_post(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_check_page_page_id_post_with_http_info(site_id, page_id, opts)
      data
    end

    # Post a page check request via page id
    # POST a page check request via page id.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecheckResult, Integer, Hash)>] RecheckResult data, response status code and response headers
    def sites_site_id_content_check_page_page_id_post_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_check_page_page_id_post ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_check_page_page_id_post"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ContentApi.sites_site_id_content_check_page_page_id_post"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/check/page/{page_id}'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecheckResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_check_page_page_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_check_page_page_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post a page check request via Url
    # POST a page check request via Url.
    # @param site_id [Integer] Id for specific site.
    # @param url [String] Url of the site
    # @param [Hash] opts the optional parameters
    # @return [SinglePageCheckResult]
    def sites_site_id_content_check_page_post(site_id, url, opts = {})
      data, _status_code, _headers = sites_site_id_content_check_page_post_with_http_info(site_id, url, opts)
      data
    end

    # Post a page check request via Url
    # POST a page check request via Url.
    # @param site_id [Integer] Id for specific site.
    # @param url [String] Url of the site
    # @param [Hash] opts the optional parameters
    # @return [Array<(SinglePageCheckResult, Integer, Hash)>] SinglePageCheckResult data, response status code and response headers
    def sites_site_id_content_check_page_post_with_http_info(site_id, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_check_page_post ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_check_page_post"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling ContentApi.sites_site_id_content_check_page_post"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/check/page'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SinglePageCheckResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_check_page_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_check_page_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get crawl status for a site
    # Get info about the crawl status for a site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [CrawlStatus]
    def sites_site_id_content_crawl_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_crawl_get_with_http_info(site_id, opts)
      data
    end

    # Get crawl status for a site
    # Get info about the crawl status for a site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(CrawlStatus, Integer, Hash)>] CrawlStatus data, response status code and response headers
    def sites_site_id_content_crawl_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_crawl_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_crawl_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/crawl'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CrawlStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_crawl_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_crawl_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a crawl for the site
    # POST a crawl request for the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [SiteCheckResult]
    def sites_site_id_content_crawl_post(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_crawl_post_with_http_info(site_id, opts)
      data
    end

    # Request a crawl for the site
    # POST a crawl request for the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SiteCheckResult, Integer, Hash)>] SiteCheckResult data, response status code and response headers
    def sites_site_id_content_crawl_post_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_crawl_post ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_crawl_post"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/crawl'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SiteCheckResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_crawl_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_crawl_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of pages for a site
    # Get list of pages for a site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @option opts [String] :url Url of the site
    # @return [PageApiList]
    def sites_site_id_content_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get list of pages for a site
    # Get list of pages for a site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @option opts [String] :url Url of the site
    # @return [Array<(PageApiList, Integer, Hash)>] PageApiList data, response status code and response headers
    def sites_site_id_content_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContentApi.sites_site_id_content_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.sites_site_id_content_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContentApi.sites_site_id_content_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageApiList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get page details for page
    # Get page details for a page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PageSummary]
    def sites_site_id_content_pages_page_id_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_pages_page_id_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get page details for page
    # Get page details for a page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PageSummary, Integer, Hash)>] PageSummary data, response status code and response headers
    def sites_site_id_content_pages_page_id_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_pages_page_id_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_pages_page_id_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ContentApi.sites_site_id_content_pages_page_id_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/pages/{page_id}'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_pages_page_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_pages_page_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get unpublishing impact for a page
    # Get all information for this page that will be impacted in case of unpublishing it.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @return [UnpublishPageCheck]
    def sites_site_id_content_pages_page_id_unpublish_impact_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_content_pages_page_id_unpublish_impact_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get unpublishing impact for a page
    # Get all information for this page that will be impacted in case of unpublishing it.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnpublishPageCheck, Integer, Hash)>] UnpublishPageCheck data, response status code and response headers
    def sites_site_id_content_pages_page_id_unpublish_impact_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.sites_site_id_content_pages_page_id_unpublish_impact_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ContentApi.sites_site_id_content_pages_page_id_unpublish_impact_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling ContentApi.sites_site_id_content_pages_page_id_unpublish_impact_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/content/pages/{page_id}/unpublish_impact'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnpublishPageCheck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"ContentApi.sites_site_id_content_pages_page_id_unpublish_impact_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#sites_site_id_content_pages_page_id_unpublish_impact_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
