=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class IntegrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Integrations to external systems
    # Integrations to external systems, Like Jira
    # @param [Hash] opts the optional parameters
    # @return [Integrations]
    def integrations_get(opts = {})
      data, _status_code, _headers = integrations_get_with_http_info(opts)
      data
    end

    # Integrations to external systems
    # Integrations to external systems, Like Jira
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integrations, Integer, Hash)>] Integrations data, response status code and response headers
    def integrations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.integrations_get ...'
      end
      # resource path
      local_var_path = '/integrations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Integrations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.integrations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#integrations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List tasks created for external task management systems
    # Get a list of tasks created for external project management systems, linking items from the Siteimprove platform, with tasks in the external systems.
    # @param task_manager [String] External project management system supported by Siteimprove
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [IssueTrackerWorkItemList]
    def integrations_project_management_task_managers_task_manager_tasks_get(task_manager, opts = {})
      data, _status_code, _headers = integrations_project_management_task_managers_task_manager_tasks_get_with_http_info(task_manager, opts)
      data
    end

    # List tasks created for external task management systems
    # Get a list of tasks created for external project management systems, linking items from the Siteimprove platform, with tasks in the external systems.
    # @param task_manager [String] External project management system supported by Siteimprove
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(IssueTrackerWorkItemList, Integer, Hash)>] IssueTrackerWorkItemList data, response status code and response headers
    def integrations_project_management_task_managers_task_manager_tasks_get_with_http_info(task_manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_get ...'
      end
      # verify the required parameter 'task_manager' is set
      if @api_client.config.client_side_validation && task_manager.nil?
        fail ArgumentError, "Missing the required parameter 'task_manager' when calling IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_get"
      end
      # verify enum value
      allowable_values = ["jira_cloud", "azure_dev_ops", "jira_on_prem_o_auth"]
      if @api_client.config.client_side_validation && !allowable_values.include?(task_manager)
        fail ArgumentError, "invalid value for \"task_manager\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/integrations/project_management/task_managers/{task_manager}/tasks'.sub('{' + 'task_manager' + '}', CGI.escape(task_manager.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueTrackerWorkItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#integrations_project_management_task_managers_task_manager_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show data for a single task
    # Show the details for a single task.
    # @param task_manager [String] External project management system supported by Siteimprove
    # @param task_id [Integer] ID of the task to display
    # @param [Hash] opts the optional parameters
    # @return [IssueTrackerWorkItem1]
    def integrations_project_management_task_managers_task_manager_tasks_task_id_get(task_manager, task_id, opts = {})
      data, _status_code, _headers = integrations_project_management_task_managers_task_manager_tasks_task_id_get_with_http_info(task_manager, task_id, opts)
      data
    end

    # Show data for a single task
    # Show the details for a single task.
    # @param task_manager [String] External project management system supported by Siteimprove
    # @param task_id [Integer] ID of the task to display
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueTrackerWorkItem1, Integer, Hash)>] IssueTrackerWorkItem1 data, response status code and response headers
    def integrations_project_management_task_managers_task_manager_tasks_task_id_get_with_http_info(task_manager, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_task_id_get ...'
      end
      # verify the required parameter 'task_manager' is set
      if @api_client.config.client_side_validation && task_manager.nil?
        fail ArgumentError, "Missing the required parameter 'task_manager' when calling IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_task_id_get"
      end
      # verify enum value
      allowable_values = ["jira_cloud", "azure_dev_ops", "jira_on_prem_o_auth"]
      if @api_client.config.client_side_validation && !allowable_values.include?(task_manager)
        fail ArgumentError, "invalid value for \"task_manager\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_task_id_get"
      end
      # resource path
      local_var_path = '/integrations/project_management/task_managers/{task_manager}/tasks/{task_id}'.sub('{' + 'task_manager' + '}', CGI.escape(task_manager.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueTrackerWorkItem1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.integrations_project_management_task_managers_task_manager_tasks_task_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#integrations_project_management_task_managers_task_manager_tasks_task_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
