=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all account-specific shortened URLs
    # Get all account-specific shortened URLs
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ShortenedUrlList]
    def analytics_url_shortener_shortened_urls_get(site_id, opts = {})
      data, _status_code, _headers = analytics_url_shortener_shortened_urls_get_with_http_info(site_id, opts)
      data
    end

    # Get all account-specific shortened URLs
    # Get all account-specific shortened URLs
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ShortenedUrlList, Integer, Hash)>] ShortenedUrlList data, response status code and response headers
    def analytics_url_shortener_shortened_urls_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.analytics_url_shortener_shortened_urls_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.analytics_url_shortener_shortened_urls_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.analytics_url_shortener_shortened_urls_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.analytics_url_shortener_shortened_urls_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.analytics_url_shortener_shortened_urls_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/analytics/url_shortener/shortened_urls'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'site_id'] = site_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShortenedUrlList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.analytics_url_shortener_shortened_urls_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#analytics_url_shortener_shortened_urls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get available segments
    # Get the available segments. Segments can be used to segment the data shown by appending the query parameter \"filter_id\".
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [AnalyticsFilterDetailsList]
    def settings_analytics_segments_get(opts = {})
      data, _status_code, _headers = settings_analytics_segments_get_with_http_info(opts)
      data
    end

    # Get available segments
    # Get the available segments. Segments can be used to segment the data shown by appending the query parameter \&quot;filter_id\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(AnalyticsFilterDetailsList, Integer, Hash)>] AnalyticsFilterDetailsList data, response status code and response headers
    def settings_analytics_segments_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.settings_analytics_segments_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.settings_analytics_segments_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.settings_analytics_segments_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.settings_analytics_segments_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/settings/analytics/segments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnalyticsFilterDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.settings_analytics_segments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#settings_analytics_segments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get visit depth from behavior
    # Get the visit depth. Depth relates to the number of page views for each visit. Visits with a high number of page views suggests that the site is encouraging visitors to stay.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitDepthList]
    def sites_site_id_analytics_behavior_visit_depth_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visit_depth_get_with_http_info(site_id, opts)
      data
    end

    # Get visit depth from behavior
    # Get the visit depth. Depth relates to the number of page views for each visit. Visits with a high number of page views suggests that the site is encouraging visitors to stay.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitDepthList, Integer, Hash)>] VisitDepthList data, response status code and response headers
    def sites_site_id_analytics_behavior_visit_depth_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visit_depth'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitDepthList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visit_depth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data of visit depth from behavior
    # A series of historical data points showing the average amount of page views.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitDepthGraphItemList]
    def sites_site_id_analytics_behavior_visit_depth_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visit_depth_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data of visit depth from behavior
    # A series of historical data points showing the average amount of page views.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitDepthGraphItemList, Integer, Hash)>] VisitDepthGraphItemList data, response status code and response headers
    def sites_site_id_analytics_behavior_visit_depth_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visit_depth/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitDepthGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visit_depth_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visit_depth_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get visit length from behavior
    # Get the length of a visit. Length relates to the duration (in minutes) of each visit.. This data can be used to determine how much your website retains visitor - if the visit length is typically low, you could investigate ways to keep your visitors on your site for longer.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitLengthList]
    def sites_site_id_analytics_behavior_visit_length_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visit_length_get_with_http_info(site_id, opts)
      data
    end

    # Get visit length from behavior
    # Get the length of a visit. Length relates to the duration (in minutes) of each visit.. This data can be used to determine how much your website retains visitor - if the visit length is typically low, you could investigate ways to keep your visitors on your site for longer.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitLengthList, Integer, Hash)>] VisitLengthList data, response status code and response headers
    def sites_site_id_analytics_behavior_visit_length_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visit_length_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visit_length'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitLengthList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visit_length_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visit_length_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data of visit length from behavior
    # A series of historical data points showing the average visit length. Length relates to the duration (in minutes) of each visit.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitLengthGraphItemList]
    def sites_site_id_analytics_behavior_visit_length_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visit_length_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data of visit length from behavior
    # A series of historical data points showing the average visit length. Length relates to the duration (in minutes) of each visit.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitLengthGraphItemList, Integer, Hash)>] VisitLengthGraphItemList data, response status code and response headers
    def sites_site_id_analytics_behavior_visit_length_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visit_length_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visit_length_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visit_length/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitLengthGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visit_length_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visit_length_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get visits by hour of the day from behavior
    # Get the distribution of visits and page views over hours of the day.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitHourList]
    def sites_site_id_analytics_behavior_visits_by_hour_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visits_by_hour_get_with_http_info(site_id, opts)
      data
    end

    # Get visits by hour of the day from behavior
    # Get the distribution of visits and page views over hours of the day.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitHourList, Integer, Hash)>] VisitHourList data, response status code and response headers
    def sites_site_id_analytics_behavior_visits_by_hour_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visits_by_hour_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_hour_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_hour_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_hour_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_hour_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visits_by_hour'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitHourList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visits_by_hour_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visits_by_hour_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get visits by day of the month from behavior
    # Get the distribution of visits and page views over day of the month.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitMonthDayList]
    def sites_site_id_analytics_behavior_visits_by_monthday_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visits_by_monthday_get_with_http_info(site_id, opts)
      data
    end

    # Get visits by day of the month from behavior
    # Get the distribution of visits and page views over day of the month.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitMonthDayList, Integer, Hash)>] VisitMonthDayList data, response status code and response headers
    def sites_site_id_analytics_behavior_visits_by_monthday_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visits_by_monthday_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_monthday_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_monthday_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_monthday_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_monthday_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visits_by_monthday'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitMonthDayList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visits_by_monthday_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visits_by_monthday_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get visits by weekday from behavior
    # Get the distribution of visits and page views over weekday.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitWeekDayList]
    def sites_site_id_analytics_behavior_visits_by_weekday_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_behavior_visits_by_weekday_get_with_http_info(site_id, opts)
      data
    end

    # Get visits by weekday from behavior
    # Get the distribution of visits and page views over weekday.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitWeekDayList, Integer, Hash)>] VisitWeekDayList data, response status code and response headers
    def sites_site_id_analytics_behavior_visits_by_weekday_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_behavior_visits_by_weekday_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_weekday_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_weekday_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_weekday_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_behavior_visits_by_weekday_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/behavior/visits_by_weekday'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitWeekDayList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_behavior_visits_by_weekday_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_behavior_visits_by_weekday_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for the specific campaign combination
    # A series of historical data points showing the amount of visits for the specific campaign combination.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param name_id [Integer] Id for specific campaign name
    # @param source_id [Integer] Id for specific campaign source
    # @param medium_id [Integer] Id for specific campaign medium
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignSummaryVisitsPageList]
    def sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get(site_id, name_id, source_id, medium_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get_with_http_info(site_id, name_id, source_id, medium_id, opts)
      data
    end

    # Get historical data for the specific campaign combination
    # A series of historical data points showing the amount of visits for the specific campaign combination.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param name_id [Integer] Id for specific campaign name
    # @param source_id [Integer] Id for specific campaign source
    # @param medium_id [Integer] Id for specific campaign medium
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignSummaryVisitsPageList, Integer, Hash)>] CampaignSummaryVisitsPageList data, response status code and response headers
    def sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get_with_http_info(site_id, name_id, source_id, medium_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get"
      end
      # verify the required parameter 'name_id' is set
      if @api_client.config.client_side_validation && name_id.nil?
        fail ArgumentError, "Missing the required parameter 'name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get"
      end
      # verify the required parameter 'source_id' is set
      if @api_client.config.client_side_validation && source_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get"
      end
      # verify the required parameter 'medium_id' is set
      if @api_client.config.client_side_validation && medium_id.nil?
        fail ArgumentError, "Missing the required parameter 'medium_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/combinations/{name_id}/{source_id}/{medium_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'name_id' + '}', CGI.escape(name_id.to_s)).sub('{' + 'source_id' + '}', CGI.escape(source_id.to_s)).sub('{' + 'medium_id' + '}', CGI.escape(medium_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignSummaryVisitsPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the pages visited by the specific campaign combination
    # Lists all the pages visited by the specific combination of campaign name, source and medium.
    # @param site_id [Integer] Id for specific site.
    # @param name_id [Integer] Id for specific campaign name
    # @param source_id [Integer] Id for specific campaign source
    # @param medium_id [Integer] Id for specific campaign medium
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignSummaryPagesList]
    def sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get(site_id, name_id, source_id, medium_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get_with_http_info(site_id, name_id, source_id, medium_id, opts)
      data
    end

    # Get the pages visited by the specific campaign combination
    # Lists all the pages visited by the specific combination of campaign name, source and medium.
    # @param site_id [Integer] Id for specific site.
    # @param name_id [Integer] Id for specific campaign name
    # @param source_id [Integer] Id for specific campaign source
    # @param medium_id [Integer] Id for specific campaign medium
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignSummaryPagesList, Integer, Hash)>] CampaignSummaryPagesList data, response status code and response headers
    def sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get_with_http_info(site_id, name_id, source_id, medium_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get"
      end
      # verify the required parameter 'name_id' is set
      if @api_client.config.client_side_validation && name_id.nil?
        fail ArgumentError, "Missing the required parameter 'name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get"
      end
      # verify the required parameter 'source_id' is set
      if @api_client.config.client_side_validation && source_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get"
      end
      # verify the required parameter 'medium_id' is set
      if @api_client.config.client_side_validation && medium_id.nil?
        fail ArgumentError, "Missing the required parameter 'medium_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/combinations/{name_id}/{source_id}/{medium_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'name_id' + '}', CGI.escape(name_id.to_s)).sub('{' + 'source_id' + '}', CGI.escape(source_id.to_s)).sub('{' + 'medium_id' + '}', CGI.escape(medium_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignSummaryPagesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_combinations_name_id_source_id_medium_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contents from campaigns
    # Content variations in the campaigns used to reach the website. The value in the parameter `utm_content` (or another \"Content\" campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignContentList]
    def sites_site_id_analytics_campaigns_contents_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_contents_get_with_http_info(site_id, opts)
      data
    end

    # Get contents from campaigns
    # Content variations in the campaigns used to reach the website. The value in the parameter &#x60;utm_content&#x60; (or another \&quot;Content\&quot; campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignContentList, Integer, Hash)>] CampaignContentList data, response status code and response headers
    def sites_site_id_analytics_campaigns_contents_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_contents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/contents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignContentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_contents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_contents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get content details from campaigns
    # Shows the `name`, `source` and `medium` used in connection with the specified `content`.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignContentDetailsList]
    def sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get content details from campaigns
    # Shows the &#x60;name&#x60;, &#x60;source&#x60; and &#x60;medium&#x60; used in connection with the specified &#x60;content&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignContentDetailsList, Integer, Hash)>] CampaignContentDetailsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/contents/{parameter_name_id}/{parameter_value_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignContentDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific content from campaigns
    # A series of historical data points showing the amount of visits for a specific `content` value.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsGraphItemList]
    def sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get historical data for specific content from campaigns
    # A series of historical data points showing the amount of visits for a specific &#x60;content&#x60; value.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsGraphItemList, Integer, Hash)>] VisitsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/contents/{parameter_name_id}/{parameter_value_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages related to specific content from campaigns
    # Shows the pages where the specified `content` has been used.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignPagesList]
    def sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get pages related to specific content from campaigns
    # Shows the pages where the specified &#x60;content&#x60; has been used.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignPagesList, Integer, Hash)>] CampaignPagesList data, response status code and response headers
    def sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/contents/{parameter_name_id}/{parameter_value_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignPagesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_contents_parameter_name_id_parameter_value_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mediums from campaigns
    # Medium of the campaigns used to reach the website. The value in the parameter `utm_medium` (or another \"Medium\" campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignMediumList]
    def sites_site_id_analytics_campaigns_mediums_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_mediums_get_with_http_info(site_id, opts)
      data
    end

    # Get mediums from campaigns
    # Medium of the campaigns used to reach the website. The value in the parameter &#x60;utm_medium&#x60; (or another \&quot;Medium\&quot; campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignMediumList, Integer, Hash)>] CampaignMediumList data, response status code and response headers
    def sites_site_id_analytics_campaigns_mediums_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_mediums_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/mediums'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignMediumList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_mediums_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_mediums_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get medium details from campaigns
    # Shows the `name` and `source` used in connection with the specified `medium`.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignMediumDetailsList]
    def sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get medium details from campaigns
    # Shows the &#x60;name&#x60; and &#x60;source&#x60; used in connection with the specified &#x60;medium&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignMediumDetailsList, Integer, Hash)>] CampaignMediumDetailsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/mediums/{parameter_name_id}/{parameter_value_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignMediumDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_mediums_parameter_name_id_parameter_value_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get names from campaigns
    # Content variations in the campaigns used to reach the website. The value in the parameter utm_name (or another \"Name\" campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignNameList]
    def sites_site_id_analytics_campaigns_names_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_names_get_with_http_info(site_id, opts)
      data
    end

    # Get names from campaigns
    # Content variations in the campaigns used to reach the website. The value in the parameter utm_name (or another \&quot;Name\&quot; campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignNameList, Integer, Hash)>] CampaignNameList data, response status code and response headers
    def sites_site_id_analytics_campaigns_names_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_names_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/names'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignNameList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_names_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_names_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get name details from campaigns
    # Shows the `medium` and `source` used in connection with the specified `name`.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignNameDetailsList]
    def sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get name details from campaigns
    # Shows the &#x60;medium&#x60; and &#x60;source&#x60; used in connection with the specified &#x60;name&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignNameDetailsList, Integer, Hash)>] CampaignNameDetailsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/names/{parameter_name_id}/{parameter_value_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignNameDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_names_parameter_name_id_parameter_value_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages from campaigns
    # Get pages which have been reached as part of a campaign.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithCampaignsList]
    def sites_site_id_analytics_campaigns_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages from campaigns
    # Get pages which have been reached as part of a campaign.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithCampaignsList, Integer, Hash)>] PageWithCampaignsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithCampaignsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details for specific page from campaigns
    # Shows the `name`, `source` and `medium` used in connection with the specified page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [PageWithCampaignsVisitsList]
    def sites_site_id_analytics_campaigns_pages_page_id_details_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_pages_page_id_details_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get details for specific page from campaigns
    # Shows the &#x60;name&#x60;, &#x60;source&#x60; and &#x60;medium&#x60; used in connection with the specified page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(PageWithCampaignsVisitsList, Integer, Hash)>] PageWithCampaignsVisitsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_pages_page_id_details_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/pages/{page_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithCampaignsVisitsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_pages_page_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for a specific page in campaigns
    # A series of historical data points showing the amount of visits for a specific `page`.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [PageWithCampaignsVisitsGraphItemList]
    def sites_site_id_analytics_campaigns_pages_page_id_history_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_pages_page_id_history_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get historical data for a specific page in campaigns
    # A series of historical data points showing the amount of visits for a specific &#x60;page&#x60;.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(PageWithCampaignsVisitsGraphItemList, Integer, Hash)>] PageWithCampaignsVisitsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_campaigns_pages_page_id_history_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithCampaignsVisitsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sources from campaigns
    # Source of the campaigns used to reach the website. The value in the parameter `utm_source` (or another \"Source\" campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignSourceList]
    def sites_site_id_analytics_campaigns_sources_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_sources_get_with_http_info(site_id, opts)
      data
    end

    # Get sources from campaigns
    # Source of the campaigns used to reach the website. The value in the parameter &#x60;utm_source&#x60; (or another \&quot;Source\&quot; campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignSourceList, Integer, Hash)>] CampaignSourceList data, response status code and response headers
    def sites_site_id_analytics_campaigns_sources_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_sources_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/sources'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignSourceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_sources_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_sources_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get source details from campaigns
    # Shows the `name` and `medium` used in connection with the specified `source`.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignSourceDetailsList]
    def sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get source details from campaigns
    # Shows the &#x60;name&#x60; and &#x60;medium&#x60; used in connection with the specified &#x60;source&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignSourceDetailsList, Integer, Hash)>] CampaignSourceDetailsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/sources/{parameter_name_id}/{parameter_value_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignSourceDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_sources_parameter_name_id_parameter_value_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary of campaigns
    # Lists the campaigns used to reach the website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignSummaryList]
    def sites_site_id_analytics_campaigns_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get summary of campaigns
    # Lists the campaigns used to reach the website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignSummaryList, Integer, Hash)>] CampaignSummaryList data, response status code and response headers
    def sites_site_id_analytics_campaigns_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignSummaryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data of all campaigns
    # A series of historical data points showing the amount of visits for all campaigns.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignsSummaryGraphItemList]
    def sites_site_id_analytics_campaigns_summary_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_summary_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data of all campaigns
    # A series of historical data points showing the amount of visits for all campaigns.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignsSummaryGraphItemList, Integer, Hash)>] CampaignsSummaryGraphItemList data, response status code and response headers
    def sites_site_id_analytics_campaigns_summary_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_summary_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_summary_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/summary/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignsSummaryGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_summary_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_summary_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get terms from campaigns
    # The terms of the campaigns used to reach the website. The value in the parameter `utm_term` (or another \"Term\" campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CampaignTermsList]
    def sites_site_id_analytics_campaigns_terms_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_terms_get_with_http_info(site_id, opts)
      data
    end

    # Get terms from campaigns
    # The terms of the campaigns used to reach the website. The value in the parameter &#x60;utm_term&#x60; (or another \&quot;Term\&quot; campaign parameter that has been added).
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CampaignTermsList, Integer, Hash)>] CampaignTermsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_terms_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_terms_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/terms'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignTermsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_terms_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_terms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get term details from campaigns
    # Shows the `name`, `source` and `medium` used in connection with the specified `term`.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CampaignTermsDetailsList]
    def sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get term details from campaigns
    # Shows the &#x60;name&#x60;, &#x60;source&#x60; and &#x60;medium&#x60; used in connection with the specified &#x60;term&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CampaignTermsDetailsList, Integer, Hash)>] CampaignTermsDetailsList data, response status code and response headers
    def sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/campaigns/terms/{parameter_name_id}/{parameter_value_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignTermsDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_campaigns_terms_parameter_name_id_parameter_value_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all pages from content
    # Get all pages identified on your site.  Note that if your site only has group access then group_id is required, not optional.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ContentPageList]
    def sites_site_id_analytics_content_all_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_all_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get all pages from content
    # Get all pages identified on your site.  Note that if your site only has group access then group_id is required, not optional.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ContentPageList, Integer, Hash)>] ContentPageList data, response status code and response headers
    def sites_site_id_analytics_content_all_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_all_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_all_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_all_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_all_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_all_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/all_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_all_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_all_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get entry pages from content
    # An entry page is the first page a visitor sees when they enter the website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [EntryPageList]
    def sites_site_id_analytics_content_entry_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_entry_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get entry pages from content
    # An entry page is the first page a visitor sees when they enter the website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(EntryPageList, Integer, Hash)>] EntryPageList data, response status code and response headers
    def sites_site_id_analytics_content_entry_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_entry_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_entry_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_entry_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_entry_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_entry_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/entry_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntryPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_entry_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_entry_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get exit pages from content
    # An exit page is the last page a visitor sees before they leave the website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ExitPageList]
    def sites_site_id_analytics_content_exit_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_exit_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get exit pages from content
    # An exit page is the last page a visitor sees before they leave the website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ExitPageList, Integer, Hash)>] ExitPageList data, response status code and response headers
    def sites_site_id_analytics_content_exit_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_exit_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_exit_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_exit_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_exit_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_exit_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/exit_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExitPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_exit_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_exit_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get least popular pages from content
    # Get the least popular pages among the top 1000 pages with the most page views.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [UnpopularPageList]
    def sites_site_id_analytics_content_least_popular_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_least_popular_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get least popular pages from content
    # Get the least popular pages among the top 1000 pages with the most page views.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(UnpopularPageList, Integer, Hash)>] UnpopularPageList data, response status code and response headers
    def sites_site_id_analytics_content_least_popular_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_least_popular_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_least_popular_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_least_popular_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_least_popular_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_least_popular_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/least_popular_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnpopularPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_least_popular_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_least_popular_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get most popular pages from content
    # Get the most popular pages among the top 1000 pages with the most page views.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PopularPageList]
    def sites_site_id_analytics_content_most_popular_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_most_popular_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get most popular pages from content
    # Get the most popular pages among the top 1000 pages with the most page views.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PopularPageList, Integer, Hash)>] PopularPageList data, response status code and response headers
    def sites_site_id_analytics_content_most_popular_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_most_popular_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_most_popular_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_most_popular_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_most_popular_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_most_popular_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/most_popular_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PopularPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_most_popular_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_most_popular_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get navigation depth from content
    # Get the average number of clicks (pages visited) to get to a certain page.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [NavigationDepthList]
    def sites_site_id_analytics_content_navigation_depth_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_navigation_depth_get_with_http_info(site_id, opts)
      data
    end

    # Get navigation depth from content
    # Get the average number of clicks (pages visited) to get to a certain page.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(NavigationDepthList, Integer, Hash)>] NavigationDepthList data, response status code and response headers
    def sites_site_id_analytics_content_navigation_depth_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_navigation_depth_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_navigation_depth_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_navigation_depth_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_navigation_depth_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_navigation_depth_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/navigation_depth'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NavigationDepthList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_navigation_depth_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_navigation_depth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get outbound links from content
    # Get links to external domains, that have been used to leave your site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [OutboundLinksList]
    def sites_site_id_analytics_content_outbound_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_outbound_links_get_with_http_info(site_id, opts)
      data
    end

    # Get outbound links from content
    # Get links to external domains, that have been used to leave your site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(OutboundLinksList, Integer, Hash)>] OutboundLinksList data, response status code and response headers
    def sites_site_id_analytics_content_outbound_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_outbound_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/outbound_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutboundLinksList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_outbound_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_outbound_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific outbound link from content
    # A series of historical data points showing the amount of visits for a specific outbound link.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param outbound_link_id [Integer] Id for specific outbound link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OutboundLinksGraphSliceList]
    def sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get(site_id, outbound_link_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get_with_http_info(site_id, outbound_link_id, opts)
      data
    end

    # Get historical data for specific outbound link from content
    # A series of historical data points showing the amount of visits for a specific outbound link.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param outbound_link_id [Integer] Id for specific outbound link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OutboundLinksGraphSliceList, Integer, Hash)>] OutboundLinksGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get_with_http_info(site_id, outbound_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get"
      end
      # verify the required parameter 'outbound_link_id' is set
      if @api_client.config.client_side_validation && outbound_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'outbound_link_id' when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/outbound_links/{outbound_link_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'outbound_link_id' + '}', CGI.escape(outbound_link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutboundLinksGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_outbound_links_outbound_link_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific outbound link from content
    # Get the pages where the specified outbound link has been used
    # @param site_id [Integer] Id for specific site.
    # @param outbound_link_id [Integer] Id for specific outbound link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OutboundLinksPageList]
    def sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get(site_id, outbound_link_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get_with_http_info(site_id, outbound_link_id, opts)
      data
    end

    # Get pages for specific outbound link from content
    # Get the pages where the specified outbound link has been used
    # @param site_id [Integer] Id for specific site.
    # @param outbound_link_id [Integer] Id for specific outbound link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OutboundLinksPageList, Integer, Hash)>] OutboundLinksPageList data, response status code and response headers
    def sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get_with_http_info(site_id, outbound_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get"
      end
      # verify the required parameter 'outbound_link_id' is set
      if @api_client.config.client_side_validation && outbound_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'outbound_link_id' when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/outbound_links/{outbound_link_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'outbound_link_id' + '}', CGI.escape(outbound_link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutboundLinksPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_outbound_links_outbound_link_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get page load time from content
    # Get the average amount of time (in seconds) it takes a page to load.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageLoadTimeDetailsList]
    def sites_site_id_analytics_content_page_load_time_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_page_load_time_get_with_http_info(site_id, opts)
      data
    end

    # Get page load time from content
    # Get the average amount of time (in seconds) it takes a page to load.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageLoadTimeDetailsList, Integer, Hash)>] PageLoadTimeDetailsList data, response status code and response headers
    def sites_site_id_analytics_content_page_load_time_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_page_load_time_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_page_load_time_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_page_load_time_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_page_load_time_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_page_load_time_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/page_load_time'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageLoadTimeDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_page_load_time_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_page_load_time_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages without visits from content
    # Get the pages that have had no visits in the selected time period.  Only pages that meet ALL of the criteria listed below will be included:   * The page must have the Siteimprove Analytics script.   * The page must have Analytics/Quality Assurance integration - i.e. the page must be found in both QA and Analytics and have a match established between them.   * The page must have been found in the latest Quality Assurance crawl.   * The page must have had no visits in the selected time period with any chosen filter and group.   * If the page registered in Quality Assurance has multiple Analytics link matches (in case of a parameter exclusion, for example), the page will only be included if none of these links have had any visits.  These criteria make sure that pages included in the list with relative certainty have NOT had any visits during the selected time period.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PagesWithNoVisitsList]
    def sites_site_id_analytics_content_pages_without_visits_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_pages_without_visits_get_with_http_info(site_id, opts)
      data
    end

    # Get pages without visits from content
    # Get the pages that have had no visits in the selected time period.  Only pages that meet ALL of the criteria listed below will be included:   * The page must have the Siteimprove Analytics script.   * The page must have Analytics/Quality Assurance integration - i.e. the page must be found in both QA and Analytics and have a match established between them.   * The page must have been found in the latest Quality Assurance crawl.   * The page must have had no visits in the selected time period with any chosen filter and group.   * If the page registered in Quality Assurance has multiple Analytics link matches (in case of a parameter exclusion, for example), the page will only be included if none of these links have had any visits.  These criteria make sure that pages included in the list with relative certainty have NOT had any visits during the selected time period.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PagesWithNoVisitsList, Integer, Hash)>] PagesWithNoVisitsList data, response status code and response headers
    def sites_site_id_analytics_content_pages_without_visits_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_pages_without_visits_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_pages_without_visits_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_pages_without_visits_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_pages_without_visits_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_pages_without_visits_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/pages_without_visits'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithNoVisitsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_pages_without_visits_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_pages_without_visits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get parameters from content
    # Visits and page view statistics for all parameters that have been setup.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Filter the parameter names (applied as \\*[query]\\*).
    # @return [ParameterNameList]
    def sites_site_id_analytics_content_parameters_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_parameters_get_with_http_info(site_id, opts)
      data
    end

    # Get parameters from content
    # Visits and page view statistics for all parameters that have been setup.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Filter the parameter names (applied as \\*[query]\\*).
    # @return [Array<(ParameterNameList, Integer, Hash)>] ParameterNameList data, response status code and response headers
    def sites_site_id_analytics_content_parameters_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_parameters_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/parameters'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParameterNameList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_parameters_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_parameters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific parameter from content
    # A series of historical data points showing the amount of visits for a specific parameter.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [ParameterNameValueVisitsGraphSliceList]
    def sites_site_id_analytics_content_parameters_parameter_name_id_history_get(site_id, parameter_name_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_parameters_parameter_name_id_history_get_with_http_info(site_id, parameter_name_id, opts)
      data
    end

    # Get historical data for specific parameter from content
    # A series of historical data points showing the amount of visits for a specific parameter.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(ParameterNameValueVisitsGraphSliceList, Integer, Hash)>] ParameterNameValueVisitsGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_content_parameters_parameter_name_id_history_get_with_http_info(site_id, parameter_name_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParameterNameValueVisitsGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_parameters_parameter_name_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific parameter from content
    # Get the pages where the specified parameter have been collected.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ParameterPageList]
    def sites_site_id_analytics_content_parameters_parameter_name_id_pages_get(site_id, parameter_name_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_parameters_parameter_name_id_pages_get_with_http_info(site_id, parameter_name_id, opts)
      data
    end

    # Get pages for specific parameter from content
    # Get the pages where the specified parameter have been collected.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ParameterPageList, Integer, Hash)>] ParameterPageList data, response status code and response headers
    def sites_site_id_analytics_content_parameters_parameter_name_id_pages_get_with_http_info(site_id, parameter_name_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParameterPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_parameters_parameter_name_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get values for specific parameter from content
    # Get the collected values for the specified parameter.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Filter the values (applied as \\*[query]\\*).
    # @return [ParameterValueList]
    def sites_site_id_analytics_content_parameters_parameter_name_id_values_get(site_id, parameter_name_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_parameters_parameter_name_id_values_get_with_http_info(site_id, parameter_name_id, opts)
      data
    end

    # Get values for specific parameter from content
    # Get the collected values for the specified parameter.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Filter the values (applied as \\*[query]\\*).
    # @return [Array<(ParameterValueList, Integer, Hash)>] ParameterValueList data, response status code and response headers
    def sites_site_id_analytics_content_parameters_parameter_name_id_values_get_with_http_info(site_id, parameter_name_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/values'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParameterValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_parameters_parameter_name_id_values_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific parameter value from campaigns
    # A series of historical data points showing the amount of visits for a specific parameter value.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [ParameterNameValueVisitsGraphSliceList]
    def sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get historical data for specific parameter value from campaigns
    # A series of historical data points showing the amount of visits for a specific parameter value.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(ParameterNameValueVisitsGraphSliceList, Integer, Hash)>] ParameterNameValueVisitsGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/values/{parameter_value_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParameterNameValueVisitsGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific parameter value from content
    # Get the pages where the specified parameter value have been collected.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ParameterPageList]
    def sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get(site_id, parameter_name_id, parameter_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts)
      data
    end

    # Get pages for specific parameter value from content
    # Get the pages where the specified parameter value have been collected.
    # @param site_id [Integer] Id for specific site.
    # @param parameter_name_id [Integer] Id for specific parameter name.
    # @param parameter_value_id [Integer] Id for specific parameter value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ParameterPageList, Integer, Hash)>] ParameterPageList data, response status code and response headers
    def sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get_with_http_info(site_id, parameter_name_id, parameter_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get"
      end
      # verify the required parameter 'parameter_name_id' is set
      if @api_client.config.client_side_validation && parameter_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get"
      end
      # verify the required parameter 'parameter_value_id' is set
      if @api_client.config.client_side_validation && parameter_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_value_id' when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/values/{parameter_value_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'parameter_name_id' + '}', CGI.escape(parameter_name_id.to_s)).sub('{' + 'parameter_value_id' + '}', CGI.escape(parameter_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParameterPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_content_parameters_parameter_name_id_values_parameter_value_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get bounce rates from entries and exits
    # List of pages with bounces and bounce rate.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [BounceRatePageList]
    def sites_site_id_analytics_entries_exits_bounce_rates_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_entries_exits_bounce_rates_get_with_http_info(site_id, opts)
      data
    end

    # Get bounce rates from entries and exits
    # List of pages with bounces and bounce rate.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(BounceRatePageList, Integer, Hash)>] BounceRatePageList data, response status code and response headers
    def sites_site_id_analytics_entries_exits_bounce_rates_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_entries_exits_bounce_rates_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_entries_exits_bounce_rates_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_bounce_rates_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_bounce_rates_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_bounce_rates_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/entries_exits/bounce_rates'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BounceRatePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_entries_exits_bounce_rates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_entries_exits_bounce_rates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get entry and exit rates from entries and exits
    # List the amount of entries and exits registered for your pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [EntryExitRatePageList]
    def sites_site_id_analytics_entries_exits_entry_exit_rates_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_entries_exits_entry_exit_rates_get_with_http_info(site_id, opts)
      data
    end

    # Get entry and exit rates from entries and exits
    # List the amount of entries and exits registered for your pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(EntryExitRatePageList, Integer, Hash)>] EntryExitRatePageList data, response status code and response headers
    def sites_site_id_analytics_entries_exits_entry_exit_rates_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/entries_exits/entry_exit_rates'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntryExitRatePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_entries_exits_entry_exit_rates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get last outbound links for specific exit page from entries and exits
    # The last outbound links and their amount of clicks for a specific exit page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [LastOutboundLinkPageList]
    def sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get last outbound links for specific exit page from entries and exits
    # The last outbound links and their amount of clicks for a specific exit page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(LastOutboundLinkPageList, Integer, Hash)>] LastOutboundLinkPageList data, response status code and response headers
    def sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/entries_exits/entry_exit_rates/{page_id}/last_outbound_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LastOutboundLinkPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_entries_exits_entry_exit_rates_page_id_last_outbound_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get actions from event tracking
    # Get all the event actions performed on your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [EventActionList]
    def sites_site_id_analytics_event_tracking_actions_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_actions_get_with_http_info(site_id, opts)
      data
    end

    # Get actions from event tracking
    # Get all the event actions performed on your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(EventActionList, Integer, Hash)>] EventActionList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_actions_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_actions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_actions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_actions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_actions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_actions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/actions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventActionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get labels for specific pair of category and action from event tracking
    # Get the `labels` that have been used in connection with the specified `category` and `action`.
    # @param site_id [Integer] Id for specific site.
    # @param category_id [Integer] Id of a specific category.
    # @param action_id [Integer] Id of a specific action.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CategoryActionLabelList]
    def sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get(site_id, category_id, action_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get_with_http_info(site_id, category_id, action_id, opts)
      data
    end

    # Get labels for specific pair of category and action from event tracking
    # Get the &#x60;labels&#x60; that have been used in connection with the specified &#x60;category&#x60; and &#x60;action&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param category_id [Integer] Id of a specific category.
    # @param action_id [Integer] Id of a specific action.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CategoryActionLabelList, Integer, Hash)>] CategoryActionLabelList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get_with_http_info(site_id, category_id, action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get"
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get"
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/categories/{category_id}/actions/{action_id}/labels'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'category_id' + '}', CGI.escape(category_id.to_s)).sub('{' + 'action_id' + '}', CGI.escape(action_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryActionLabelList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_categories_category_id_actions_action_id_labels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get actions for specific category from event tracking
    # Get the `actions` that have been used in connection with a specific `category`.
    # @param site_id [Integer] Id for specific site.
    # @param category_id [Integer] Id of a specific category.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [CategoryActionList]
    def sites_site_id_analytics_event_tracking_categories_category_id_actions_get(site_id, category_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_categories_category_id_actions_get_with_http_info(site_id, category_id, opts)
      data
    end

    # Get actions for specific category from event tracking
    # Get the &#x60;actions&#x60; that have been used in connection with a specific &#x60;category&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param category_id [Integer] Id of a specific category.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(CategoryActionList, Integer, Hash)>] CategoryActionList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_categories_category_id_actions_get_with_http_info(site_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get"
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/categories/{category_id}/actions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'category_id' + '}', CGI.escape(category_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryActionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_categories_category_id_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_categories_category_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get categories from event tracking
    # Get all the event categories. Categories are used to group events in logical clusters, such as videos, contact, forms etc.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [EventCategoryList]
    def sites_site_id_analytics_event_tracking_categories_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_categories_get_with_http_info(site_id, opts)
      data
    end

    # Get categories from event tracking
    # Get all the event categories. Categories are used to group events in logical clusters, such as videos, contact, forms etc.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(EventCategoryList, Integer, Hash)>] EventCategoryList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_categories_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_categories_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_categories_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/categories'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventCategoryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_categories_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get events from event tracking
    # Get the events that have been triggered within the chosen period.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [EventList]
    def sites_site_id_analytics_event_tracking_events_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_events_get_with_http_info(site_id, opts)
      data
    end

    # Get events from event tracking
    # Get the events that have been triggered within the chosen period.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(EventList, Integer, Hash)>] EventList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_events_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_events_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/events'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for events from event tracking
    # A series of historical data points showing the amount of events, visits and pages.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [EventGraphItemList]
    def sites_site_id_analytics_event_tracking_events_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_events_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for events from event tracking
    # A series of historical data points showing the amount of events, visits and pages.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(EventGraphItemList, Integer, Hash)>] EventGraphItemList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_events_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_events_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/events/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_events_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_events_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific event from event tracking
    # Get the pages where the specified event have been triggered.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :action_id Id of a specific action.
    # @option opts [Integer] :category_id Id of a specific category.
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :label_id Id of a specific label.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [FilteredEventPageList]
    def sites_site_id_analytics_event_tracking_events_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_events_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for specific event from event tracking
    # Get the pages where the specified event have been triggered.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :action_id Id of a specific action.
    # @option opts [Integer] :category_id Id of a specific category.
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :label_id Id of a specific label.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(FilteredEventPageList, Integer, Hash)>] FilteredEventPageList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_events_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_events_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_events_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/events/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action_id'] = opts[:'action_id'] if !opts[:'action_id'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'label_id'] = opts[:'label_id'] if !opts[:'label_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilteredEventPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_events_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_events_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get labels from event tracking
    # Get all the event labels. Labels are used to see specifics about an event.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [EventLabelList]
    def sites_site_id_analytics_event_tracking_labels_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_labels_get_with_http_info(site_id, opts)
      data
    end

    # Get labels from event tracking
    # Get all the event labels. Labels are used to see specifics about an event.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(EventLabelList, Integer, Hash)>] EventLabelList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_labels_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_labels_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/labels'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventLabelList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_labels_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_labels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get label details from event tracking
    # Get the `action` and `category` pairs that have been used in connection with the specified `label`.
    # @param site_id [Integer] Id for specific site.
    # @param label_id [Integer] Id of a specific label.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [LabelActionList]
    def sites_site_id_analytics_event_tracking_labels_label_id_events_get(site_id, label_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_labels_label_id_events_get_with_http_info(site_id, label_id, opts)
      data
    end

    # Get label details from event tracking
    # Get the &#x60;action&#x60; and &#x60;category&#x60; pairs that have been used in connection with the specified &#x60;label&#x60;.
    # @param site_id [Integer] Id for specific site.
    # @param label_id [Integer] Id of a specific label.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(LabelActionList, Integer, Hash)>] LabelActionList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_labels_label_id_events_get_with_http_info(site_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/labels/{label_id}/events'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'label_id' + '}', CGI.escape(label_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LabelActionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_labels_label_id_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_labels_label_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages from event tracking
    # Get all the pages where an event have been triggered.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [EventPageList]
    def sites_site_id_analytics_event_tracking_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages from event tracking
    # Get all the pages where an event have been triggered.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(EventPageList, Integer, Hash)>] EventPageList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get event details for specific page from event tracking
    # Get the event details for a specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [PageEventList]
    def sites_site_id_analytics_event_tracking_pages_page_id_events_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_pages_page_id_events_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get event details for specific page from event tracking
    # Get the event details for a specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(PageEventList, Integer, Hash)>] PageEventList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_pages_page_id_events_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/pages/{page_id}/events'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageEventList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_pages_page_id_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific page from event tracking
    # A series of historical data points showing the amount of events for the specified page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [EventGraphSliceList]
    def sites_site_id_analytics_event_tracking_pages_page_id_history_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_event_tracking_pages_page_id_history_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get historical data for specific page from event tracking
    # A series of historical data points showing the amount of events for the specified page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(EventGraphSliceList, Integer, Hash)>] EventGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_event_tracking_pages_page_id_history_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/event_tracking/pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_event_tracking_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_event_tracking_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get internal searches
    # The the search terms that your users have entered into your search solution.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_results Filter to see either all search terms or only those that did or did not find a result. (default to 'all')
    # @return [InternalSearchList]
    def sites_site_id_analytics_internal_searches_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_internal_searches_get_with_http_info(site_id, opts)
      data
    end

    # Get internal searches
    # The the search terms that your users have entered into your search solution.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_results Filter to see either all search terms or only those that did or did not find a result. (default to 'all')
    # @return [Array<(InternalSearchList, Integer, Hash)>] InternalSearchList data, response status code and response headers
    def sites_site_id_analytics_internal_searches_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_internal_searches_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_internal_searches_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_get, must be greater than or equal to 1.'
      end

      allowable_values = ["all", "with_results", "without_results"]
      if @api_client.config.client_side_validation && opts[:'search_results'] && !allowable_values.include?(opts[:'search_results'])
        fail ArgumentError, "invalid value for \"search_results\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/internal_searches'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_results'] = opts[:'search_results'] if !opts[:'search_results'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalSearchList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_internal_searches_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_internal_searches_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data from internal searches
    # A series of historical data points showing the amount of visits, searches and exists.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_results Filter to see either all search terms or only those that did or did not find a result. (default to 'all')
    # @return [InternalSearchGraphItemList]
    def sites_site_id_analytics_internal_searches_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_internal_searches_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data from internal searches
    # A series of historical data points showing the amount of visits, searches and exists.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_results Filter to see either all search terms or only those that did or did not find a result. (default to 'all')
    # @return [Array<(InternalSearchGraphItemList, Integer, Hash)>] InternalSearchGraphItemList data, response status code and response headers
    def sites_site_id_analytics_internal_searches_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_internal_searches_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_internal_searches_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_history_get, must be greater than or equal to 1.'
      end

      allowable_values = ["all", "with_results", "without_results"]
      if @api_client.config.client_side_validation && opts[:'search_results'] && !allowable_values.include?(opts[:'search_results'])
        fail ArgumentError, "invalid value for \"search_results\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/internal_searches/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_results'] = opts[:'search_results'] if !opts[:'search_results'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalSearchGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_internal_searches_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_internal_searches_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get actions for specific search term from internal searches
    # Get the actions performed by the user after searching for the specified search term.
    # @param site_id [Integer] Id for specific site.
    # @param search_term_id [Integer] Id of a specific search term.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [InternalSearchPageActionList]
    def sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get(site_id, search_term_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get_with_http_info(site_id, search_term_id, opts)
      data
    end

    # Get actions for specific search term from internal searches
    # Get the actions performed by the user after searching for the specified search term.
    # @param site_id [Integer] Id for specific site.
    # @param search_term_id [Integer] Id of a specific search term.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(InternalSearchPageActionList, Integer, Hash)>] InternalSearchPageActionList data, response status code and response headers
    def sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get_with_http_info(site_id, search_term_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get"
      end
      # verify the required parameter 'search_term_id' is set
      if @api_client.config.client_side_validation && search_term_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_term_id' when calling AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/internal_searches/search_terms/{search_term_id}/actions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_term_id' + '}', CGI.escape(search_term_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalSearchPageActionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_internal_searches_search_terms_search_term_id_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get categories
    # The available categories for use with Key Metrics.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [KeyMetricsCategoryList]
    def sites_site_id_analytics_keymetrics_categories_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_keymetrics_categories_get_with_http_info(site_id, opts)
      data
    end

    # Get categories
    # The available categories for use with Key Metrics.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(KeyMetricsCategoryList, Integer, Hash)>] KeyMetricsCategoryList data, response status code and response headers
    def sites_site_id_analytics_keymetrics_categories_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_keymetrics_categories_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_keymetrics_categories_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_categories_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_categories_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_categories_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/keymetrics/categories'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeyMetricsCategoryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_keymetrics_categories_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_keymetrics_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Key Performance Indicators
    # The Key Performance Indicators for use with Key Metrics.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [KeyMetricsKpiOverviewList]
    def sites_site_id_analytics_keymetrics_kpis_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_keymetrics_kpis_get_with_http_info(site_id, opts)
      data
    end

    # Get Key Performance Indicators
    # The Key Performance Indicators for use with Key Metrics.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(KeyMetricsKpiOverviewList, Integer, Hash)>] KeyMetricsKpiOverviewList data, response status code and response headers
    def sites_site_id_analytics_keymetrics_kpis_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_keymetrics_kpis_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_keymetrics_kpis_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_kpis_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_kpis_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_kpis_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/keymetrics/kpis'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeyMetricsKpiOverviewList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_keymetrics_kpis_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_keymetrics_kpis_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Key Metrics
    # The Key Metrics.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [KeyMetricsMetricList]
    def sites_site_id_analytics_keymetrics_metrics_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_keymetrics_metrics_get_with_http_info(site_id, opts)
      data
    end

    # Get Key Metrics
    # The Key Metrics.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(KeyMetricsMetricList, Integer, Hash)>] KeyMetricsMetricList data, response status code and response headers
    def sites_site_id_analytics_keymetrics_metrics_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_keymetrics_metrics_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_keymetrics_metrics_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_metrics_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_metrics_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_keymetrics_metrics_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/keymetrics/metrics'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeyMetricsMetricList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_keymetrics_metrics_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_keymetrics_metrics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get analytics groups
    # Get the groups available. Groups are used to display statistics for specific sections of the website or a collection of pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [GroupDetailsList]
    def sites_site_id_analytics_overview_groups_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_overview_groups_get_with_http_info(site_id, opts)
      data
    end

    # Get analytics groups
    # Get the groups available. Groups are used to display statistics for specific sections of the website or a collection of pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(GroupDetailsList, Integer, Hash)>] GroupDetailsList data, response status code and response headers
    def sites_site_id_analytics_overview_groups_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_overview_groups_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_overview_groups_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_overview_groups_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_groups_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_groups_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/overview/groups'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_overview_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_overview_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data from overview
    # A series of historical data points showing the most common statistics for your site.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [FullOverviewItemList]
    def sites_site_id_analytics_overview_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_overview_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data from overview
    # A series of historical data points showing the most common statistics for your site.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(FullOverviewItemList, Integer, Hash)>] FullOverviewItemList data, response status code and response headers
    def sites_site_id_analytics_overview_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_overview_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_overview_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_overview_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/overview/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FullOverviewItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_overview_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_overview_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get online visitors from overview
    # Get the current online visitors.  Will always use the `Now` period.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OnlineVisitorList]
    def sites_site_id_analytics_overview_online_visitors_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_overview_online_visitors_get_with_http_info(site_id, opts)
      data
    end

    # Get online visitors from overview
    # Get the current online visitors.  Will always use the &#x60;Now&#x60; period.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OnlineVisitorList, Integer, Hash)>] OnlineVisitorList data, response status code and response headers
    def sites_site_id_analytics_overview_online_visitors_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_overview_online_visitors_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/overview/online_visitors'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineVisitorList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_overview_online_visitors_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_overview_online_visitors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details for online visitor from overview
    # Get a detailed view of the specified online visitor.
    # @param site_id [Integer] Id for specific site.
    # @param session_id [Integer] Id for specific session.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OnlineVisitorDetails]
    def sites_site_id_analytics_overview_online_visitors_session_id_details_get(site_id, session_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_overview_online_visitors_session_id_details_get_with_http_info(site_id, session_id, opts)
      data
    end

    # Get details for online visitor from overview
    # Get a detailed view of the specified online visitor.
    # @param site_id [Integer] Id for specific site.
    # @param session_id [Integer] Id for specific session.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OnlineVisitorDetails, Integer, Hash)>] OnlineVisitorDetails data, response status code and response headers
    def sites_site_id_analytics_overview_online_visitors_session_id_details_get_with_http_info(site_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_details_get"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/overview/online_visitors/{session_id}/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'session_id' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineVisitorDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_overview_online_visitors_session_id_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific online visitor from overview
    # Get the pages visited by the specified online visitor.
    # @param site_id [Integer] Id for specific site.
    # @param session_id [Integer] Id for specific session.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OnlineVisitorPageViewList]
    def sites_site_id_analytics_overview_online_visitors_session_id_pages_get(site_id, session_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_overview_online_visitors_session_id_pages_get_with_http_info(site_id, session_id, opts)
      data
    end

    # Get pages for specific online visitor from overview
    # Get the pages visited by the specified online visitor.
    # @param site_id [Integer] Id for specific site.
    # @param session_id [Integer] Id for specific session.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OnlineVisitorPageViewList, Integer, Hash)>] OnlineVisitorPageViewList data, response status code and response headers
    def sites_site_id_analytics_overview_online_visitors_session_id_pages_get_with_http_info(site_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/overview/online_visitors/{session_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'session_id' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineVisitorPageViewList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_overview_online_visitors_session_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_overview_online_visitors_session_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary for analytics
    # Get a summary of the most common statistics for your site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OverviewStat]
    def sites_site_id_analytics_overview_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_overview_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get summary for analytics
    # Get a summary of the most common statistics for your site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OverviewStat, Integer, Hash)>] OverviewStat data, response status code and response headers
    def sites_site_id_analytics_overview_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_overview_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_overview_summary_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/overview/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OverviewStat'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_overview_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_overview_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get direct traffic from traffic sources
    # Entry pages for the visits that have started through a direct entry to your website (for example from a bookmark) and not through an external referrer or search engine.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [DirectTrafficList]
    def sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get direct traffic from traffic sources
    # Entry pages for the visits that have started through a direct entry to your website (for example from a bookmark) and not through an external referrer or search engine.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(DirectTrafficList, Integer, Hash)>] DirectTrafficList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/direct_traffic_entry_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DirectTrafficList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for direct traffic from traffic sources
    # A series of historical data points showing the direct traffic from traffic sources.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsGraphItemList]
    def sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get historical data for direct traffic from traffic sources
    # A series of historical data points showing the direct traffic from traffic sources.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsGraphItemList, Integer, Hash)>] VisitsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/direct_traffic_entry_pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_direct_traffic_entry_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for external referring domains from traffic sources
    # A series of historical data points showing the visits from external domains that have referred visitors to your website.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsGraphItemList]
    def sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get(site_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get_with_http_info(site_id, domain_id, opts)
      data
    end

    # Get historical data for external referring domains from traffic sources
    # A series of historical data points showing the visits from external domains that have referred visitors to your website.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsGraphItemList, Integer, Hash)>] VisitsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get_with_http_info(site_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_domains/{domain_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get referring pages from an external referring domain from traffic sources
    # The referring pages on the chosen external domain, that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ExternalReferringDomainPageList]
    def sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get(site_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get_with_http_info(site_id, domain_id, opts)
      data
    end

    # Get referring pages from an external referring domain from traffic sources
    # The referring pages on the chosen external domain, that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ExternalReferringDomainPageList, Integer, Hash)>] ExternalReferringDomainPageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get_with_http_info(site_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_domains/{domain_id}/referring_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalReferringDomainPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_domains_domain_id_referring_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get external referring domains from traffic sources
    # External domains that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ExternalReferringDomainList]
    def sites_site_id_analytics_traffic_sources_external_referring_domains_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_domains_get_with_http_info(site_id, opts)
      data
    end

    # Get external referring domains from traffic sources
    # External domains that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ExternalReferringDomainList, Integer, Hash)>] ExternalReferringDomainList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_domains_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_domains'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalReferringDomainList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for external referring pages from traffic sources
    # A series of historical data points showing the visits from external pages that have referred visitors to your website.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param external_page_id [Integer] Id for specific external referring page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsGraphItemList]
    def sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get(site_id, external_page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get_with_http_info(site_id, external_page_id, opts)
      data
    end

    # Get historical data for external referring pages from traffic sources
    # A series of historical data points showing the visits from external pages that have referred visitors to your website.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param external_page_id [Integer] Id for specific external referring page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsGraphItemList, Integer, Hash)>] VisitsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get_with_http_info(site_id, external_page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get"
      end
      # verify the required parameter 'external_page_id' is set
      if @api_client.config.client_side_validation && external_page_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_pages/{external_page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'external_page_id' + '}', CGI.escape(external_page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get landing pages from external referring pages from traffic sources
    # The landing pages by external pages that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param external_page_id [Integer] Id for specific external referring page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [ExternalReferringPageLandingPageList]
    def sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get(site_id, external_page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get_with_http_info(site_id, external_page_id, opts)
      data
    end

    # Get landing pages from external referring pages from traffic sources
    # The landing pages by external pages that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param external_page_id [Integer] Id for specific external referring page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(ExternalReferringPageLandingPageList, Integer, Hash)>] ExternalReferringPageLandingPageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get_with_http_info(site_id, external_page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get"
      end
      # verify the required parameter 'external_page_id' is set
      if @api_client.config.client_side_validation && external_page_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_pages/{external_page_id}/landing_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'external_page_id' + '}', CGI.escape(external_page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalReferringPageLandingPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for landing pages from external referring pages from traffic sources
    # A series of historical data points showing the visits on landing pages by external pages that have referred visitors to your website.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param external_page_id [Integer] Id for specific external referring page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsGraphItemList]
    def sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get(site_id, external_page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get_with_http_info(site_id, external_page_id, opts)
      data
    end

    # Get historical data for landing pages from external referring pages from traffic sources
    # A series of historical data points showing the visits on landing pages by external pages that have referred visitors to your website.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param external_page_id [Integer] Id for specific external referring page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsGraphItemList, Integer, Hash)>] VisitsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get_with_http_info(site_id, external_page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get"
      end
      # verify the required parameter 'external_page_id' is set
      if @api_client.config.client_side_validation && external_page_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_pages/{external_page_id}/landing_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'external_page_id' + '}', CGI.escape(external_page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_pages_external_page_id_landing_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get external referring pages from traffic sources
    # Pages on external domains that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ExternalReferringPageList]
    def sites_site_id_analytics_traffic_sources_external_referring_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_external_referring_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get external referring pages from traffic sources
    # Pages on external domains that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ExternalReferringPageList, Integer, Hash)>] ExternalReferringPageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_external_referring_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/external_referring_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_external_referring_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_external_referring_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get search engines from traffic sources
    # Search engines that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SearchEngineOrganizationList]
    def sites_site_id_analytics_traffic_sources_search_engines_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_get_with_http_info(site_id, opts)
      data
    end

    # Get search engines from traffic sources
    # Search engines that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SearchEngineOrganizationList, Integer, Hash)>] SearchEngineOrganizationList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchEngineOrganizationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific search engine domain link from traffic sources
    # A series of historical data points showing the visits for the specified search engine domain link.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param domain_link_id [Integer] Id for specific domain link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get(site_id, search_engine_id, domain_id, domain_link_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get_with_http_info(site_id, search_engine_id, domain_id, domain_link_id, opts)
      data
    end

    # Get historical data for specific search engine domain link from traffic sources
    # A series of historical data points showing the visits for the specified search engine domain link.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param domain_link_id [Integer] Id for specific domain link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get_with_http_info(site_id, search_engine_id, domain_id, domain_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      # verify the required parameter 'domain_link_id' is set
      if @api_client.config.client_side_validation && domain_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_link_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/domains/{domain_id}/domain_links/{domain_link_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'domain_link_id' + '}', CGI.escape(domain_link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_domain_link_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get links for specific search engine domain from traffic sources
    # Get the referring links for the specified search engine domain.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SearchEngineDomainLinkList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get(site_id, search_engine_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get_with_http_info(site_id, search_engine_id, domain_id, opts)
      data
    end

    # Get links for specific search engine domain from traffic sources
    # Get the referring links for the specified search engine domain.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SearchEngineDomainLinkList, Integer, Hash)>] SearchEngineDomainLinkList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get_with_http_info(site_id, search_engine_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/domains/{domain_id}/domain_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchEngineDomainLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_domain_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific search engine domain from traffic sources
    # A series of historical data points showing the visits for the specified search engine domain.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get(site_id, search_engine_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get_with_http_info(site_id, search_engine_id, domain_id, opts)
      data
    end

    # Get historical data for specific search engine domain from traffic sources
    # A series of historical data points showing the visits for the specified search engine domain.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get_with_http_info(site_id, search_engine_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/domains/{domain_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific search engine domain from traffic sources
    # Get the pages that was reached from the specified search engine domain.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SearchEngineDomainPageList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get(site_id, search_engine_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get_with_http_info(site_id, search_engine_id, domain_id, opts)
      data
    end

    # Get pages for specific search engine domain from traffic sources
    # Get the pages that was reached from the specified search engine domain.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SearchEngineDomainPageList, Integer, Hash)>] SearchEngineDomainPageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get_with_http_info(site_id, search_engine_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/domains/{domain_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchEngineDomainPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific search engine domain page from traffic sources
    # A series of historical data points showing the visits for the specified search engine domain page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get(site_id, search_engine_id, domain_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get_with_http_info(site_id, search_engine_id, domain_id, page_id, opts)
      data
    end

    # Get historical data for specific search engine domain page from traffic sources
    # A series of historical data points showing the visits for the specified search engine domain page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param domain_id [Integer] Id for specific domain.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get_with_http_info(site_id, search_engine_id, domain_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/domains/{domain_id}/pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_domain_id_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get domains for search engines from traffic sources
    # Get the referring domains for the specified search engine.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SearchEngineDomainList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get(site_id, search_engine_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get_with_http_info(site_id, search_engine_id, opts)
      data
    end

    # Get domains for search engines from traffic sources
    # Get the referring domains for the specified search engine.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SearchEngineDomainList, Integer, Hash)>] SearchEngineDomainList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get_with_http_info(site_id, search_engine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/domains'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchEngineDomainList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific search engine from traffic sources
    # A series of historical data points showing the visits for the specified search engine.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get(site_id, search_engine_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get_with_http_info(site_id, search_engine_id, opts)
      data
    end

    # Get historical data for specific search engine from traffic sources
    # A series of historical data points showing the visits for the specified search engine.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get_with_http_info(site_id, search_engine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific search engine from traffic sources
    # Get the pages that was reached from the specified search engine.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SearchEnginePageList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get(site_id, search_engine_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get_with_http_info(site_id, search_engine_id, opts)
      data
    end

    # Get pages for specific search engine from traffic sources
    # Get the pages that was reached from the specified search engine.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SearchEnginePageList, Integer, Hash)>] SearchEnginePageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get_with_http_info(site_id, search_engine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchEnginePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific search engine page from traffic sources
    # A series of historical data points showing the visits for the specified search engine page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get(site_id, search_engine_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get_with_http_info(site_id, search_engine_id, page_id, opts)
      data
    end

    # Get historical data for specific search engine page from traffic sources
    # A series of historical data points showing the visits for the specified search engine page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param search_engine_id [Integer] Id for specific search engine.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get_with_http_info(site_id, search_engine_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get"
      end
      # verify the required parameter 'search_engine_id' is set
      if @api_client.config.client_side_validation && search_engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_engine_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/search_engines/{search_engine_id}/pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'search_engine_id' + '}', CGI.escape(search_engine_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_search_engines_search_engine_id_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get social media organisations from traffic sources
    # Get the social media organisations that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SocialMediaOrganizationList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_get_with_http_info(site_id, opts)
      data
    end

    # Get social media organisations from traffic sources
    # Get the social media organisations that have referred visitors to your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SocialMediaOrganizationList, Integer, Hash)>] SocialMediaOrganizationList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SocialMediaOrganizationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific social media organisation domain link from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation domain link.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param domain_link_id [Integer] Id for specific domain link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get(site_id, social_media_organisation_id, domain_id, domain_link_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get_with_http_info(site_id, social_media_organisation_id, domain_id, domain_link_id, opts)
      data
    end

    # Get historical data for specific social media organisation domain link from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation domain link.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param domain_link_id [Integer] Id for specific domain link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get_with_http_info(site_id, social_media_organisation_id, domain_id, domain_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      # verify the required parameter 'domain_link_id' is set
      if @api_client.config.client_side_validation && domain_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_link_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/domain_links/{domain_link_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'domain_link_id' + '}', CGI.escape(domain_link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_domain_link_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get links for specific social media organisation domain from traffic sources
    # Get the referring links for the specified social media organisation domain.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SocialMediaDomainLinkList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get(site_id, social_media_organisation_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get_with_http_info(site_id, social_media_organisation_id, domain_id, opts)
      data
    end

    # Get links for specific social media organisation domain from traffic sources
    # Get the referring links for the specified social media organisation domain.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SocialMediaDomainLinkList, Integer, Hash)>] SocialMediaDomainLinkList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get_with_http_info(site_id, social_media_organisation_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/domain_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SocialMediaDomainLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_domain_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific social media organisation domain from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation domain.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get(site_id, social_media_organisation_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get_with_http_info(site_id, social_media_organisation_id, domain_id, opts)
      data
    end

    # Get historical data for specific social media organisation domain from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation domain.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get_with_http_info(site_id, social_media_organisation_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific social media organisation domain from traffic sources
    # Get the pages that was reached from the specified social media organisation domain.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SocialMediaDomainPageList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get(site_id, social_media_organisation_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get_with_http_info(site_id, social_media_organisation_id, domain_id, opts)
      data
    end

    # Get pages for specific social media organisation domain from traffic sources
    # Get the pages that was reached from the specified social media organisation domain.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SocialMediaDomainPageList, Integer, Hash)>] SocialMediaDomainPageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get_with_http_info(site_id, social_media_organisation_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SocialMediaDomainPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific social media organisation domain page from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation domain page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get(site_id, social_media_organisation_id, domain_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get_with_http_info(site_id, social_media_organisation_id, domain_id, page_id, opts)
      data
    end

    # Get historical data for specific social media organisation domain page from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation domain page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param domain_id [Integer] Id for specific domain.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get_with_http_info(site_id, social_media_organisation_id, domain_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_domain_id_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get domains for social media organisation from traffic sources
    # Get the referring domains for the specified social media organisation.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SocialMediaDomainList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get(site_id, social_media_organisation_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get_with_http_info(site_id, social_media_organisation_id, opts)
      data
    end

    # Get domains for social media organisation from traffic sources
    # Get the referring domains for the specified social media organisation.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SocialMediaDomainList, Integer, Hash)>] SocialMediaDomainList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get_with_http_info(site_id, social_media_organisation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SocialMediaDomainList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific social media organisation from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get(site_id, social_media_organisation_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get_with_http_info(site_id, social_media_organisation_id, opts)
      data
    end

    # Get historical data for specific social media organisation from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get_with_http_info(site_id, social_media_organisation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for specific social media organisation from traffic sources
    # Get the pages that was reached from the specified social media organisation.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SocialMediaPageList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get(site_id, social_media_organisation_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get_with_http_info(site_id, social_media_organisation_id, opts)
      data
    end

    # Get pages for specific social media organisation from traffic sources
    # Get the pages that was reached from the specified social media organisation.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SocialMediaPageList, Integer, Hash)>] SocialMediaPageList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get_with_http_info(site_id, social_media_organisation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SocialMediaPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific social media organisation page from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisitsReferralsGraphItemList]
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get(site_id, social_media_organisation_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get_with_http_info(site_id, social_media_organisation_id, page_id, opts)
      data
    end

    # Get historical data for specific social media organisation page from traffic sources
    # A series of historical data points showing the visits for the specified social media organisation page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param social_media_organisation_id [Integer] Id for specific social media.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisitsReferralsGraphItemList, Integer, Hash)>] VisitsReferralsGraphItemList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get_with_http_info(site_id, social_media_organisation_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get"
      end
      # verify the required parameter 'social_media_organisation_id' is set
      if @api_client.config.client_side_validation && social_media_organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'social_media_organisation_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/pages/{page_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'social_media_organisation_id' + '}', CGI.escape(social_media_organisation_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisitsReferralsGraphItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_social_media_organisations_social_media_organisation_id_pages_page_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an overview of traffic sources
    # Get an overview of traffic sources
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [TrafficSourceSummaryList]
    def sites_site_id_analytics_traffic_sources_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get an overview of traffic sources
    # Get an overview of traffic sources
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(TrafficSourceSummaryList, Integer, Hash)>] TrafficSourceSummaryList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TrafficSourceSummaryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for traffic sources
    # Get historical data for traffic sources
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [TrafficSourceSummaryTrendGraphList]
    def sites_site_id_analytics_traffic_sources_summary_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_traffic_sources_summary_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for traffic sources
    # Get historical data for traffic sources
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(TrafficSourceSummaryTrendGraphList, Integer, Hash)>] TrafficSourceSummaryTrendGraphList data, response status code and response headers
    def sites_site_id_analytics_traffic_sources_summary_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/traffic_sources/summary/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TrafficSourceSummaryTrendGraphList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_traffic_sources_summary_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_traffic_sources_summary_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get surveys from user feedback
    # Get the surveys created for your account.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [SurveyList]
    def sites_site_id_analytics_user_feedback_surveys_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_get_with_http_info(site_id, opts)
      data
    end

    # Get surveys from user feedback
    # Get the surveys created for your account.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(SurveyList, Integer, Hash)>] SurveyList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SurveyList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get feedbacks for specific survey from user feedback
    # Get the feedbacks received for the specified survey.  Comments and ratings from actual users of your website gives you real user experience data, which cannot be gained from statistics alone. User comments enable you to make specific changes to your website which you know will benefit users of your site, and not just changes which you think will benefit them.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [FeedbackPageList]
    def sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get(site_id, survey_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get_with_http_info(site_id, survey_id, opts)
      data
    end

    # Get feedbacks for specific survey from user feedback
    # Get the feedbacks received for the specified survey.  Comments and ratings from actual users of your website gives you real user experience data, which cannot be gained from statistics alone. User comments enable you to make specific changes to your website which you know will benefit users of your site, and not just changes which you think will benefit them.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(FeedbackPageList, Integer, Hash)>] FeedbackPageList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get_with_http_info(site_id, survey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys/{survey_id}/feedbacks'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'survey_id' + '}', CGI.escape(survey_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeedbackPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for specific survey from user feedback
    # A series of historical data points showing the satisfaction scores and amount of ratings, comments and views for the specified survey.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [FeedbackOverviewGraphSliceList]
    def sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get(site_id, survey_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get_with_http_info(site_id, survey_id, opts)
      data
    end

    # Get historical data for specific survey from user feedback
    # A series of historical data points showing the satisfaction scores and amount of ratings, comments and views for the specified survey.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(FeedbackOverviewGraphSliceList, Integer, Hash)>] FeedbackOverviewGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get_with_http_info(site_id, survey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys/{survey_id}/feedbacks/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'survey_id' + '}', CGI.escape(survey_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeedbackOverviewGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_survey_id_feedbacks_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ignored feedbacks for specific survey from user feedback
    # Get the feedback that has been ignored.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [FeedbackIgnoredList]
    def sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get(site_id, survey_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get_with_http_info(site_id, survey_id, opts)
      data
    end

    # Get ignored feedbacks for specific survey from user feedback
    # Get the feedback that has been ignored.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(FeedbackIgnoredList, Integer, Hash)>] FeedbackIgnoredList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get_with_http_info(site_id, survey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys/{survey_id}/ignored_feedbacks'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'survey_id' + '}', CGI.escape(survey_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeedbackIgnoredList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_survey_id_ignored_feedbacks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with feedback for specific survey from user feedback
    # Get the pages that have received feedback..
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithFeedbackList]
    def sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get(site_id, survey_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get_with_http_info(site_id, survey_id, opts)
      data
    end

    # Get pages with feedback for specific survey from user feedback
    # Get the pages that have received feedback..
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithFeedbackList, Integer, Hash)>] PageWithFeedbackList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get_with_http_info(site_id, survey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys/{survey_id}/pages_with_feedback'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'survey_id' + '}', CGI.escape(survey_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithFeedbackList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ratings for specific survey page with feedback from user feedback
    # Get the feedbacks received for the specified survey at the specified page.  Comments and ratings from actual users of your website gives you real user experience data, which cannot be gained from statistics alone. User comments enable you to make specific changes to your website which you know will benefit users of your site, and not just changes which you think will benefit them.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [FeedbackOnPageList]
    def sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get(site_id, survey_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get_with_http_info(site_id, survey_id, page_id, opts)
      data
    end

    # Get ratings for specific survey page with feedback from user feedback
    # Get the feedbacks received for the specified survey at the specified page.  Comments and ratings from actual users of your website gives you real user experience data, which cannot be gained from statistics alone. User comments enable you to make specific changes to your website which you know will benefit users of your site, and not just changes which you think will benefit them.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(FeedbackOnPageList, Integer, Hash)>] FeedbackOnPageList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get_with_http_info(site_id, survey_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys/{survey_id}/pages_with_feedback/{page_id}/ratings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'survey_id' + '}', CGI.escape(survey_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeedbackOnPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical rating data for specific survey page with feedback from user feedback
    # A series of historical data points showing the amount of ratings for the specified survey on the specified page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [FeedbackRatingGraphList]
    def sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get(site_id, survey_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get_with_http_info(site_id, survey_id, page_id, opts)
      data
    end

    # Get historical rating data for specific survey page with feedback from user feedback
    # A series of historical data points showing the amount of ratings for the specified survey on the specified page.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param survey_id [Integer] Id of a specific survey.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(FeedbackRatingGraphList, Integer, Hash)>] FeedbackRatingGraphList data, response status code and response headers
    def sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get_with_http_info(site_id, survey_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/user_feedback/surveys/{survey_id}/pages_with_feedback/{page_id}/ratings/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'survey_id' + '}', CGI.escape(survey_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeedbackRatingGraphList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_user_feedback_surveys_survey_id_pages_with_feedback_page_id_ratings_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get versions for specific browser from visitors
    # Get the versions of the specified browsers that have been used to visit your site.
    # @param site_id [Integer] Id for specific site.
    # @param browser_name [String] Name of specific browser (ie. \&quot;Chrome\&quot;, \&quot;Firefox\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [BrowserVersionList]
    def sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get(site_id, browser_name, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get_with_http_info(site_id, browser_name, opts)
      data
    end

    # Get versions for specific browser from visitors
    # Get the versions of the specified browsers that have been used to visit your site.
    # @param site_id [Integer] Id for specific site.
    # @param browser_name [String] Name of specific browser (ie. \&quot;Chrome\&quot;, \&quot;Firefox\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(BrowserVersionList, Integer, Hash)>] BrowserVersionList data, response status code and response headers
    def sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get_with_http_info(site_id, browser_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get"
      end
      # verify the required parameter 'browser_name' is set
      if @api_client.config.client_side_validation && browser_name.nil?
        fail ArgumentError, "Missing the required parameter 'browser_name' when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/browsers/browser_names/{browser_name}/versions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'browser_name' + '}', CGI.escape(browser_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrowserVersionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for a specific browsers versions from visitors
    # A series of historical data points showing the amount of visits for a series of versions of the specified browser.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param browser_name [String] Name of specific browser (ie. \&quot;Chrome\&quot;, \&quot;Firefox\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [BrowserVersionGraphSliceList]
    def sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get(site_id, browser_name, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get_with_http_info(site_id, browser_name, opts)
      data
    end

    # Get historical data for a specific browsers versions from visitors
    # A series of historical data points showing the amount of visits for a series of versions of the specified browser.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param browser_name [String] Name of specific browser (ie. \&quot;Chrome\&quot;, \&quot;Firefox\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(BrowserVersionGraphSliceList, Integer, Hash)>] BrowserVersionGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get_with_http_info(site_id, browser_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get"
      end
      # verify the required parameter 'browser_name' is set
      if @api_client.config.client_side_validation && browser_name.nil?
        fail ArgumentError, "Missing the required parameter 'browser_name' when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/browsers/browser_names/{browser_name}/versions/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'browser_name' + '}', CGI.escape(browser_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrowserVersionGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_browsers_browser_names_browser_name_versions_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get browsers from visitors
    # Get the browsers used by your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [BrowserList]
    def sites_site_id_analytics_visitors_browsers_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_browsers_get_with_http_info(site_id, opts)
      data
    end

    # Get browsers from visitors
    # Get the browsers used by your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(BrowserList, Integer, Hash)>] BrowserList data, response status code and response headers
    def sites_site_id_analytics_visitors_browsers_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_browsers_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/browsers'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrowserList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_browsers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_browsers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for browsers from visitors
    # A series of historical data points showing the amount of visits for a series of browsers.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [BrowserGraphSliceList]
    def sites_site_id_analytics_visitors_browsers_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_browsers_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for browsers from visitors
    # A series of historical data points showing the amount of visits for a series of browsers.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(BrowserGraphSliceList, Integer, Hash)>] BrowserGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_visitors_browsers_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_browsers_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_browsers_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/browsers/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrowserGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_browsers_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_browsers_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get regions of countries from visitors
    # Overview of where visitors come from divided by region per country.
    # @param site_id [Integer] Id for specific site.
    # @param country_id [Integer] Id for specific country.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [RegionList]
    def sites_site_id_analytics_visitors_countries_country_id_regions_get(site_id, country_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_countries_country_id_regions_get_with_http_info(site_id, country_id, opts)
      data
    end

    # Get regions of countries from visitors
    # Overview of where visitors come from divided by region per country.
    # @param site_id [Integer] Id for specific site.
    # @param country_id [Integer] Id for specific country.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(RegionList, Integer, Hash)>] RegionList data, response status code and response headers
    def sites_site_id_analytics_visitors_countries_country_id_regions_get_with_http_info(site_id, country_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get"
      end
      # verify the required parameter 'country_id' is set
      if @api_client.config.client_side_validation && country_id.nil?
        fail ArgumentError, "Missing the required parameter 'country_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/countries/{country_id}/regions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'country_id' + '}', CGI.escape(country_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_countries_country_id_regions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cities of regions of countries from visitors
    # Overview of where visitors come from divided by city per region per country.
    # @param site_id [Integer] Id for specific site.
    # @param country_id [Integer] Id for specific country.
    # @param region_id [Integer] Id for specific region.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CityList]
    def sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get(site_id, country_id, region_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get_with_http_info(site_id, country_id, region_id, opts)
      data
    end

    # Get cities of regions of countries from visitors
    # Overview of where visitors come from divided by city per region per country.
    # @param site_id [Integer] Id for specific site.
    # @param country_id [Integer] Id for specific country.
    # @param region_id [Integer] Id for specific region.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CityList, Integer, Hash)>] CityList data, response status code and response headers
    def sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get_with_http_info(site_id, country_id, region_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get"
      end
      # verify the required parameter 'country_id' is set
      if @api_client.config.client_side_validation && country_id.nil?
        fail ArgumentError, "Missing the required parameter 'country_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get"
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/countries/{country_id}/regions/{region_id}/cities'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'country_id' + '}', CGI.escape(country_id.to_s)).sub('{' + 'region_id' + '}', CGI.escape(region_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_countries_country_id_regions_region_id_cities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get countries from visitors
    # Overview of where visitors come from divided by country.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CountryList]
    def sites_site_id_analytics_visitors_countries_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_countries_get_with_http_info(site_id, opts)
      data
    end

    # Get countries from visitors
    # Overview of where visitors come from divided by country.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CountryList, Integer, Hash)>] CountryList data, response status code and response headers
    def sites_site_id_analytics_visitors_countries_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_countries_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_countries_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/countries'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CountryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_countries_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_countries_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get devices from visitors
    # See which type of device is being utilised the most. The category \"Desktop\" includes other devices such as gaming consoles and smart TV.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [DeviceList]
    def sites_site_id_analytics_visitors_devices_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_devices_get_with_http_info(site_id, opts)
      data
    end

    # Get devices from visitors
    # See which type of device is being utilised the most. The category \&quot;Desktop\&quot; includes other devices such as gaming consoles and smart TV.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(DeviceList, Integer, Hash)>] DeviceList data, response status code and response headers
    def sites_site_id_analytics_visitors_devices_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_devices_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/devices'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_devices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for devices from visitors
    # A series of historical data points showing the devices from visitors.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months. 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [DeviceGraphSliceList]
    def sites_site_id_analytics_visitors_devices_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_devices_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for devices from visitors
    # A series of historical data points showing the devices from visitors.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months. 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(DeviceGraphSliceList, Integer, Hash)>] DeviceGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_visitors_devices_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_devices_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_devices_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/devices/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_devices_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_devices_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get operating systems from visitors
    # A full list of the operating systems that visitors are using.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OperatingSystemList]
    def sites_site_id_analytics_visitors_operating_systems_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_operating_systems_get_with_http_info(site_id, opts)
      data
    end

    # Get operating systems from visitors
    # A full list of the operating systems that visitors are using.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OperatingSystemList, Integer, Hash)>] OperatingSystemList data, response status code and response headers
    def sites_site_id_analytics_visitors_operating_systems_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/operating_systems'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OperatingSystemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_operating_systems_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for operating systems from visitors
    # A series of historical data points showing the operating sytems from visitors.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OperatingSystemGraphSliceList]
    def sites_site_id_analytics_visitors_operating_systems_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_operating_systems_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for operating systems from visitors
    # A series of historical data points showing the operating sytems from visitors.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OperatingSystemGraphSliceList, Integer, Hash)>] OperatingSystemGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_visitors_operating_systems_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/operating_systems/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OperatingSystemGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_operating_systems_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get versions of operating systems from visitors
    # Gets a version breakdown of a operating system.
    # @param site_id [Integer] Id for specific site.
    # @param os_family [String] Name of specific OS (ie. \&quot;Windows\&quot;, \&quot;iOS\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OperatingSystemVersionList]
    def sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get(site_id, os_family, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get_with_http_info(site_id, os_family, opts)
      data
    end

    # Get versions of operating systems from visitors
    # Gets a version breakdown of a operating system.
    # @param site_id [Integer] Id for specific site.
    # @param os_family [String] Name of specific OS (ie. \&quot;Windows\&quot;, \&quot;iOS\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OperatingSystemVersionList, Integer, Hash)>] OperatingSystemVersionList data, response status code and response headers
    def sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get_with_http_info(site_id, os_family, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get"
      end
      # verify the required parameter 'os_family' is set
      if @api_client.config.client_side_validation && os_family.nil?
        fail ArgumentError, "Missing the required parameter 'os_family' when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/operating_systems/os_families/{os_family}/versions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'os_family' + '}', CGI.escape(os_family.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OperatingSystemVersionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for a specific OS's versions from visitors
    # A series of historical data points showing the amount of visits for a series of versions of the specified OS.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param os_family [String] Name of specific OS (ie. \&quot;Windows\&quot;, \&quot;iOS\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OperatingSystemVersionGraphSliceList]
    def sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get(site_id, os_family, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get_with_http_info(site_id, os_family, opts)
      data
    end

    # Get historical data for a specific OS&#39;s versions from visitors
    # A series of historical data points showing the amount of visits for a series of versions of the specified OS.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param os_family [String] Name of specific OS (ie. \&quot;Windows\&quot;, \&quot;iOS\&quot; etc)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OperatingSystemVersionGraphSliceList, Integer, Hash)>] OperatingSystemVersionGraphSliceList data, response status code and response headers
    def sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get_with_http_info(site_id, os_family, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get"
      end
      # verify the required parameter 'os_family' is set
      if @api_client.config.client_side_validation && os_family.nil?
        fail ArgumentError, "Missing the required parameter 'os_family' when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/operating_systems/os_families/{os_family}/versions/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'os_family' + '}', CGI.escape(os_family.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OperatingSystemVersionGraphSliceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_operating_systems_os_families_os_family_versions_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organisations from visitors
    # Get a list of visiting organisations, identified through IP address.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [OrganisationList]
    def sites_site_id_analytics_visitors_organisations_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_organisations_get_with_http_info(site_id, opts)
      data
    end

    # Get organisations from visitors
    # Get a list of visiting organisations, identified through IP address.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(OrganisationList, Integer, Hash)>] OrganisationList data, response status code and response headers
    def sites_site_id_analytics_visitors_organisations_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_organisations_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/organisations'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganisationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_organisations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_organisations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list IP addresses for a specific organisation from visitors
    # Get the IP addresses identified as belonging to a specific organisation from visitors.
    # @param site_id [Integer] Id for specific site.
    # @param organisation_id [Integer] Id for specific organisation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OrganisationIpList]
    def sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get(site_id, organisation_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get_with_http_info(site_id, organisation_id, opts)
      data
    end

    # Get a list IP addresses for a specific organisation from visitors
    # Get the IP addresses identified as belonging to a specific organisation from visitors.
    # @param site_id [Integer] Id for specific site.
    # @param organisation_id [Integer] Id for specific organisation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OrganisationIpList, Integer, Hash)>] OrganisationIpList data, response status code and response headers
    def sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get_with_http_info(site_id, organisation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get"
      end
      # verify the required parameter 'organisation_id' is set
      if @api_client.config.client_side_validation && organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/organisations/{organisation_id}/ip_addresses'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'organisation_id' + '}', CGI.escape(organisation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganisationIpList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_organisations_organisation_id_ip_addresses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the pages visited by a specific organisation from visitors
    # All pages visited by a specific organisation.
    # @param site_id [Integer] Id for specific site.
    # @param organisation_id [Integer] Id for specific organisation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [OrganisationPageList]
    def sites_site_id_analytics_visitors_organisations_organisation_id_pages_get(site_id, organisation_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_organisations_organisation_id_pages_get_with_http_info(site_id, organisation_id, opts)
      data
    end

    # Get the pages visited by a specific organisation from visitors
    # All pages visited by a specific organisation.
    # @param site_id [Integer] Id for specific site.
    # @param organisation_id [Integer] Id for specific organisation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(OrganisationPageList, Integer, Hash)>] OrganisationPageList data, response status code and response headers
    def sites_site_id_analytics_visitors_organisations_organisation_id_pages_get_with_http_info(site_id, organisation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get"
      end
      # verify the required parameter 'organisation_id' is set
      if @api_client.config.client_side_validation && organisation_id.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/organisations/{organisation_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'organisation_id' + '}', CGI.escape(organisation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganisationPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_organisations_organisation_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_organisations_organisation_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get screen resolutions from visitors
    # Get a list of screen resolutions that visitors are using.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [ResolutionList]
    def sites_site_id_analytics_visitors_screen_resolutions_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_analytics_visitors_screen_resolutions_get_with_http_info(site_id, opts)
      data
    end

    # Get screen resolutions from visitors
    # Get a list of screen resolutions that visitors are using.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id Id for specific filter.
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(ResolutionList, Integer, Hash)>] ResolutionList data, response status code and response headers
    def sites_site_id_analytics_visitors_screen_resolutions_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.sites_site_id_analytics_visitors_screen_resolutions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AnalyticsApi.sites_site_id_analytics_visitors_screen_resolutions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_screen_resolutions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_screen_resolutions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AnalyticsApi.sites_site_id_analytics_visitors_screen_resolutions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/analytics/visitors/screen_resolutions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResolutionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.sites_site_id_analytics_visitors_screen_resolutions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#sites_site_id_analytics_visitors_screen_resolutions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
