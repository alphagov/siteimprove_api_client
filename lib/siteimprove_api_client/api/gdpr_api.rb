=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class GDPRApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get GDPR-information for a specific domain
    # Get information about nameservers, registrant, subdomains etc for a specific domain.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @return [DomainDetails]
    def gdpr_domains_and_ip_addresses_domains_domain_id_get(domain_id, opts = {})
      data, _status_code, _headers = gdpr_domains_and_ip_addresses_domains_domain_id_get_with_http_info(domain_id, opts)
      data
    end

    # Get GDPR-information for a specific domain
    # Get information about nameservers, registrant, subdomains etc for a specific domain.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDetails, Integer, Hash)>] DomainDetails data, response status code and response headers
    def gdpr_domains_and_ip_addresses_domains_domain_id_get_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_get ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_get"
      end
      # resource path
      local_var_path = '/gdpr/domains_and_ip_addresses/domains/{domain_id}'.sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GDPRApi#gdpr_domains_and_ip_addresses_domains_domain_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GDPR-information about subdomains
    # Get information about all subdomains to this domain, inclusive optional redirects.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DomainsSubdomainsList]
    def gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get(domain_id, opts = {})
      data, _status_code, _headers = gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get_with_http_info(domain_id, opts)
      data
    end

    # Get GDPR-information about subdomains
    # Get information about all subdomains to this domain, inclusive optional redirects.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DomainsSubdomainsList, Integer, Hash)>] DomainsSubdomainsList data, response status code and response headers
    def gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/gdpr/domains_and_ip_addresses/domains/{domain_id}/subdomains'.sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainsSubdomainsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GDPRApi.gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GDPRApi#gdpr_domains_and_ip_addresses_domains_domain_id_subdomains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GDPR-info for all domains
    # Get all available GDPR-information about the domains, IP-addresses, and sub-domains related to the account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain_status Domain status to show confirmed, uncertain or rejected domains. (default to 'confirmed')
    # @option opts [Boolean] :is_top_level True for \&quot;a.com\&quot; and \&quot;b.co.uk\&quot; but false for \&quot;c.d.com\&quot; and \&quot;e.f.co.uk\&quot;.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [DomainIndexList]
    def gdpr_domains_and_ip_addresses_domains_get(opts = {})
      data, _status_code, _headers = gdpr_domains_and_ip_addresses_domains_get_with_http_info(opts)
      data
    end

    # Get GDPR-info for all domains
    # Get all available GDPR-information about the domains, IP-addresses, and sub-domains related to the account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain_status Domain status to show confirmed, uncertain or rejected domains. (default to 'confirmed')
    # @option opts [Boolean] :is_top_level True for \&quot;a.com\&quot; and \&quot;b.co.uk\&quot; but false for \&quot;c.d.com\&quot; and \&quot;e.f.co.uk\&quot;.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(DomainIndexList, Integer, Hash)>] DomainIndexList data, response status code and response headers
    def gdpr_domains_and_ip_addresses_domains_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GDPRApi.gdpr_domains_and_ip_addresses_domains_get ...'
      end
      allowable_values = ["confirmed", "unconfirmed", "rejected"]
      if @api_client.config.client_side_validation && opts[:'domain_status'] && !allowable_values.include?(opts[:'domain_status'])
        fail ArgumentError, "invalid value for \"domain_status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GDPRApi.gdpr_domains_and_ip_addresses_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/gdpr/domains_and_ip_addresses/domains'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain_status'] = opts[:'domain_status'] if !opts[:'domain_status'].nil?
      query_params[:'is_top_level'] = opts[:'is_top_level'] if !opts[:'is_top_level'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainIndexList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GDPRApi.gdpr_domains_and_ip_addresses_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GDPRApi#gdpr_domains_and_ip_addresses_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
