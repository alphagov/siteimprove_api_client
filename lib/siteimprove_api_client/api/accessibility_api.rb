=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class AccessibilityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get decisions on issues for specific pages from accessibility
    # Get decisions on issues for specific pages from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param chapter [String] WCAG issue chapter for the problem
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param subtype [String] Decision type (approved, cant fix, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageForIgnoredIssueDecisionList]
    def sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get(site_id, chapter, check_id, subtype, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get_with_http_info(site_id, chapter, check_id, subtype, opts)
      data
    end

    # Get decisions on issues for specific pages from accessibility
    # Get decisions on issues for specific pages from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param chapter [String] WCAG issue chapter for the problem
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param subtype [String] Decision type (approved, cant fix, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageForIgnoredIssueDecisionList, Integer, Hash)>] PageForIgnoredIssueDecisionList data, response status code and response headers
    def sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get_with_http_info(site_id, chapter, check_id, subtype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get"
      end
      # verify the required parameter 'chapter' is set
      if @api_client.config.client_side_validation && chapter.nil?
        fail ArgumentError, "Missing the required parameter 'chapter' when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get"
      end
      # verify the required parameter 'subtype' is set
      if @api_client.config.client_side_validation && subtype.nil?
        fail ArgumentError, "Missing the required parameter 'subtype' when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get"
      end
      # verify enum value
      allowable_values = ["ignored", "cant_fix", "approved"]
      if @api_client.config.client_side_validation && !allowable_values.include?(subtype)
        fail ArgumentError, "invalid value for \"subtype\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/decision/issues/{chapter}/{check_id}/{subtype}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'chapter' + '}', CGI.escape(chapter.to_s)).sub('{' + 'check_id' + '}', CGI.escape(check_id.to_s)).sub('{' + 'subtype' + '}', CGI.escape(subtype.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageForIgnoredIssueDecisionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_decision_issues_chapter_check_id_subtype_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get decisions on issues from accessibility
    # Get decisions on issues from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IgnoredIssueDecisionList]
    def sites_site_id_accessibility_decision_issues_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_decision_issues_get_with_http_info(site_id, opts)
      data
    end

    # Get decisions on issues from accessibility
    # Get decisions on issues from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IgnoredIssueDecisionList, Integer, Hash)>] IgnoredIssueDecisionList data, response status code and response headers
    def sites_site_id_accessibility_decision_issues_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_decision_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/decision/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IgnoredIssueDecisionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_decision_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_decision_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get decisions on items for specific pages from accessibility
    # Get decisions on items for specific pages from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param chapter [String] WCAG issue chapter for the problem
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param subtype [String] Decision type (approved, cant fix, etc.)
    # @param hash [String] MD5 hash identifying the item the decision is made for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IgnoredItemPageList]
    def sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get(site_id, chapter, check_id, subtype, hash, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get_with_http_info(site_id, chapter, check_id, subtype, hash, opts)
      data
    end

    # Get decisions on items for specific pages from accessibility
    # Get decisions on items for specific pages from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param chapter [String] WCAG issue chapter for the problem
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param subtype [String] Decision type (approved, cant fix, etc.)
    # @param hash [String] MD5 hash identifying the item the decision is made for
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IgnoredItemPageList, Integer, Hash)>] IgnoredItemPageList data, response status code and response headers
    def sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get_with_http_info(site_id, chapter, check_id, subtype, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get"
      end
      # verify the required parameter 'chapter' is set
      if @api_client.config.client_side_validation && chapter.nil?
        fail ArgumentError, "Missing the required parameter 'chapter' when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get"
      end
      # verify the required parameter 'subtype' is set
      if @api_client.config.client_side_validation && subtype.nil?
        fail ArgumentError, "Missing the required parameter 'subtype' when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get"
      end
      # verify enum value
      allowable_values = ["ignored", "cant_fix", "approved"]
      if @api_client.config.client_side_validation && !allowable_values.include?(subtype)
        fail ArgumentError, "invalid value for \"subtype\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/decision/items/{chapter}/{check_id}/{subtype}/{hash}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'chapter' + '}', CGI.escape(chapter.to_s)).sub('{' + 'check_id' + '}', CGI.escape(check_id.to_s)).sub('{' + 'subtype' + '}', CGI.escape(subtype.to_s)).sub('{' + 'hash' + '}', CGI.escape(hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IgnoredItemPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_decision_items_chapter_check_id_subtype_hash_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get decisions on items from accessibility
    # Get decisions on items from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IgnoredItemDecisionList]
    def sites_site_id_accessibility_decision_items_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_decision_items_get_with_http_info(site_id, opts)
      data
    end

    # Get decisions on items from accessibility
    # Get decisions on items from accessibility
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IgnoredItemDecisionList, Integer, Hash)>] IgnoredItemDecisionList data, response status code and response headers
    def sites_site_id_accessibility_decision_items_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_decision_items_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_decision_items_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_items_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_items_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_decision_items_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/decision/items'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IgnoredItemDecisionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_decision_items_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_decision_items_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issues from accessibility
    # Retrieves the issues from accessibility; how many pages that have the Issue; the guideline; its conformance level (A, AA, or AAA); its severity; links to pages having the Issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IssueList1]
    def sites_site_id_accessibility_issues_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_issues_get_with_http_info(site_id, opts)
      data
    end

    # Get issues from accessibility
    # Retrieves the issues from accessibility; how many pages that have the Issue; the guideline; its conformance level (A, AA, or AAA); its severity; links to pages having the Issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IssueList1, Integer, Hash)>] IssueList1 data, response status code and response headers
    def sites_site_id_accessibility_issues_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with this issue from accessibility
    # Retrieves pages with this issue from accessibility. The issue is identified by its check_id.
    # @param site_id [Integer] Id for specific site.
    # @param success_criterion [String] WCAG success criterion key (e.g. 2.4.9). Lookup: https://www.w3.org/TR/WCAG20/ 
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SpecificIssuePageList]
    def sites_site_id_accessibility_issues_success_criterion_check_id_pages_get(site_id, success_criterion, check_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_issues_success_criterion_check_id_pages_get_with_http_info(site_id, success_criterion, check_id, opts)
      data
    end

    # Get pages with this issue from accessibility
    # Retrieves pages with this issue from accessibility. The issue is identified by its check_id.
    # @param site_id [Integer] Id for specific site.
    # @param success_criterion [String] WCAG success criterion key (e.g. 2.4.9). Lookup: https://www.w3.org/TR/WCAG20/ 
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SpecificIssuePageList, Integer, Hash)>] SpecificIssuePageList data, response status code and response headers
    def sites_site_id_accessibility_issues_success_criterion_check_id_pages_get_with_http_info(site_id, success_criterion, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get"
      end
      # verify the required parameter 'success_criterion' is set
      if @api_client.config.client_side_validation && success_criterion.nil?
        fail ArgumentError, "Missing the required parameter 'success_criterion' when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/accessibility/issues/{success_criterion}/{check_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'success_criterion' + '}', CGI.escape(success_criterion.to_s)).sub('{' + 'check_id' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpecificIssuePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_issues_success_criterion_check_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get progress for this issue from accessibility
    # Retrieves issue progress for accessibility. Returns a list of how many many instances of this issue is present on the site, how many pages have this issue, how many pages the issue has been ignored on, and how many pages in total the site has had over time.
    # @param site_id [Integer] Id for specific site.
    # @param success_criterion [String] WCAG success criterion key (e.g. 2.4.9). Lookup: https://www.w3.org/TR/WCAG20/ 
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [AccessibilityHistoryIssueInstancesList]
    def sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get(site_id, success_criterion, check_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get_with_http_info(site_id, success_criterion, check_id, opts)
      data
    end

    # Get progress for this issue from accessibility
    # Retrieves issue progress for accessibility. Returns a list of how many many instances of this issue is present on the site, how many pages have this issue, how many pages the issue has been ignored on, and how many pages in total the site has had over time.
    # @param site_id [Integer] Id for specific site.
    # @param success_criterion [String] WCAG success criterion key (e.g. 2.4.9). Lookup: https://www.w3.org/TR/WCAG20/ 
    # @param check_id [Integer] id for the Accessibility check. {1, 2, ... 135} Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(AccessibilityHistoryIssueInstancesList, Integer, Hash)>] AccessibilityHistoryIssueInstancesList data, response status code and response headers
    def sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get_with_http_info(site_id, success_criterion, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get"
      end
      # verify the required parameter 'success_criterion' is set
      if @api_client.config.client_side_validation && success_criterion.nil?
        fail ArgumentError, "Missing the required parameter 'success_criterion' when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/issues/{success_criterion}/{check_id}/progress/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'success_criterion' + '}', CGI.escape(success_criterion.to_s)).sub('{' + 'check_id' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessibilityHistoryIssueInstancesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_issues_success_criterion_check_id_progress_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overview of groups for accessibility
    # Retrieve overview of groups for accessibility. Returns the name of the group; its id; the number of pages in the group; the number of A, AA, AAA, and PDF issues for pages handled by this group
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [AccessibilityGroupsOverviewList]
    def sites_site_id_accessibility_overview_groups_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_overview_groups_get_with_http_info(site_id, opts)
      data
    end

    # Get overview of groups for accessibility
    # Retrieve overview of groups for accessibility. Returns the name of the group; its id; the number of pages in the group; the number of A, AA, AAA, and PDF issues for pages handled by this group
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(AccessibilityGroupsOverviewList, Integer, Hash)>] AccessibilityGroupsOverviewList data, response status code and response headers
    def sites_site_id_accessibility_overview_groups_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_overview_groups_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/overview/groups'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessibilityGroupsOverviewList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_overview_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_overview_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of users for this group
    # Retrieves list of users for this group. Returns id for user, user name, and user email
    # @param site_id [Integer] Id for specific site.
    # @param group_id [Integer] Id for specific group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [AccessibilityGroupPersonList]
    def sites_site_id_accessibility_overview_groups_group_id_users_get(site_id, group_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_overview_groups_group_id_users_get_with_http_info(site_id, group_id, opts)
      data
    end

    # Get list of users for this group
    # Retrieves list of users for this group. Returns id for user, user name, and user email
    # @param site_id [Integer] Id for specific site.
    # @param group_id [Integer] Id for specific group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(AccessibilityGroupPersonList, Integer, Hash)>] AccessibilityGroupPersonList data, response status code and response headers
    def sites_site_id_accessibility_overview_groups_group_id_users_get_with_http_info(site_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/overview/groups/{group_id}/users'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessibilityGroupPersonList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_overview_groups_group_id_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_overview_groups_group_id_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get progress for all instances from accessibility
    # Retrieves overall instance progress for accessibility. Returns a list of how many total instances are present on the site, as well as how many total pages are present. All of the data is filterable by conformance level (A, AA, AAA), severity, and responsibility.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :roles Roles to be included in the result. (default to 'editor')
    # @option opts [String] :severities Severities to be included in the result. (default to 'error')
    # @return [IHistoryInstancesValuableList]
    def sites_site_id_accessibility_overview_progress_instances_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_overview_progress_instances_history_get_with_http_info(site_id, opts)
      data
    end

    # Get progress for all instances from accessibility
    # Retrieves overall instance progress for accessibility. Returns a list of how many total instances are present on the site, as well as how many total pages are present. All of the data is filterable by conformance level (A, AA, AAA), severity, and responsibility.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :roles Roles to be included in the result. (default to 'editor')
    # @option opts [String] :severities Severities to be included in the result. (default to 'error')
    # @return [Array<(IHistoryInstancesValuableList, Integer, Hash)>] IHistoryInstancesValuableList data, response status code and response headers
    def sites_site_id_accessibility_overview_progress_instances_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_overview_progress_instances_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_instances_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_instances_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_instances_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_instances_history_get, must be greater than or equal to 1.'
      end

      allowable_values = ["editor", "developer", "webmaster", "editor,developer", "editor,webmaster", "developer,webmaster", "editor,developer,webmaster"]
      if @api_client.config.client_side_validation && opts[:'roles'] && !allowable_values.include?(opts[:'roles'])
        fail ArgumentError, "invalid value for \"roles\", must be one of #{allowable_values}"
      end
      allowable_values = ["error", "warning", "review", "error,warning", "error,review", "warning,review", "error,warning,review"]
      if @api_client.config.client_side_validation && opts[:'severities'] && !allowable_values.include?(opts[:'severities'])
        fail ArgumentError, "invalid value for \"severities\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/accessibility/overview/progress/instances/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?
      query_params[:'severities'] = opts[:'severities'] if !opts[:'severities'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IHistoryInstancesValuableList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_overview_progress_instances_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_overview_progress_instances_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get progress for all issues from accessibility
    # Retrieves overall issue progress for accessibility. Returns a list of how many total issues are present on the site, how many issues are excluded, as well as how many total pages are present. All of the data is filterable by conformance level (A, AA, AAA), severity, and responsibility.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :roles Roles to be included in the result. (default to 'editor')
    # @option opts [String] :severities Severities to be included in the result. (default to 'error')
    # @return [IHistoryIssuesValuableList]
    def sites_site_id_accessibility_overview_progress_issues_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_overview_progress_issues_history_get_with_http_info(site_id, opts)
      data
    end

    # Get progress for all issues from accessibility
    # Retrieves overall issue progress for accessibility. Returns a list of how many total issues are present on the site, how many issues are excluded, as well as how many total pages are present. All of the data is filterable by conformance level (A, AA, AAA), severity, and responsibility.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @option opts [String] :roles Roles to be included in the result. (default to 'editor')
    # @option opts [String] :severities Severities to be included in the result. (default to 'error')
    # @return [Array<(IHistoryIssuesValuableList, Integer, Hash)>] IHistoryIssuesValuableList data, response status code and response headers
    def sites_site_id_accessibility_overview_progress_issues_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_overview_progress_issues_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_issues_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_issues_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_issues_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_progress_issues_history_get, must be greater than or equal to 1.'
      end

      allowable_values = ["editor", "developer", "webmaster", "editor,developer", "editor,webmaster", "developer,webmaster", "editor,developer,webmaster"]
      if @api_client.config.client_side_validation && opts[:'roles'] && !allowable_values.include?(opts[:'roles'])
        fail ArgumentError, "invalid value for \"roles\", must be one of #{allowable_values}"
      end
      allowable_values = ["error", "warning", "review", "error,warning", "error,review", "warning,review", "error,warning,review"]
      if @api_client.config.client_side_validation && opts[:'severities'] && !allowable_values.include?(opts[:'severities'])
        fail ArgumentError, "invalid value for \"severities\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/accessibility/overview/progress/issues/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?
      query_params[:'severities'] = opts[:'severities'] if !opts[:'severities'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IHistoryIssuesValuableList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_overview_progress_issues_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_overview_progress_issues_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary for accessibility
    # Retrieves issue overview for accessibility, according to conformance level (a, aa, aaa) and severity. I.e. up to 9 items. Items that don't contain any issues are not returned
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SummaryIssueList]
    def sites_site_id_accessibility_overview_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_overview_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get summary for accessibility
    # Retrieves issue overview for accessibility, according to conformance level (a, aa, aaa) and severity. I.e. up to 9 items. Items that don&#39;t contain any issues are not returned
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SummaryIssueList, Integer, Hash)>] SummaryIssueList data, response status code and response headers
    def sites_site_id_accessibility_overview_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_overview_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_overview_summary_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_summary_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_summary_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_overview_summary_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/overview/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SummaryIssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_overview_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_overview_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get HTML pages from accessibility
    # Retrieves HTML pages from accessibility with the number of A, AA, and AAA issues on the page
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageList]
    def sites_site_id_accessibility_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get HTML pages from accessibility
    # Retrieves HTML pages from accessibility with the number of A, AA, and AAA issues on the page
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageList, Integer, Hash)>] PageList data, response status code and response headers
    def sites_site_id_accessibility_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/accessibility/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overview of issues for page in accessibility
    # Retrieves the number of issues within a conformance level * severity set
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IssueSummaryPageList]
    def sites_site_id_accessibility_pages_page_id_issues_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_pages_page_id_issues_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get overview of issues for page in accessibility
    # Retrieves the number of issues within a conformance level * severity set
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IssueSummaryPageList, Integer, Hash)>] IssueSummaryPageList data, response status code and response headers
    def sites_site_id_accessibility_pages_page_id_issues_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/pages/{page_id}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueSummaryPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_pages_page_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_pages_page_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get HTML pages referencing specific CSS stylesheet
    # Retrieves the HTML pages referencing specific CSS stylesheet. Returns name of HTML page, its url, and usage.
    # @param site_id [Integer] Id for specific site.
    # @param css_id [Integer] Id of the CSS file
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageCssList]
    def sites_site_id_accessibility_validation_css_css_id_pages_using_css_get(site_id, css_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_validation_css_css_id_pages_using_css_get_with_http_info(site_id, css_id, opts)
      data
    end

    # Get HTML pages referencing specific CSS stylesheet
    # Retrieves the HTML pages referencing specific CSS stylesheet. Returns name of HTML page, its url, and usage.
    # @param site_id [Integer] Id for specific site.
    # @param css_id [Integer] Id of the CSS file
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageCssList, Integer, Hash)>] ReferringPageCssList data, response status code and response headers
    def sites_site_id_accessibility_validation_css_css_id_pages_using_css_get_with_http_info(site_id, css_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get"
      end
      # verify the required parameter 'css_id' is set
      if @api_client.config.client_side_validation && css_id.nil?
        fail ArgumentError, "Missing the required parameter 'css_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/validation/css/{css_id}/pages_using_css'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'css_id' + '}', CGI.escape(css_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageCssList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_validation_css_css_id_pages_using_css_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_validation_css_css_id_pages_using_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get W3C CSS error report from accessibility
    # Retrieves CSS error report from accesibility. Contains the number of CSS errors for each CSS stylesheet used on the site
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CssValidationList]
    def sites_site_id_accessibility_validation_css_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_validation_css_get_with_http_info(site_id, opts)
      data
    end

    # Get W3C CSS error report from accessibility
    # Retrieves CSS error report from accesibility. Contains the number of CSS errors for each CSS stylesheet used on the site
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CssValidationList, Integer, Hash)>] CssValidationList data, response status code and response headers
    def sites_site_id_accessibility_validation_css_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_validation_css_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_css_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_css_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_css_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_css_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/validation/css'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CssValidationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_validation_css_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_validation_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get W3C HTML error report from accessibility
    # Retrieves W3C HTML error report from accesibility. Returns name of HTML page, its url, and usage.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [HtmlValidationPageList]
    def sites_site_id_accessibility_validation_html_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_validation_html_get_with_http_info(site_id, opts)
      data
    end

    # Get W3C HTML error report from accessibility
    # Retrieves W3C HTML error report from accesibility. Returns name of HTML page, its url, and usage.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(HtmlValidationPageList, Integer, Hash)>] HtmlValidationPageList data, response status code and response headers
    def sites_site_id_accessibility_validation_html_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_validation_html_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_html_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_html_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_html_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_html_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/accessibility/validation/html'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HtmlValidationPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_validation_html_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_validation_html_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get report on PDF errors from accessibility
    # Retrieves PDF documents from accessibility. Contains the PDF documents referred on the site, whether they're tagged, contains text, and their errors
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [DocumentWithErrorList1]
    def sites_site_id_accessibility_validation_pdf_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_validation_pdf_get_with_http_info(site_id, opts)
      data
    end

    # Get report on PDF errors from accessibility
    # Retrieves PDF documents from accessibility. Contains the PDF documents referred on the site, whether they&#39;re tagged, contains text, and their errors
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(DocumentWithErrorList1, Integer, Hash)>] DocumentWithErrorList1 data, response status code and response headers
    def sites_site_id_accessibility_validation_pdf_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_validation_pdf_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/accessibility/validation/pdf'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentWithErrorList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_validation_pdf_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_validation_pdf_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get errors for specific PDF document
    # List of errors for the PDF document
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DocumentErrorDetailsList]
    def sites_site_id_accessibility_validation_pdf_link_id_issues_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_validation_pdf_link_id_issues_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get errors for specific PDF document
    # List of errors for the PDF document
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DocumentErrorDetailsList, Integer, Hash)>] DocumentErrorDetailsList data, response status code and response headers
    def sites_site_id_accessibility_validation_pdf_link_id_issues_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/validation/pdf/{link_id}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentErrorDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_validation_pdf_link_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_validation_pdf_link_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get HTML pages referring to specific PDF document
    # List of HTML pages on the site that refers to the PDF document
    # @param site_id [Integer] Id for specific site.
    # @param pdf_id [Integer] id of the PDF document
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get(site_id, pdf_id, opts = {})
      data, _status_code, _headers = sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get_with_http_info(site_id, pdf_id, opts)
      data
    end

    # Get HTML pages referring to specific PDF document
    # List of HTML pages on the site that refers to the PDF document
    # @param site_id [Integer] Id for specific site.
    # @param pdf_id [Integer] id of the PDF document
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get_with_http_info(site_id, pdf_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get"
      end
      # verify the required parameter 'pdf_id' is set
      if @api_client.config.client_side_validation && pdf_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_id' when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/accessibility/validation/pdf/{pdf_id}/pages_using_pdf'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'pdf_id' + '}', CGI.escape(pdf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"AccessibilityApi.sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessibilityApi#sites_site_id_accessibility_validation_pdf_pdf_id_pages_using_pdf_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
