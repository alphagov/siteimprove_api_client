=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class QualityAssuranceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get capture tags from inventory
    # All capture tags and the pages on which they have been detected
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [BodyTagNameList]
    def sites_site_id_quality_assurance_inventory_capture_tags_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_capture_tags_get_with_http_info(site_id, opts)
      data
    end

    # Get capture tags from inventory
    # All capture tags and the pages on which they have been detected
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(BodyTagNameList, Integer, Hash)>] BodyTagNameList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_capture_tags_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/capture_tags'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BodyTagNameList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_capture_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get capture tags occurrences from inventory
    # The occurrences of a specific capture tag.
    # @param site_id [Integer] Id for specific site.
    # @param tag_name_id [Integer] Id for specific tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [BodyTagNameContentList]
    def sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get(site_id, tag_name_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get_with_http_info(site_id, tag_name_id, opts)
      data
    end

    # Get capture tags occurrences from inventory
    # The occurrences of a specific capture tag.
    # @param site_id [Integer] Id for specific site.
    # @param tag_name_id [Integer] Id for specific tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(BodyTagNameContentList, Integer, Hash)>] BodyTagNameContentList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get_with_http_info(site_id, tag_name_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get"
      end
      # verify the required parameter 'tag_name_id' is set
      if @api_client.config.client_side_validation && tag_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_name_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/capture_tags/{tag_name_id}/occurrences'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'tag_name_id' + '}', CGI.escape(tag_name_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BodyTagNameContentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_occurrences_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get capture tags occurrences' pages from inventory
    # The pages for a specific capture tag occurence.
    # @param site_id [Integer] Id for specific site.
    # @param tag_name_id [Integer] Id for specific tag.
    # @param tag_value_id [Integer] Id for specific tag value.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get(site_id, tag_name_id, tag_value_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get_with_http_info(site_id, tag_name_id, tag_value_id, opts)
      data
    end

    # Get capture tags occurrences&#39; pages from inventory
    # The pages for a specific capture tag occurence.
    # @param site_id [Integer] Id for specific site.
    # @param tag_name_id [Integer] Id for specific tag.
    # @param tag_value_id [Integer] Id for specific tag value.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get_with_http_info(site_id, tag_name_id, tag_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get"
      end
      # verify the required parameter 'tag_name_id' is set
      if @api_client.config.client_side_validation && tag_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_name_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get"
      end
      # verify the required parameter 'tag_value_id' is set
      if @api_client.config.client_side_validation && tag_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_value_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/capture_tags/{tag_name_id}/values/{tag_value_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'tag_name_id' + '}', CGI.escape(tag_name_id.to_s)).sub('{' + 'tag_value_id' + '}', CGI.escape(tag_value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_capture_tags_tag_name_id_values_tag_value_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with css from css inventory
    # All pages with the detected phone number.
    # @param site_id [Integer] Id for specific site.
    # @param css_id [Integer] Id of the CSS file
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get(site_id, css_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get_with_http_info(site_id, css_id, opts)
      data
    end

    # Get pages with css from css inventory
    # All pages with the detected phone number.
    # @param site_id [Integer] Id for specific site.
    # @param css_id [Integer] Id of the CSS file
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get_with_http_info(site_id, css_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get"
      end
      # verify the required parameter 'css_id' is set
      if @api_client.config.client_side_validation && css_id.nil?
        fail ArgumentError, "Missing the required parameter 'css_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/css/{css_id}/pages_with_css'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'css_id' + '}', CGI.escape(css_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_css_css_id_pages_with_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages without css from css inventory
    # All pages with the detected phone number.
    # @param site_id [Integer] Id for specific site.
    # @param css_id [Integer] Id of the CSS file
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get(site_id, css_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get_with_http_info(site_id, css_id, opts)
      data
    end

    # Get pages without css from css inventory
    # All pages with the detected phone number.
    # @param site_id [Integer] Id for specific site.
    # @param css_id [Integer] Id of the CSS file
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get_with_http_info(site_id, css_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get"
      end
      # verify the required parameter 'css_id' is set
      if @api_client.config.client_side_validation && css_id.nil?
        fail ArgumentError, "Missing the required parameter 'css_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/css/{css_id}/pages_without_css'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'css_id' + '}', CGI.escape(css_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_css_css_id_pages_without_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get css assets from inventory
    # All linked CSS assets and the pages on which they have been detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CssFileList]
    def sites_site_id_quality_assurance_inventory_css_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_css_get_with_http_info(site_id, opts)
      data
    end

    # Get css assets from inventory
    # All linked CSS assets and the pages on which they have been detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CssFileList, Integer, Hash)>] CssFileList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_css_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/css'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CssFileList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_css_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get documents from inventory
    # A full list of all detected documents.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [DocumentList]
    def sites_site_id_quality_assurance_inventory_documents_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_documents_get_with_http_info(site_id, opts)
      data
    end

    # Get documents from inventory
    # A full list of all detected documents.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(DocumentList, Integer, Hash)>] DocumentList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_documents_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_documents_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with email from inventory
    # All pages with the detected phone number.
    # @param site_id [Integer] Id for specific site.
    # @param email_address_id [Integer] Id for specific email address.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get(site_id, email_address_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get_with_http_info(site_id, email_address_id, opts)
      data
    end

    # Get pages with email from inventory
    # All pages with the detected phone number.
    # @param site_id [Integer] Id for specific site.
    # @param email_address_id [Integer] Id for specific email address.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get_with_http_info(site_id, email_address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get"
      end
      # verify the required parameter 'email_address_id' is set
      if @api_client.config.client_side_validation && email_address_id.nil?
        fail ArgumentError, "Missing the required parameter 'email_address_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/email_addresses/{email_address_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'email_address_id' + '}', CGI.escape(email_address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_email_addresses_email_address_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email addresses from inventory
    # All email addresses that have been detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [EmailAddressList1]
    def sites_site_id_quality_assurance_inventory_email_addresses_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_email_addresses_get_with_http_info(site_id, opts)
      data
    end

    # Get email addresses from inventory
    # All email addresses that have been detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(EmailAddressList1, Integer, Hash)>] EmailAddressList1 data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_email_addresses_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/email_addresses'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmailAddressList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_email_addresses_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_email_addresses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get history from inventory
    # Inventory history with the total count after each crawl.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [InventoryHistoryItemList]
    def sites_site_id_quality_assurance_inventory_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_history_get_with_http_info(site_id, opts)
      data
    end

    # Get history from inventory
    # Inventory history with the total count after each crawl.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(InventoryHistoryItemList, Integer, Hash)>] InventoryHistoryItemList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get link texts from inventory
    # Text used in relation to links.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [LinkTextList1]
    def sites_site_id_quality_assurance_inventory_link_texts_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_link_texts_get_with_http_info(site_id, opts)
      data
    end

    # Get link texts from inventory
    # Text used in relation to links.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(LinkTextList1, Integer, Hash)>] LinkTextList1 data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_link_texts_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/link_texts'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkTextList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_link_texts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with link text from inventory
    # All pages with the link text.
    # @param site_id [Integer] Id for specific site.
    # @param text_id [Integer] Id for specific (link) text.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageForLinktextList]
    def sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get(site_id, text_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get_with_http_info(site_id, text_id, opts)
      data
    end

    # Get pages with link text from inventory
    # All pages with the link text.
    # @param site_id [Integer] Id for specific site.
    # @param text_id [Integer] Id for specific (link) text.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageForLinktextList, Integer, Hash)>] ReferringPageForLinktextList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get_with_http_info(site_id, text_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get"
      end
      # verify the required parameter 'text_id' is set
      if @api_client.config.client_side_validation && text_id.nil?
        fail ArgumentError, "Missing the required parameter 'text_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/link_texts/{text_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'text_id' + '}', CGI.escape(text_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageForLinktextList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_link_texts_text_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get links from inventory
    # All links detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [LinkList]
    def sites_site_id_quality_assurance_inventory_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_links_get_with_http_info(site_id, opts)
      data
    end

    # Get links from inventory
    # All links detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(LinkList, Integer, Hash)>] LinkList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get documents with link
    # All documents containing this particular link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DocumentWithLinkList]
    def sites_site_id_quality_assurance_inventory_links_link_id_documents_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_links_link_id_documents_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get documents with link
    # All documents containing this particular link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DocumentWithLinkList, Integer, Hash)>] DocumentWithLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_links_link_id_documents_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/links/{link_id}/documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentWithLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_links_link_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with link
    # All pages with the detected link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_links_link_id_pages_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_links_link_id_pages_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get pages with link
    # All pages with the detected link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_links_link_id_pages_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/links/{link_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_links_link_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_links_link_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get media files from inventory
    # All media files on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MediaList]
    def sites_site_id_quality_assurance_inventory_media_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_media_get_with_http_info(site_id, opts)
      data
    end

    # Get media files from inventory
    # All media files on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MediaList, Integer, Hash)>] MediaList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_media_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_media_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_media_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_media_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_media_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_media_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/media'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MediaList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_media_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_media_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta tags from inventory
    # All meta tags found anywhere on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaTagNameList1]
    def sites_site_id_quality_assurance_inventory_meta_tags_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_meta_tags_get_with_http_info(site_id, opts)
      data
    end

    # Get meta tags from inventory
    # All meta tags found anywhere on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaTagNameList1, Integer, Hash)>] MetaTagNameList1 data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_meta_tags_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/meta_tags'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTagNameList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_meta_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta tag contents
    # All occurrences of the specific meta tag.
    # @param site_id [Integer] Id for specific site.
    # @param meta_name_id [Integer] Id for specific meta name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaTagNameContentList]
    def sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get(site_id, meta_name_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get_with_http_info(site_id, meta_name_id, opts)
      data
    end

    # Get meta tag contents
    # All occurrences of the specific meta tag.
    # @param site_id [Integer] Id for specific site.
    # @param meta_name_id [Integer] Id for specific meta name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaTagNameContentList, Integer, Hash)>] MetaTagNameContentList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get_with_http_info(site_id, meta_name_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get"
      end
      # verify the required parameter 'meta_name_id' is set
      if @api_client.config.client_side_validation && meta_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'meta_name_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/meta_tags/{meta_name_id}/contents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'meta_name_id' + '}', CGI.escape(meta_name_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTagNameContentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta tag pages
    # All pages with the detected phone number
    # @param site_id [Integer] Id for specific site.
    # @param meta_name_id [Integer] Id for specific meta name.
    # @param meta_content_id [Integer] Id for specific meta content.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get(site_id, meta_name_id, meta_content_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get_with_http_info(site_id, meta_name_id, meta_content_id, opts)
      data
    end

    # Get meta tag pages
    # All pages with the detected phone number
    # @param site_id [Integer] Id for specific site.
    # @param meta_name_id [Integer] Id for specific meta name.
    # @param meta_content_id [Integer] Id for specific meta content.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get_with_http_info(site_id, meta_name_id, meta_content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get"
      end
      # verify the required parameter 'meta_name_id' is set
      if @api_client.config.client_side_validation && meta_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'meta_name_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get"
      end
      # verify the required parameter 'meta_content_id' is set
      if @api_client.config.client_side_validation && meta_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'meta_content_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/meta_tags/{meta_name_id}/contents/{meta_content_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'meta_name_id' + '}', CGI.escape(meta_name_id.to_s)).sub('{' + 'meta_content_id' + '}', CGI.escape(meta_content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_meta_tags_meta_name_id_contents_meta_content_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages from inventory
    # HTML pages with referring page information and the date each page was first detected.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @option opts [String] :url Url of the site
    # @return [PageList1]
    def sites_site_id_quality_assurance_inventory_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages from inventory
    # HTML pages with referring page information and the date each page was first detected.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @option opts [String] :url Url of the site
    # @return [Array<(PageList1, Integer, Hash)>] PageList1 data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get referring pages for page in inventory
    # All referring pages to this specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageForPageList]
    def sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get referring pages for page in inventory
    # All referring pages to this specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageForPageList, Integer, Hash)>] ReferringPageForPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/pages/{page_id}/referring_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageForPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_pages_page_id_referring_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get personal id numbers from inventory
    # During the crawl a check is made for identification numbers relating to where the account is located. For example, for US accounts we will look for Social Security numbers. All potential identification numbers that may have been accidentally published on the website are collected.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [PersonalIdNumberList]
    def sites_site_id_quality_assurance_inventory_personal_id_numbers_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_personal_id_numbers_get_with_http_info(site_id, opts)
      data
    end

    # Get personal id numbers from inventory
    # During the crawl a check is made for identification numbers relating to where the account is located. For example, for US accounts we will look for Social Security numbers. All potential identification numbers that may have been accidentally published on the website are collected.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(PersonalIdNumberList, Integer, Hash)>] PersonalIdNumberList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_personal_id_numbers_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/personal_id_numbers'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalIdNumberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_personal_id_numbers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get documents with personal id numbers from inventory
    # All documents containing this specific personal id number.
    # @param site_id [Integer] Id for specific site.
    # @param personal_id_number_id [Integer] Id for specific personal id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PersonalIdNumberDocumentList]
    def sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get(site_id, personal_id_number_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get_with_http_info(site_id, personal_id_number_id, opts)
      data
    end

    # Get documents with personal id numbers from inventory
    # All documents containing this specific personal id number.
    # @param site_id [Integer] Id for specific site.
    # @param personal_id_number_id [Integer] Id for specific personal id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PersonalIdNumberDocumentList, Integer, Hash)>] PersonalIdNumberDocumentList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get_with_http_info(site_id, personal_id_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get"
      end
      # verify the required parameter 'personal_id_number_id' is set
      if @api_client.config.client_side_validation && personal_id_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'personal_id_number_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/personal_id_numbers/{personal_id_number_id}/documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'personal_id_number_id' + '}', CGI.escape(personal_id_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalIdNumberDocumentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with personal id numbers from inventory
    # All pages containing this specific personal id number.
    # @param site_id [Integer] Id for specific site.
    # @param personal_id_number_id [Integer] Id for specific personal id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageForPersonalIdNumberList]
    def sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get(site_id, personal_id_number_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get_with_http_info(site_id, personal_id_number_id, opts)
      data
    end

    # Get pages with personal id numbers from inventory
    # All pages containing this specific personal id number.
    # @param site_id [Integer] Id for specific site.
    # @param personal_id_number_id [Integer] Id for specific personal id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageForPersonalIdNumberList, Integer, Hash)>] ReferringPageForPersonalIdNumberList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get_with_http_info(site_id, personal_id_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get"
      end
      # verify the required parameter 'personal_id_number_id' is set
      if @api_client.config.client_side_validation && personal_id_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'personal_id_number_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/personal_id_numbers/{personal_id_number_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'personal_id_number_id' + '}', CGI.escape(personal_id_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageForPersonalIdNumberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_personal_id_numbers_personal_id_number_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get phone numbers from inventory
    # Phone numbers and the pages on which they have been detected - useful when numbers need to be updated or removed from the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [PhoneNumberList1]
    def sites_site_id_quality_assurance_inventory_phone_numbers_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_phone_numbers_get_with_http_info(site_id, opts)
      data
    end

    # Get phone numbers from inventory
    # Phone numbers and the pages on which they have been detected - useful when numbers need to be updated or removed from the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(PhoneNumberList1, Integer, Hash)>] PhoneNumberList1 data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_phone_numbers_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/phone_numbers'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PhoneNumberList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_phone_numbers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with phone number from inventory
    # All pages with the detected phone number
    # @param site_id [Integer] Id for specific site.
    # @param phone_number_id [Integer] Id for specific phone number.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get(site_id, phone_number_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get_with_http_info(site_id, phone_number_id, opts)
      data
    end

    # Get pages with phone number from inventory
    # All pages with the detected phone number
    # @param site_id [Integer] Id for specific site.
    # @param phone_number_id [Integer] Id for specific phone number.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get_with_http_info(site_id, phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get"
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/phone_numbers/{phone_number_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'phone_number_id' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_phone_numbers_phone_number_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get java scripts from inventory
    # JavaScript files and the pages on which they have been detected – especially useful if specific scripts should be present on all pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [JavaScriptList]
    def sites_site_id_quality_assurance_inventory_scripts_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_scripts_get_with_http_info(site_id, opts)
      data
    end

    # Get java scripts from inventory
    # JavaScript files and the pages on which they have been detected – especially useful if specific scripts should be present on all pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(JavaScriptList, Integer, Hash)>] JavaScriptList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_scripts_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/scripts'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JavaScriptList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_scripts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with java script from inventory
    # All pages with the specific JavaScript file.
    # @param site_id [Integer] Id for specific site.
    # @param script_id [Integer] Id for specific script.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get(site_id, script_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get_with_http_info(site_id, script_id, opts)
      data
    end

    # Get pages with java script from inventory
    # All pages with the specific JavaScript file.
    # @param site_id [Integer] Id for specific site.
    # @param script_id [Integer] Id for specific script.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get_with_http_info(site_id, script_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get"
      end
      # verify the required parameter 'script_id' is set
      if @api_client.config.client_side_validation && script_id.nil?
        fail ArgumentError, "Missing the required parameter 'script_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/scripts/{script_id}/pages_with_script'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'script_id' + '}', CGI.escape(script_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_scripts_script_id_pages_with_script_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages without java script from inventory
    # All pages without this specific JavaScript file.
    # @param site_id [Integer] Id for specific site.
    # @param script_id [Integer] Id for specific script.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get(site_id, script_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get_with_http_info(site_id, script_id, opts)
      data
    end

    # Get pages without java script from inventory
    # All pages without this specific JavaScript file.
    # @param site_id [Integer] Id for specific site.
    # @param script_id [Integer] Id for specific script.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get_with_http_info(site_id, script_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get"
      end
      # verify the required parameter 'script_id' is set
      if @api_client.config.client_side_validation && script_id.nil?
        fail ArgumentError, "Missing the required parameter 'script_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/scripts/{script_id}/pages_without_script'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'script_id' + '}', CGI.escape(script_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_scripts_script_id_pages_without_script_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with trademark from inventory
    # All pages containing this specific trademark.
    # @param site_id [Integer] Id for specific site.
    # @param trademark_id [Integer] Id for specific trademark.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [WithContentPageList]
    def sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get(site_id, trademark_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get_with_http_info(site_id, trademark_id, opts)
      data
    end

    # Get pages with trademark from inventory
    # All pages containing this specific trademark.
    # @param site_id [Integer] Id for specific site.
    # @param trademark_id [Integer] Id for specific trademark.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(WithContentPageList, Integer, Hash)>] WithContentPageList data, response status code and response headers
    def sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get_with_http_info(site_id, trademark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get"
      end
      # verify the required parameter 'trademark_id' is set
      if @api_client.config.client_side_validation && trademark_id.nil?
        fail ArgumentError, "Missing the required parameter 'trademark_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/inventory/trademarks/{trademark_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'trademark_id' + '}', CGI.escape(trademark_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WithContentPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_inventory_trademarks_trademark_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links
    # All unique links that are broken, and the pages where they are located - Broken links can detrimentally affect the user experience of your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [BrokenPageLinkList1]
    def sites_site_id_quality_assurance_links_broken_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_broken_links_get_with_http_info(site_id, opts)
      data
    end

    # Get broken links
    # All unique links that are broken, and the pages where they are located - Broken links can detrimentally affect the user experience of your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(BrokenPageLinkList1, Integer, Hash)>] BrokenPageLinkList1 data, response status code and response headers
    def sites_site_id_quality_assurance_links_broken_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrokenPageLinkList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links in documents
    # All unique links that are broken, and the pages where they are located - Broken links can detrimentally affect the user experience of your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [BrokenDocumentLinkList]
    def sites_site_id_quality_assurance_links_broken_links_in_documents_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_broken_links_in_documents_get_with_http_info(site_id, opts)
      data
    end

    # Get broken links in documents
    # All unique links that are broken, and the pages where they are located - Broken links can detrimentally affect the user experience of your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(BrokenDocumentLinkList, Integer, Hash)>] BrokenDocumentLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_broken_links_in_documents_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/broken_links_in_documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrokenDocumentLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_broken_links_in_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get documents with broken link
    # Get all the documents that contains this specific broken link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DocumentWithSpecificBrokenLinkList]
    def sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get documents with broken link
    # Get all the documents that contains this specific broken link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DocumentWithSpecificBrokenLinkList, Integer, Hash)>] DocumentWithSpecificBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/broken_links_in_documents/{link_id}/documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentWithSpecificBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_broken_links_in_documents_link_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with broken link
    # All pages containing this specific broken link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageForBrokenLinkList]
    def sites_site_id_quality_assurance_links_broken_links_link_id_pages_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_broken_links_link_id_pages_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get pages with broken link
    # All pages containing this specific broken link.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageForBrokenLinkList, Integer, Hash)>] PageForBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_broken_links_link_id_pages_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/broken_links/{link_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageForBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_broken_links_link_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_broken_links_link_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get dismissed links
    # Dismissed links will not be taken in consideration as broken link and no longer affect your DCI score.  Include also links that have been ignored – errors with these links will no longer be highlighted within QA. 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [DismissedPageLinkList]
    def sites_site_id_quality_assurance_links_dismissed_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_dismissed_links_get_with_http_info(site_id, opts)
      data
    end

    # Get dismissed links
    # Dismissed links will not be taken in consideration as broken link and no longer affect your DCI score.  Include also links that have been ignored – errors with these links will no longer be highlighted within QA. 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(DismissedPageLinkList, Integer, Hash)>] DismissedPageLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_dismissed_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_dismissed_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_dismissed_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_dismissed_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_dismissed_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_dismissed_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/dismissed_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DismissedPageLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_dismissed_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_dismissed_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all broken links in document
    # Get all broken links in the specific document.
    # @param site_id [Integer] Id for specific site.
    # @param document_id [Integer] Id for specific document.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DocumentBrokenLinkList]
    def sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get(site_id, document_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get_with_http_info(site_id, document_id, opts)
      data
    end

    # Get all broken links in document
    # Get all broken links in the specific document.
    # @param site_id [Integer] Id for specific site.
    # @param document_id [Integer] Id for specific document.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DocumentBrokenLinkList, Integer, Hash)>] DocumentBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get_with_http_info(site_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/documents_with_broken_links/{document_id}/broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with broken links
    # All pages where broken links have been found - Broken links detrimentally affect the user experience for your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param document_id [Integer] Id for specific document.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get(site_id, document_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get_with_http_info(site_id, document_id, opts)
      data
    end

    # Get pages with broken links
    # All pages where broken links have been found - Broken links detrimentally affect the user experience for your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param document_id [Integer] Id for specific document.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get_with_http_info(site_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/documents_with_broken_links/{document_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_documents_with_broken_links_document_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get documents with broken links
    # All PDFs where broken links have been found - Broken links detrimentally affect the user experience for your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [DocumentWithBrokenLinkList]
    def sites_site_id_quality_assurance_links_documents_with_broken_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_documents_with_broken_links_get_with_http_info(site_id, opts)
      data
    end

    # Get documents with broken links
    # All PDFs where broken links have been found - Broken links detrimentally affect the user experience for your visitors.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(DocumentWithBrokenLinkList, Integer, Hash)>] DocumentWithBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_documents_with_broken_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/documents_with_broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentWithBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_documents_with_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_documents_with_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for links
    # A series of historical data points showing the link status (pages with broken links, etc) over the selected period.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [LinkHistoryItemList]
    def sites_site_id_quality_assurance_links_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for links
    # A series of historical data points showing the link status (pages with broken links, etc) over the selected period.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(LinkHistoryItemList, Integer, Hash)>] LinkHistoryItemList data, response status code and response headers
    def sites_site_id_quality_assurance_links_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ignored links
    # Links that have been ignored – errors with these links will no longer be highlighted within QA.  Noe
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [LinkDecisionList]
    def sites_site_id_quality_assurance_links_ignored_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_ignored_links_get_with_http_info(site_id, opts)
      data
    end

    # Get ignored links
    # Links that have been ignored – errors with these links will no longer be highlighted within QA.  Noe
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(LinkDecisionList, Integer, Hash)>] LinkDecisionList data, response status code and response headers
    def sites_site_id_quality_assurance_links_ignored_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_ignored_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_ignored_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_ignored_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_ignored_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_ignored_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/ignored_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkDecisionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_ignored_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_ignored_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with broken links
    # All pages containing this specific broken link.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithBrokenLinkList]
    def sites_site_id_quality_assurance_links_pages_with_broken_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_pages_with_broken_links_get_with_http_info(site_id, opts)
      data
    end

    # Get pages with broken links
    # All pages containing this specific broken link.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithBrokenLinkList, Integer, Hash)>] PageWithBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_pages_with_broken_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/pages_with_broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_pages_with_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links from page with broken links
    # All broken links from this specific page containing broken links.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageBrokenLinkList]
    def sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get broken links from page with broken links
    # All broken links from this specific page containing broken links.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageBrokenLinkList, Integer, Hash)>] PageBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/pages_with_broken_links/{page_id}/broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_pages_with_broken_links_page_id_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get documents with unsafe domain from links
    # All documents containing with links to this unsafe domain.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [UnsafeLinkPdfList]
    def sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get(site_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get_with_http_info(site_id, domain_id, opts)
      data
    end

    # Get documents with unsafe domain from links
    # All documents containing with links to this unsafe domain.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(UnsafeLinkPdfList, Integer, Hash)>] UnsafeLinkPdfList data, response status code and response headers
    def sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get_with_http_info(site_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/unsafe_domains/{domain_id}/documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeLinkPdfList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_unsafe_domains_domain_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with links to unsafe domain
    # All pages containing with links to this unsafe domain.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [UnsafeLinkPageList]
    def sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get(site_id, domain_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get_with_http_info(site_id, domain_id, opts)
      data
    end

    # Get pages with links to unsafe domain
    # All pages containing with links to this unsafe domain.
    # @param site_id [Integer] Id for specific site.
    # @param domain_id [Integer] Id for specific domain.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(UnsafeLinkPageList, Integer, Hash)>] UnsafeLinkPageList data, response status code and response headers
    def sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get_with_http_info(site_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/unsafe_domains/{domain_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeLinkPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_unsafe_domains_domain_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get links to unsafe domains
    # Links to unsafe domains.  Domains that have been identified as potentially risky by Google's Safe Browsing API. An advisory is provided by Google in regards to Safe Browsing.  If users go to potentially risky domains through links on your site, this can reflect negatively on your site's trustworthiness.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [UnsafeDomainList1]
    def sites_site_id_quality_assurance_links_unsafe_domains_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_links_unsafe_domains_get_with_http_info(site_id, opts)
      data
    end

    # Get links to unsafe domains
    # Links to unsafe domains.  Domains that have been identified as potentially risky by Google&#39;s Safe Browsing API. An advisory is provided by Google in regards to Safe Browsing.  If users go to potentially risky domains through links on your site, this can reflect negatively on your site&#39;s trustworthiness.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(UnsafeDomainList1, Integer, Hash)>] UnsafeDomainList1 data, response status code and response headers
    def sites_site_id_quality_assurance_links_unsafe_domains_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/links/unsafe_domains'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeDomainList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_links_unsafe_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_links_unsafe_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get check history from crawls
    # Full history of all checks that have been run for the selected site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryItemList]
    def sites_site_id_quality_assurance_overview_check_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_get_with_http_info(site_id, opts)
      data
    end

    # Get check history from crawls
    # Full history of all checks that have been run for the selected site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryItemList, Integer, Hash)>] CheckHistoryItemList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links from check in check history 
    # Get all broken links on pages detected at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryBrokenLinkList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get broken links from check in check history 
    # Get all broken links on pages detected at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryBrokenLinkList, Integer, Hash)>] CheckHistoryBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links in documents from check history
    # Get all broken links in documents detected at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryBrokenLinkList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get broken links in documents from check history
    # Get all broken links in documents detected at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryBrokenLinkList, Integer, Hash)>] CheckHistoryBrokenLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/broken_links_in_documents'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryBrokenLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_broken_links_in_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get known links from check in check history
    # Get all known links on pages detected at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryLinkList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get known links from check in check history
    # Get all known links on pages detected at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryLinkList, Integer, Hash)>] CheckHistoryLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/known_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_known_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get known pages from check in check history
    # Get all known pages visited at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryPageList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get known pages from check in check history
    # Get all known pages visited at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryPageList, Integer, Hash)>] CheckHistoryPageList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/known_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_known_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get new links from check in check history
    # Get all new links visited at this specific check
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryLinkList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get new links from check in check history
    # Get all new links visited at this specific check
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryLinkList, Integer, Hash)>] CheckHistoryLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/new_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_new_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get new pages from check in check history
    # Get all new pages visited at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryPageList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get new pages from check in check history
    # Get all new pages visited at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryPageList, Integer, Hash)>] CheckHistoryPageList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/new_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_new_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get removed links from check in check history
    # Get all former known links that were no longer present at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryLinkList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get removed links from check in check history
    # Get all former known links that were no longer present at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryLinkList, Integer, Hash)>] CheckHistoryLinkList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/removed_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_removed_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get removed pages from check in check history
    # Get all former known pages that were no longer present at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CheckHistoryPageList]
    def sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get(site_id, history_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get_with_http_info(site_id, history_id, opts)
      data
    end

    # Get removed pages from check in check history
    # Get all former known pages that were no longer present at this specific check.
    # @param site_id [Integer] Id for specific site.
    # @param history_id [Integer] Id for specific history point - Ie. a specific point in time where checks where run for the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CheckHistoryPageList, Integer, Hash)>] CheckHistoryPageList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get_with_http_info(site_id, history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get"
      end
      # verify the required parameter 'history_id' is set
      if @api_client.config.client_side_validation && history_id.nil?
        fail ArgumentError, "Missing the required parameter 'history_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/removed_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'history_id' + '}', CGI.escape(history_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHistoryPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_check_history_history_id_removed_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get quality assurance groups
    # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are displayed.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [GroupDetailsList1]
    def sites_site_id_quality_assurance_overview_groups_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_groups_get_with_http_info(site_id, opts)
      data
    end

    # Get quality assurance groups
    # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are displayed.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(GroupDetailsList1, Integer, Hash)>] GroupDetailsList1 data, response status code and response headers
    def sites_site_id_quality_assurance_overview_groups_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/groups'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupDetailsList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users from group
    # Get users belonging to this specific group.
    # @param site_id [Integer] Id for specific site.
    # @param group_id [Integer] Id for specific group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [QualityAssuranceGroupPersonList]
    def sites_site_id_quality_assurance_overview_groups_group_id_users_get(site_id, group_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_groups_group_id_users_get_with_http_info(site_id, group_id, opts)
      data
    end

    # Get users from group
    # Get users belonging to this specific group.
    # @param site_id [Integer] Id for specific site.
    # @param group_id [Integer] Id for specific group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(QualityAssuranceGroupPersonList, Integer, Hash)>] QualityAssuranceGroupPersonList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_groups_group_id_users_get_with_http_info(site_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/groups/{group_id}/users'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QualityAssuranceGroupPersonList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_groups_group_id_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_groups_group_id_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get priority pages
    # Pages with errors have a page score to enable you to target those pages where corrections will have the most positive effect for your users.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PriorityPageList]
    def sites_site_id_quality_assurance_overview_priority_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_priority_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get priority pages
    # Pages with errors have a page score to enable you to target those pages where corrections will have the most positive effect for your users.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PriorityPageList, Integer, Hash)>] PriorityPageList data, response status code and response headers
    def sites_site_id_quality_assurance_overview_priority_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_priority_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_priority_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_priority_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_priority_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_priority_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/priority_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PriorityPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_priority_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_priority_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary for quality assurance
    # Get summary of QA issues detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [OverviewSummary]
    def sites_site_id_quality_assurance_overview_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_overview_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get summary for quality assurance
    # Get summary of QA issues detected on the site.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(OverviewSummary, Integer, Hash)>] OverviewSummary data, response status code and response headers
    def sites_site_id_quality_assurance_overview_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_overview_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_overview_summary_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/overview/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OverviewSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_overview_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_overview_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get accepted readability words
    # Accepted words are words that can't be changed or words that should not be altered irrespective of length or number of syllables.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [AcceptedReadabilityWordList]
    def sites_site_id_quality_assurance_readability_accepted_words_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_accepted_words_get_with_http_info(site_id, opts)
      data
    end

    # Get accepted readability words
    # Accepted words are words that can&#39;t be changed or words that should not be altered irrespective of length or number of syllables.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(AcceptedReadabilityWordList, Integer, Hash)>] AcceptedReadabilityWordList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_accepted_words_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_accepted_words_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_accepted_words_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_accepted_words_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_accepted_words_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_accepted_words_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/accepted_words'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AcceptedReadabilityWordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_accepted_words_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_accepted_words_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for automated readability
    # All pages that have been excluded from the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageAutomatedReadabilityList]
    def sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for automated readability
    # All pages that have been excluded from the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageAutomatedReadabilityList, Integer, Hash)>] ApiIgnoredReadabilityPageAutomatedReadabilityList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/automated_readability/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageAutomatedReadabilityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_automated_readability_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for automated readability
    # All pages where a readability score has been calculated for the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageAutomatedReadabilityList]
    def sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for automated readability
    # All pages where a readability score has been calculated for the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageAutomatedReadabilityList, Integer, Hash)>] ApiReadabilityPageAutomatedReadabilityList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/automated_readability/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageAutomatedReadabilityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_automated_readability_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for automated readability
    # Pages that relates to the reading ability bucket for the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageAutomatedReadabilityList1]
    def sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for automated readability
    # Pages that relates to the reading ability bucket for the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageAutomatedReadabilityList1, Integer, Hash)>] ApiReadabilityPageAutomatedReadabilityList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/automated_readability/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageAutomatedReadabilityList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_automated_readability_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for automated readability
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketAutomatedReadabilityList]
    def sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for automated readability
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the automated readability test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketAutomatedReadabilityList, Integer, Hash)>] ApiReadabilityBucketAutomatedReadabilityList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/automated_readability/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketAutomatedReadabilityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_automated_readability_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for coleman liau
    # All pages that have been excluded from the coleman liau test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageColemanLiauList]
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for coleman liau
    # All pages that have been excluded from the coleman liau test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageColemanLiauList, Integer, Hash)>] ApiIgnoredReadabilityPageColemanLiauList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageColemanLiauList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_coleman_liau_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for coleman liau
    # All pages where a readability score has been calculated for the coleman liau test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageColemanLiauList]
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for coleman liau
    # All pages where a readability score has been calculated for the coleman liau test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageColemanLiauList, Integer, Hash)>] ApiReadabilityPageColemanLiauList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageColemanLiauList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_coleman_liau_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for coleman liau
    # Pages that relates to the reading ability bucket for coleman liau.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageColemanLiauList1]
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for coleman liau
    # Pages that relates to the reading ability bucket for coleman liau.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageColemanLiauList1, Integer, Hash)>] ApiReadabilityPageColemanLiauList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageColemanLiauList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for coleman liau
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the coleman liau test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketColemanLiauList]
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for coleman liau
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the coleman liau test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketColemanLiauList, Integer, Hash)>] ApiReadabilityBucketColemanLiauList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketColemanLiauList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_coleman_liau_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for flesch kincaid grade level
    # All pages that have been excluded from the flesch kincaid grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageFleschKincaidGradeLevelList]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for flesch kincaid grade level
    # All pages that have been excluded from the flesch kincaid grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageFleschKincaidGradeLevelList, Integer, Hash)>] ApiIgnoredReadabilityPageFleschKincaidGradeLevelList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageFleschKincaidGradeLevelList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for flesch kincaid grade level
    # All pages where a readability score has been calculated for the flesch kincade grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageFleschKincaidGradeLevelList]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for flesch kincaid grade level
    # All pages where a readability score has been calculated for the flesch kincade grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageFleschKincaidGradeLevelList, Integer, Hash)>] ApiReadabilityPageFleschKincaidGradeLevelList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageFleschKincaidGradeLevelList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for flesch kincaid grade level
    # Pages that relates to the reading ability bucket for the flesch kincaid grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageFleschKincaidGradeLevelList1]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for flesch kincaid grade level
    # Pages that relates to the reading ability bucket for the flesch kincaid grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageFleschKincaidGradeLevelList1, Integer, Hash)>] ApiReadabilityPageFleschKincaidGradeLevelList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageFleschKincaidGradeLevelList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for flesch kincaid grade level
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the flesch kincade grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketFleschKincaidGradeLevelList]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for flesch kincaid grade level
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the flesch kincade grade level test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketFleschKincaidGradeLevelList, Integer, Hash)>] ApiReadabilityBucketFleschKincaidGradeLevelList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketFleschKincaidGradeLevelList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_grade_level_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for flesch kincaid reading ease
    # All pages that have been excluded from the flesch kincaid reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageFleschKincaidReadingEaseList]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for flesch kincaid reading ease
    # All pages that have been excluded from the flesch kincaid reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageFleschKincaidReadingEaseList, Integer, Hash)>] ApiIgnoredReadabilityPageFleschKincaidReadingEaseList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageFleschKincaidReadingEaseList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for flesch kincaid reading ease
    # All pages where a readability score has been calculated for the flesch kincade reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageFleschKincaidReadingEaseList]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for flesch kincaid reading ease
    # All pages where a readability score has been calculated for the flesch kincade reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageFleschKincaidReadingEaseList, Integer, Hash)>] ApiReadabilityPageFleschKincaidReadingEaseList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageFleschKincaidReadingEaseList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for flesch kincaid reading ease
    # Pages that relates to the reading ability bucket for the flesch kincaid reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageFleschKincaidReadingEaseList1]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for flesch kincaid reading ease
    # Pages that relates to the reading ability bucket for the flesch kincaid reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageFleschKincaidReadingEaseList1, Integer, Hash)>] ApiReadabilityPageFleschKincaidReadingEaseList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageFleschKincaidReadingEaseList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for flesch kincaid reading ease
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the flesch kincade reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketFleschKincaidReadingEaseList]
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for flesch kincaid reading ease
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the flesch kincade reading ease test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketFleschKincaidReadingEaseList, Integer, Hash)>] ApiReadabilityBucketFleschKincaidReadingEaseList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketFleschKincaidReadingEaseList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_flesch_kincaid_reading_ease_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for gunning fog
    # All pages that have been excluded from the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageGunningFogList]
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for gunning fog
    # All pages that have been excluded from the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageGunningFogList, Integer, Hash)>] ApiIgnoredReadabilityPageGunningFogList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageGunningFogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_gunning_fog_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for gunning fog
    # All pages where a readability score has been calculated for the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageGunningFogList]
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for gunning fog
    # All pages where a readability score has been calculated for the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageGunningFogList, Integer, Hash)>] ApiReadabilityPageGunningFogList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageGunningFogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_gunning_fog_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for gunning fog
    # Pages that relates to the reading ability bucket for the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageGunningFogList1]
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for gunning fog
    # Pages that relates to the reading ability bucket for the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageGunningFogList1, Integer, Hash)>] ApiReadabilityPageGunningFogList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageGunningFogList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for gunning fog
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketGunningFogList]
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for gunning fog
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the gunning fog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketGunningFogList, Integer, Hash)>] ApiReadabilityBucketGunningFogList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketGunningFogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_gunning_fog_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for lix
    # All pages that have been excluded from the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageLixList]
    def sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for lix
    # All pages that have been excluded from the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageLixList, Integer, Hash)>] ApiIgnoredReadabilityPageLixList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/lix/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageLixList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_lix_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for lix
    # All pages where a readability score has been calculated for the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageLixList]
    def sites_site_id_quality_assurance_readability_tests_lix_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_lix_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for lix
    # All pages where a readability score has been calculated for the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageLixList, Integer, Hash)>] ApiReadabilityPageLixList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_lix_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/lix/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageLixList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_lix_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for lix
    # Pages that relates to the reading ability bucket for the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageLixList1]
    def sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for lix
    # Pages that relates to the reading ability bucket for the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageLixList1, Integer, Hash)>] ApiReadabilityPageLixList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/lix/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageLixList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_lix_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for lix
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketLixList]
    def sites_site_id_quality_assurance_readability_tests_lix_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_lix_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for lix
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the lix test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketLixList, Integer, Hash)>] ApiReadabilityBucketLixList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_lix_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/lix/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketLixList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_lix_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_lix_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get excluded pages for smog
    # All pages that have been excluded from the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiIgnoredReadabilityPageSmogList]
    def sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get excluded pages for smog
    # All pages that have been excluded from the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiIgnoredReadabilityPageSmogList, Integer, Hash)>] ApiIgnoredReadabilityPageSmogList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/smog/excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIgnoredReadabilityPageSmogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_smog_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages for smog
    # All pages where a readability score has been calculated for the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ApiReadabilityPageSmogList]
    def sites_site_id_quality_assurance_readability_tests_smog_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_smog_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages for smog
    # All pages where a readability score has been calculated for the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ApiReadabilityPageSmogList, Integer, Hash)>] ApiReadabilityPageSmogList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_smog_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/smog/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageSmogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_smog_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with readability score for smog
    # Pages that relates to the reading ability bucket for the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityPageSmogList1]
    def sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get(site_id, bucket_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts)
      data
    end

    # Get pages with readability score for smog
    # Pages that relates to the reading ability bucket for the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param bucket_id [Integer] Id of the readability bucket.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityPageSmogList1, Integer, Hash)>] ApiReadabilityPageSmogList1 data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get_with_http_info(site_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/smog/scores/{bucket_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'bucket_id' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityPageSmogList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_smog_scores_bucket_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability scores for smog
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ApiReadabilityBucketSmogList]
    def sites_site_id_quality_assurance_readability_tests_smog_scores_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_readability_tests_smog_scores_get_with_http_info(site_id, opts)
      data
    end

    # Get readability scores for smog
    # Pages are placed into levels depending on the difficulty level of the content that relates to the reading ability of a person in full time education based on the smog test.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ApiReadabilityBucketSmogList, Integer, Hash)>] ApiReadabilityBucketSmogList data, response status code and response headers
    def sites_site_id_quality_assurance_readability_tests_smog_scores_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/readability/tests/smog/scores'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReadabilityBucketSmogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_readability_tests_smog_scores_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_readability_tests_smog_scores_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get approved words from spelling
    # Words that we have found and that has been accepted by users.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [AcceptedWordList]
    def sites_site_id_quality_assurance_spelling_approved_words_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_approved_words_get_with_http_info(site_id, opts)
      data
    end

    # Get approved words from spelling
    # Words that we have found and that has been accepted by users.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(AcceptedWordList, Integer, Hash)>] AcceptedWordList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_approved_words_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/approved_words'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AcceptedWordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_approved_words_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with approved words from spelling
    # Get pages containing this specific word that has been approved by a user.
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageForWordList]
    def sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get(site_id, word_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get_with_http_info(site_id, word_id, opts)
      data
    end

    # Get pages with approved words from spelling
    # Get pages containing this specific word that has been approved by a user.
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageForWordList, Integer, Hash)>] PageForWordList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get_with_http_info(site_id, word_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get"
      end
      # verify the required parameter 'word_id' is set
      if @api_client.config.client_side_validation && word_id.nil?
        fail ArgumentError, "Missing the required parameter 'word_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/approved_words/{word_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'word_id' + '}', CGI.escape(word_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageForWordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_approved_words_word_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical data for spelling
    # A series of historical data points showing the status of misspellings and potential misspellings over the selected period.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SpellingHistoryItemList]
    def sites_site_id_quality_assurance_spelling_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical data for spelling
    # A series of historical data points showing the status of misspellings and potential misspellings over the selected period.  When viewing historical data the resolution of the data points will be dependent on the period specified. For single-day periods the resolution will be hours. For periods less than 62 days (approximately two months) the resolution will be days. For longer periods the resolution will be months.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SpellingHistoryItemList, Integer, Hash)>] SpellingHistoryItemList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpellingHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get languages from spelling
    # All languages detected on the site and the percentage of content written in each language, both at site and page level.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [LanguageList1]
    def sites_site_id_quality_assurance_spelling_languages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_languages_get_with_http_info(site_id, opts)
      data
    end

    # Get languages from spelling
    # All languages detected on the site and the percentage of content written in each language, both at site and page level.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(LanguageList1, Integer, Hash)>] LanguageList1 data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_languages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/languages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LanguageList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_languages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with language from spelling
    # Get pages written in this specific language.
    # @param site_id [Integer] Id for specific site.
    # @param language_code [String] Language code for specific country (ie. \&quot;en\&quot;, \&quot;de\&quot; etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [LanguagePageList]
    def sites_site_id_quality_assurance_spelling_languages_language_code_pages_get(site_id, language_code, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_languages_language_code_pages_get_with_http_info(site_id, language_code, opts)
      data
    end

    # Get pages with language from spelling
    # Get pages written in this specific language.
    # @param site_id [Integer] Id for specific site.
    # @param language_code [String] Language code for specific country (ie. \&quot;en\&quot;, \&quot;de\&quot; etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(LanguagePageList, Integer, Hash)>] LanguagePageList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_languages_language_code_pages_get_with_http_info(site_id, language_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get"
      end
      # verify the required parameter 'language_code' is set
      if @api_client.config.client_side_validation && language_code.nil?
        fail ArgumentError, "Missing the required parameter 'language_code' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/languages/{language_code}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'language_code' + '}', CGI.escape(language_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LanguagePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_languages_language_code_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_languages_language_code_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get misspellings from spelling
    # Words that could not be found in the system's dictionary or words that have been confirmed as misspellings by an administrator.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ConfirmedMisspellingV2List]
    def sites_site_id_quality_assurance_spelling_misspellings_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_misspellings_get_with_http_info(site_id, opts)
      data
    end

    # Get misspellings from spelling
    # Words that could not be found in the system&#39;s dictionary or words that have been confirmed as misspellings by an administrator.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ConfirmedMisspellingV2List, Integer, Hash)>] ConfirmedMisspellingV2List data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_misspellings_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/misspellings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConfirmedMisspellingV2List'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with misspelling from spelling
    # Get pages containing this specific misspelling.
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageForWordList]
    def sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get(site_id, word_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get_with_http_info(site_id, word_id, opts)
      data
    end

    # Get pages with misspelling from spelling
    # Get pages containing this specific misspelling.
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageForWordList, Integer, Hash)>] PageForWordList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get_with_http_info(site_id, word_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get"
      end
      # verify the required parameter 'word_id' is set
      if @api_client.config.client_side_validation && word_id.nil?
        fail ArgumentError, "Missing the required parameter 'word_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/misspellings/{word_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'word_id' + '}', CGI.escape(word_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageForWordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_misspellings_word_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages from spelling
    # All pages where either misspellings or potential misspellings have been detected. Misspellings are confirmed as errors where potential misspellings need to be reviewed.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithMisspellingsList]
    def sites_site_id_quality_assurance_spelling_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages from spelling
    # All pages where either misspellings or potential misspellings have been detected. Misspellings are confirmed as errors where potential misspellings need to be reviewed.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithMisspellingsList, Integer, Hash)>] PageWithMisspellingsList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithMisspellingsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get misspellings for a page from spelling
    # Get misspellings for this specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [MisspellingOnPageList]
    def sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get misspellings for a page from spelling
    # Get misspellings for this specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(MisspellingOnPageList, Integer, Hash)>] MisspellingOnPageList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/pages/{page_id}/misspellings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MisspellingOnPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_pages_page_id_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get potential misspelling for a page from spelling
    # This endpoint is deprecated. Get potential misspellings for this specific page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PagePotentialMisspellingList]
    def sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get potential misspelling for a page from spelling
    # This endpoint is deprecated. Get potential misspellings for this specific page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PagePotentialMisspellingList, Integer, Hash)>] PagePotentialMisspellingList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/pages/{page_id}/potential_misspellings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagePotentialMisspellingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_pages_page_id_potential_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get words to review for a page from spelling
    # Get words to review for this specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SpellingReviewOnPageList]
    def sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get words to review for a page from spelling
    # Get words to review for this specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SpellingReviewOnPageList, Integer, Hash)>] SpellingReviewOnPageList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/pages/{page_id}/words_to_review'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpellingReviewOnPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_pages_page_id_words_to_review_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get potential misspellings from spelling
    # This endpoint is deprecated. Potential misspellings are words on the site, which are not found in the dictionary, and have not been automatically confirmed as misspellings by the Quality Assurance service.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [PotentialMisspellingList]
    def sites_site_id_quality_assurance_spelling_potential_misspellings_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_potential_misspellings_get_with_http_info(site_id, opts)
      data
    end

    # Get potential misspellings from spelling
    # This endpoint is deprecated. Potential misspellings are words on the site, which are not found in the dictionary, and have not been automatically confirmed as misspellings by the Quality Assurance service.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(PotentialMisspellingList, Integer, Hash)>] PotentialMisspellingList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_potential_misspellings_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/potential_misspellings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PotentialMisspellingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_potential_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with potential misspelling from spelling
    # This endpoint is deprecated. Get pages containing this specific potential misspelling.
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageForWordList]
    def sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get(site_id, word_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get_with_http_info(site_id, word_id, opts)
      data
    end

    # Get pages with potential misspelling from spelling
    # This endpoint is deprecated. Get pages containing this specific potential misspelling.
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageForWordList, Integer, Hash)>] PageForWordList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get_with_http_info(site_id, word_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get"
      end
      # verify the required parameter 'word_id' is set
      if @api_client.config.client_side_validation && word_id.nil?
        fail ArgumentError, "Missing the required parameter 'word_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/potential_misspellings/{word_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'word_id' + '}', CGI.escape(word_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageForWordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_potential_misspellings_word_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get words to review from spelling
    # Words to review are words on the site, which are not found in the dictionary, and have not been automatically confirmed as misspellings by the Quality Assurance service.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SpellingReviewList]
    def sites_site_id_quality_assurance_spelling_words_to_review_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_words_to_review_get_with_http_info(site_id, opts)
      data
    end

    # Get words to review from spelling
    # Words to review are words on the site, which are not found in the dictionary, and have not been automatically confirmed as misspellings by the Quality Assurance service.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SpellingReviewList, Integer, Hash)>] SpellingReviewList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_words_to_review_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/words_to_review'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpellingReviewList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_words_to_review_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with words to review from spelling
    # Get pages containing this specific word to review.  
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PageForWordList]
    def sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get(site_id, word_id, opts = {})
      data, _status_code, _headers = sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get_with_http_info(site_id, word_id, opts)
      data
    end

    # Get pages with words to review from spelling
    # Get pages containing this specific word to review.  
    # @param site_id [Integer] Id for specific site.
    # @param word_id [Integer] Id for specific word.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PageForWordList, Integer, Hash)>] PageForWordList data, response status code and response headers
    def sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get_with_http_info(site_id, word_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get"
      end
      # verify the required parameter 'word_id' is set
      if @api_client.config.client_side_validation && word_id.nil?
        fail ArgumentError, "Missing the required parameter 'word_id' when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/quality_assurance/spelling/words_to_review/{word_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'word_id' + '}', CGI.escape(word_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageForWordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"QualityAssuranceApi.sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityAssuranceApi#sites_site_id_quality_assurance_spelling_words_to_review_word_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
