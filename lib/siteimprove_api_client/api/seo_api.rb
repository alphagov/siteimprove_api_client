=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class SEOApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get ignored issues from decisions
    # Get specific issues that have been ignored within the SEO service. This includes issues that have been ignored on all pages (Global decision) and individual pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IgnoredIssuesList]
    def sites_site_id_seo_decisions_ignored_issues_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_decisions_ignored_issues_get_with_http_info(site_id, opts)
      data
    end

    # Get ignored issues from decisions
    # Get specific issues that have been ignored within the SEO service. This includes issues that have been ignored on all pages (Global decision) and individual pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IgnoredIssuesList, Integer, Hash)>] IgnoredIssuesList data, response status code and response headers
    def sites_site_id_seo_decisions_ignored_issues_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_decisions_ignored_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/decisions/ignored_issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IgnoredIssuesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_decisions_ignored_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_decisions_ignored_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ignored issue's pages from decisions
    # Get all pages affected by a specific issue.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :seo_issue Issue filter. (default to 'duplicate_page_title')
    # @return [IgnoredIssuesDetailsList]
    def sites_site_id_seo_decisions_ignored_issues_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_decisions_ignored_issues_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get ignored issue&#39;s pages from decisions
    # Get all pages affected by a specific issue.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :seo_issue Issue filter. (default to 'duplicate_page_title')
    # @return [Array<(IgnoredIssuesDetailsList, Integer, Hash)>] IgnoredIssuesDetailsList data, response status code and response headers
    def sites_site_id_seo_decisions_ignored_issues_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_decisions_ignored_issues_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_issues_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["duplicate_page_title", "duplicate_meta_descriptions", "duplicate_h1_headings", "pages_without_meta_description", "pages_without_h1_heading", "pages_without_page_title", "page_not_included_in_xml_sitemap", "page_excluded_by_robots", "page_excluded_by_rel_canonical", "page_excluded_by_noindex_nofollow", "keyword_not_included_in_meta_description", "keyword_not_included_in_image_alt_text", "keyword_not_included_in_sub_headings", "keyword_not_included_in_page_title", "keyword_not_included_in_url", "keyword_not_included_in_h1_heading", "keyword_not_included_in_internal_link_text", "redirect"]
      if @api_client.config.client_side_validation && opts[:'seo_issue'] && !allowable_values.include?(opts[:'seo_issue'])
        fail ArgumentError, "invalid value for \"seo_issue\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/decisions/ignored_issues/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'seo_issue'] = opts[:'seo_issue'] if !opts[:'seo_issue'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IgnoredIssuesDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_decisions_ignored_issues_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_decisions_ignored_issues_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ignored pages from decisions
    # Get pages have been ignored within the SEO service.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [IgnoredPagesList]
    def sites_site_id_seo_decisions_ignored_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_decisions_ignored_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get ignored pages from decisions
    # Get pages have been ignored within the SEO service.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(IgnoredPagesList, Integer, Hash)>] IgnoredPagesList data, response status code and response headers
    def sites_site_id_seo_decisions_ignored_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_decisions_ignored_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_decisions_ignored_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_decisions_ignored_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/decisions/ignored_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IgnoredPagesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_decisions_ignored_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_decisions_ignored_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get \"duplicate H1 headings\" from issues
    # Get issues of two or more pages that share the same H1 heading. The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [DuplicateH1HeadingList]
    def sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get_with_http_info(site_id, opts)
      data
    end

    # Get \&quot;duplicate H1 headings\&quot; from issues
    # Get issues of two or more pages that share the same H1 heading. The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(DuplicateH1HeadingList, Integer, Hash)>] DuplicateH1HeadingList data, response status code and response headers
    def sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/duplicate_h1_headings/h1_headings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateH1HeadingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"duplicate H1 headings\" from issues
    # Get all pages that have duplicate H1 headings.
    # @param site_id [Integer] Id for specific site.
    # @param h1heading_id [Integer] Id for specific H1 heading.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DuplicateH1HeadingDetailsList]
    def sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get(site_id, h1heading_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get_with_http_info(site_id, h1heading_id, opts)
      data
    end

    # Get pages for \&quot;duplicate H1 headings\&quot; from issues
    # Get all pages that have duplicate H1 headings.
    # @param site_id [Integer] Id for specific site.
    # @param h1heading_id [Integer] Id for specific H1 heading.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DuplicateH1HeadingDetailsList, Integer, Hash)>] DuplicateH1HeadingDetailsList data, response status code and response headers
    def sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get_with_http_info(site_id, h1heading_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get"
      end
      # verify the required parameter 'h1heading_id' is set
      if @api_client.config.client_side_validation && h1heading_id.nil?
        fail ArgumentError, "Missing the required parameter 'h1heading_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/duplicate_h1_headings/h1_headings/{h1heading_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'h1heading_id' + '}', CGI.escape(h1heading_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateH1HeadingDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get \"duplicate meta descriptions\" from issues
    # Two or more pages share the same meta description. The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine results pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [DuplicateMetaDescriptionList]
    def sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get_with_http_info(site_id, opts)
      data
    end

    # Get \&quot;duplicate meta descriptions\&quot; from issues
    # Two or more pages share the same meta description. The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine results pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(DuplicateMetaDescriptionList, Integer, Hash)>] DuplicateMetaDescriptionList data, response status code and response headers
    def sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/duplicate_meta_descriptions/meta_descriptions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateMetaDescriptionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with \"duplicate meta descriptions\" from issues
    # Get all pages that have duplicate meta descriptions.
    # @param site_id [Integer] Id for specific site.
    # @param meta_name_id [Integer] Id for specific meta name.
    # @param meta_content_id [Integer] Id for specific meta content.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DuplicateMetaDescriptionDetailsList]
    def sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get(site_id, meta_name_id, meta_content_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get_with_http_info(site_id, meta_name_id, meta_content_id, opts)
      data
    end

    # Get pages with \&quot;duplicate meta descriptions\&quot; from issues
    # Get all pages that have duplicate meta descriptions.
    # @param site_id [Integer] Id for specific site.
    # @param meta_name_id [Integer] Id for specific meta name.
    # @param meta_content_id [Integer] Id for specific meta content.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DuplicateMetaDescriptionDetailsList, Integer, Hash)>] DuplicateMetaDescriptionDetailsList data, response status code and response headers
    def sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get_with_http_info(site_id, meta_name_id, meta_content_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get"
      end
      # verify the required parameter 'meta_name_id' is set
      if @api_client.config.client_side_validation && meta_name_id.nil?
        fail ArgumentError, "Missing the required parameter 'meta_name_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get"
      end
      # verify the required parameter 'meta_content_id' is set
      if @api_client.config.client_side_validation && meta_content_id.nil?
        fail ArgumentError, "Missing the required parameter 'meta_content_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/duplicate_meta_descriptions/meta_descriptions/{meta_name_id}/{meta_content_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'meta_name_id' + '}', CGI.escape(meta_name_id.to_s)).sub('{' + 'meta_content_id' + '}', CGI.escape(meta_content_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateMetaDescriptionDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get \"duplicate page titles\" from issues
    # Two or more pages share the same page title. This may cause the pages to compete against each other and weaken search engine optimisation.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [DuplicatePageTitlesList]
    def sites_site_id_seo_issues_duplicate_page_title_titles_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_duplicate_page_title_titles_get_with_http_info(site_id, opts)
      data
    end

    # Get \&quot;duplicate page titles\&quot; from issues
    # Two or more pages share the same page title. This may cause the pages to compete against each other and weaken search engine optimisation.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(DuplicatePageTitlesList, Integer, Hash)>] DuplicatePageTitlesList data, response status code and response headers
    def sites_site_id_seo_issues_duplicate_page_title_titles_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/duplicate_page_title/titles'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicatePageTitlesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_duplicate_page_title_titles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"duplicate page titles\" from issues
    # Get all pages that have duplicate page titles.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :title URL escaped title of page.
    # @return [DuplicatePageTitleDetailsList]
    def sites_site_id_seo_issues_duplicate_page_title_titles_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_duplicate_page_title_titles_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;duplicate page titles\&quot; from issues
    # Get all pages that have duplicate page titles.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :title URL escaped title of page.
    # @return [Array<(DuplicatePageTitleDetailsList, Integer, Hash)>] DuplicatePageTitleDetailsList data, response status code and response headers
    def sites_site_id_seo_issues_duplicate_page_title_titles_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/duplicate_page_title/titles/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicatePageTitleDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_duplicate_page_title_titles_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_duplicate_page_title_titles_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issues
    # Get all SEO issues on your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :responsibility Responsibility filter (default to 'editorial')
    # @option opts [String] :severity Severity filter. (default to 'review')
    # @return [SeoIssueList]
    def sites_site_id_seo_issues_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_get_with_http_info(site_id, opts)
      data
    end

    # Get issues
    # Get all SEO issues on your website.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :responsibility Responsibility filter (default to 'editorial')
    # @option opts [String] :severity Severity filter. (default to 'review')
    # @return [Array<(SeoIssueList, Integer, Hash)>] SeoIssueList data, response status code and response headers
    def sites_site_id_seo_issues_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_get, must be greater than or equal to 1.'
      end

      allowable_values = ["editorial", "technical"]
      if @api_client.config.client_side_validation && opts[:'responsibility'] && !allowable_values.include?(opts[:'responsibility'])
        fail ArgumentError, "invalid value for \"responsibility\", must be one of #{allowable_values}"
      end
      allowable_values = ["review", "warning", "error"]
      if @api_client.config.client_side_validation && opts[:'severity'] && !allowable_values.include?(opts[:'severity'])
        fail ArgumentError, "invalid value for \"severity\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'responsibility'] = opts[:'responsibility'] if !opts[:'responsibility'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in h1\" from issues
    # The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInH1HeadingList]
    def sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in h1\&quot; from issues
    # The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInH1HeadingList, Integer, Hash)>] KeywordNotIncludedInH1HeadingList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_h1_heading/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInH1HeadingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in image alt text\" from issues
    # The keyword is not included in any of the image alt texts in the page. Including important keywords in the alt text of a relevant image helps both the regular search engine optimization and optimization in image searches.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInImageAltTextList]
    def sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in image alt text\&quot; from issues
    # The keyword is not included in any of the image alt texts in the page. Including important keywords in the alt text of a relevant image helps both the regular search engine optimization and optimization in image searches.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInImageAltTextList, Integer, Hash)>] KeywordNotIncludedInImageAltTextList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_image_alt_text/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInImageAltTextList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in internal link text\" from issues
    # This will return the pages for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInInternalLinkTextList]
    def sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in internal link text\&quot; from issues
    # This will return the pages for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInInternalLinkTextList, Integer, Hash)>] KeywordNotIncludedInInternalLinkTextList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInInternalLinkTextList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get link texts for \"keyword not included in internal link text\" from issues
    # This will return the link texts for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [KeywordNotIncludedInInternalLinkTextDetailsList]
    def sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get link texts for \&quot;keyword not included in internal link text\&quot; from issues
    # This will return the link texts for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(KeywordNotIncludedInInternalLinkTextDetailsList, Integer, Hash)>] KeywordNotIncludedInInternalLinkTextDetailsList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages/{page_id}/link_texts'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInInternalLinkTextDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get referring pages to link text for \"keyword not included in internal link text\" from issues
    # This will return the referring pages to the specific link text on for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param link_text_id [Integer] Id for specific link text.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [KeywordNotIncludedInInternalLinkTextReferringPagesList]
    def sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get(site_id, page_id, link_text_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get_with_http_info(site_id, page_id, link_text_id, opts)
      data
    end

    # Get referring pages to link text for \&quot;keyword not included in internal link text\&quot; from issues
    # This will return the referring pages to the specific link text on for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param link_text_id [Integer] Id for specific link text.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(KeywordNotIncludedInInternalLinkTextReferringPagesList, Integer, Hash)>] KeywordNotIncludedInInternalLinkTextReferringPagesList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get_with_http_info(site_id, page_id, link_text_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get"
      end
      # verify the required parameter 'link_text_id' is set
      if @api_client.config.client_side_validation && link_text_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_text_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages/{page_id}/link_texts/{link_text_id}/referring_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s)).sub('{' + 'link_text_id' + '}', CGI.escape(link_text_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInInternalLinkTextReferringPagesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in meta description\" from issues
    # The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine result pages. The likelihood of a user choosing this page is greatly improved if the keyword they have searched for appears in the text.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInMetaDescriptionList]
    def sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in meta description\&quot; from issues
    # The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine result pages. The likelihood of a user choosing this page is greatly improved if the keyword they have searched for appears in the text.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInMetaDescriptionList, Integer, Hash)>] KeywordNotIncludedInMetaDescriptionList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_meta_description/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInMetaDescriptionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in page title\" from issues
    # The keyword is not included in the page title. The page title is the single most important place to include your keyword on page.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInPageTitleList]
    def sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in page title\&quot; from issues
    # The keyword is not included in the page title. The page title is the single most important place to include your keyword on page.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInPageTitleList, Integer, Hash)>] KeywordNotIncludedInPageTitleList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_page_title/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInPageTitleList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in sub headings\" from issues
    # Heading tags are used to structure your content and make it easier for users as well as search engines to scan and understand what the page is about. Subheadings (H2, H3, ...) follow the H1 heading and together they form the outline of the page’s content.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInSubHeadingsList]
    def sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in sub headings\&quot; from issues
    # Heading tags are used to structure your content and make it easier for users as well as search engines to scan and understand what the page is about. Subheadings (H2, H3, ...) follow the H1 heading and together they form the outline of the page’s content.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInSubHeadingsList, Integer, Hash)>] KeywordNotIncludedInSubHeadingsList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_sub_headings/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInSubHeadingsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"keyword not included in url\" from issues
    # When the keyword is included in the page's URL, it tells both users and search engines what the page is about. When the URL is used as link text on other websites linking to this page, it provides even more value if the keyword is included in the URL.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [KeywordNotIncludedInUrlList]
    def sites_site_id_seo_issues_keyword_not_included_in_url_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_keyword_not_included_in_url_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;keyword not included in url\&quot; from issues
    # When the keyword is included in the page&#39;s URL, it tells both users and search engines what the page is about. When the URL is used as link text on other websites linking to this page, it provides even more value if the keyword is included in the URL.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(KeywordNotIncludedInUrlList, Integer, Hash)>] KeywordNotIncludedInUrlList data, response status code and response headers
    def sites_site_id_seo_issues_keyword_not_included_in_url_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_keyword_not_included_in_url_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_url_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_url_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_url_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_keyword_not_included_in_url_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/keyword_not_included_in_url/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordNotIncludedInUrlList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_keyword_not_included_in_url_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_keyword_not_included_in_url_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"pages excluded by noindex/nofollow\" from issues
    # Blocking pages by noindex/nofollow is a way to keep pages accessible to users navigating the website but out of search results pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageExcludedByNoindexNofollowList]
    def sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;pages excluded by noindex/nofollow\&quot; from issues
    # Blocking pages by noindex/nofollow is a way to keep pages accessible to users navigating the website but out of search results pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageExcludedByNoindexNofollowList, Integer, Hash)>] PageExcludedByNoindexNofollowList data, response status code and response headers
    def sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/page_excluded_by_noindex_nofollow/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageExcludedByNoindexNofollowList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get referring pages for \"pages excluded by noindex/nofollow\" from issues
    # Get all referring pages to this particular page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList1]
    def sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get referring pages for \&quot;pages excluded by noindex/nofollow\&quot; from issues
    # Get all referring pages to this particular page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList1, Integer, Hash)>] ReferringPageList1 data, response status code and response headers
    def sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/page_excluded_by_noindex_nofollow/pages/{page_id}/referring_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"page excluded by rel=canonical\" from issues
    # Blocking pages by rel=canonical is a way to keep duplicate pages accessible to users navigating the website but keep them out of search result pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageExcludedByRelCanonicalList]
    def sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;page excluded by rel&#x3D;canonical\&quot; from issues
    # Blocking pages by rel&#x3D;canonical is a way to keep duplicate pages accessible to users navigating the website but keep them out of search result pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageExcludedByRelCanonicalList, Integer, Hash)>] PageExcludedByRelCanonicalList data, response status code and response headers
    def sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/page_excluded_by_rel_canonical/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageExcludedByRelCanonicalList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"pages excluded by robots.txt\" from issues
    # Robots.txt is a text file at the top-level directory of a web server that tells search engines not to crawl certain URLs.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageExcludedByRobotsList]
    def sites_site_id_seo_issues_page_excluded_by_robots_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_page_excluded_by_robots_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;pages excluded by robots.txt\&quot; from issues
    # Robots.txt is a text file at the top-level directory of a web server that tells search engines not to crawl certain URLs.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageExcludedByRobotsList, Integer, Hash)>] PageExcludedByRobotsList data, response status code and response headers
    def sites_site_id_seo_issues_page_excluded_by_robots_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_page_excluded_by_robots_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_robots_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_robots_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_robots_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_excluded_by_robots_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/page_excluded_by_robots/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageExcludedByRobotsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_page_excluded_by_robots_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_page_excluded_by_robots_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"page not included in xml sitemap\" from issues
    # Pages that are not included in the website’s XML Sitemap. The XML Sitemap informs search engines about pages on the website that are available for crawling in order to help them crawl and index the website more intelligently.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageNotIncludedInXmlSitemapList]
    def sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;page not included in xml sitemap\&quot; from issues
    # Pages that are not included in the website’s XML Sitemap. The XML Sitemap informs search engines about pages on the website that are available for crawling in order to help them crawl and index the website more intelligently.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageNotIncludedInXmlSitemapList, Integer, Hash)>] PageNotIncludedInXmlSitemapList data, response status code and response headers
    def sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/page_not_included_in_xml_sitemap/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageNotIncludedInXmlSitemapList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"pages without h1 headings\" from issues
    # The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PagesWithoutH1HeadingList]
    def sites_site_id_seo_issues_pages_without_h1_heading_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_pages_without_h1_heading_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;pages without h1 headings\&quot; from issues
    # The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PagesWithoutH1HeadingList, Integer, Hash)>] PagesWithoutH1HeadingList data, response status code and response headers
    def sites_site_id_seo_issues_pages_without_h1_heading_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_pages_without_h1_heading_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_pages_without_h1_heading_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_h1_heading_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_h1_heading_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_h1_heading_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/pages_without_h1_heading/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithoutH1HeadingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_pages_without_h1_heading_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_pages_without_h1_heading_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"pages without meta descriptions\" from issues
    # The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine results pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PagesWithoutMetaDescriptionList]
    def sites_site_id_seo_issues_pages_without_meta_description_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_pages_without_meta_description_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;pages without meta descriptions\&quot; from issues
    # The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine results pages.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PagesWithoutMetaDescriptionList, Integer, Hash)>] PagesWithoutMetaDescriptionList data, response status code and response headers
    def sites_site_id_seo_issues_pages_without_meta_description_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_pages_without_meta_description_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_pages_without_meta_description_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_meta_description_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_meta_description_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_meta_description_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/pages_without_meta_description/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithoutMetaDescriptionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_pages_without_meta_description_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_pages_without_meta_description_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for \"pages without page title\" from issues
    # When a page has no page title it makes it difficult for search engines to determine what the page is about.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [PagesWithoutPageTitleList]
    def sites_site_id_seo_issues_pages_without_page_title_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_pages_without_page_title_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for \&quot;pages without page title\&quot; from issues
    # When a page has no page title it makes it difficult for search engines to determine what the page is about.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(PagesWithoutPageTitleList, Integer, Hash)>] PagesWithoutPageTitleList data, response status code and response headers
    def sites_site_id_seo_issues_pages_without_page_title_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_pages_without_page_title_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_pages_without_page_title_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_page_title_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_page_title_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_pages_without_page_title_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/pages_without_page_title/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithoutPageTitleList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_pages_without_page_title_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_pages_without_page_title_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirect links from issues
    # A 302 redirect is a temporary redirect that sends users and search engines - but not ranking power - to the new URL. It should only be used for content that has been moved to a new location temporarily.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [RedirectRequestDetailsList]
    def sites_site_id_seo_issues_redirect_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_redirect_links_get_with_http_info(site_id, opts)
      data
    end

    # Get redirect links from issues
    # A 302 redirect is a temporary redirect that sends users and search engines - but not ranking power - to the new URL. It should only be used for content that has been moved to a new location temporarily.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(RedirectRequestDetailsList, Integer, Hash)>] RedirectRequestDetailsList data, response status code and response headers
    def sites_site_id_seo_issues_redirect_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_redirect_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_redirect_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_redirect_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_redirect_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_redirect_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/redirect/links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectRequestDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_redirect_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_redirect_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirection steps in redirect links from issues
    # Get the entire list of redirections involved, from the start page to the end page.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [RedirectChainRequestDetailsList]
    def sites_site_id_seo_issues_redirect_links_link_id_steps_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_issues_redirect_links_link_id_steps_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get redirection steps in redirect links from issues
    # Get the entire list of redirections involved, from the start page to the end page.
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(RedirectChainRequestDetailsList, Integer, Hash)>] RedirectChainRequestDetailsList data, response status code and response headers
    def sites_site_id_seo_issues_redirect_links_link_id_steps_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/issues/redirect/links/{link_id}/steps'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectChainRequestDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_issues_redirect_links_link_id_steps_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_issues_redirect_links_link_id_steps_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SEO groups
    # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are returned.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SeoGroupOverviewDetailsList]
    def sites_site_id_seo_overview_groups_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_overview_groups_get_with_http_info(site_id, opts)
      data
    end

    # Get SEO groups
    # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are returned.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SeoGroupOverviewDetailsList, Integer, Hash)>] SeoGroupOverviewDetailsList data, response status code and response headers
    def sites_site_id_seo_overview_groups_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_overview_groups_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_overview_groups_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_overview_groups_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_overview_groups_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_overview_groups_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/overview/groups'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoGroupOverviewDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_overview_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_overview_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SEO policies
    # Policies created within the Policy service that have been chosen to be displayed within SEO
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ExecutedPolicyList]
    def sites_site_id_seo_overview_policies_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_overview_policies_get_with_http_info(site_id, opts)
      data
    end

    # Get SEO policies
    # Policies created within the Policy service that have been chosen to be displayed within SEO
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ExecutedPolicyList, Integer, Hash)>] ExecutedPolicyList data, response status code and response headers
    def sites_site_id_seo_overview_policies_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_overview_policies_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_overview_policies_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_overview_policies_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_overview_policies_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_overview_policies_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/overview/policies'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExecutedPolicyList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_overview_policies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_overview_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary for SEO
    # Get overall summary of the issues identified by SEO.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoSummaryIssueList]
    def sites_site_id_seo_overview_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_overview_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get summary for SEO
    # Get overall summary of the issues identified by SEO.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoSummaryIssueList, Integer, Hash)>] SeoSummaryIssueList data, response status code and response headers
    def sites_site_id_seo_overview_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_overview_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_overview_summary_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_overview_summary_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_overview_summary_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_overview_summary_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/overview/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoSummaryIssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_overview_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_overview_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages
    # Get all pages that are being checked for SEO issues, including pages that are being optimised for a specific keyword.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SeoPageList]
    def sites_site_id_seo_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages
    # Get all pages that are being checked for SEO issues, including pages that are being optimised for a specific keyword.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SeoPageList, Integer, Hash)>] SeoPageList data, response status code and response headers
    def sites_site_id_seo_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seo/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issues for page
    # Get SEO issues for a specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoPageIssueDetailsList]
    def sites_site_id_seo_pages_page_id_issues_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seo_pages_page_id_issues_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get issues for page
    # Get SEO issues for a specific page.
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoPageIssueDetailsList, Integer, Hash)>] SeoPageIssueDetailsList data, response status code and response headers
    def sites_site_id_seo_pages_page_id_issues_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEOApi.sites_site_id_seo_pages_page_id_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SEOApi.sites_site_id_seo_pages_page_id_issues_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SEOApi.sites_site_id_seo_pages_page_id_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SEOApi.sites_site_id_seo_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_pages_page_id_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SEOApi.sites_site_id_seo_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seo/pages/{page_id}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoPageIssueDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SEOApi.sites_site_id_seo_pages_page_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEOApi#sites_site_id_seo_pages_page_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
