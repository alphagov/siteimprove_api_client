=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module SiteimproveAPIClient
  class SeoV2Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get activity plans
    # Get all SEO activity plans on this site
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ActivityPlanList]
    def sites_site_id_seov2_activity_plans_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_get_with_http_info(site_id, opts)
      data
    end

    # Get activity plans
    # Get all SEO activity plans on this site
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ActivityPlanList, Integer, Hash)>] ActivityPlanList data, response status code and response headers
    def sites_site_id_seov2_activity_plans_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivityPlanList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get competitors for the specific activity plan
    # Get all competitors for the activity plan
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [CompetitorAnalysisVisibilityScoreTrendList]
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get(site_id, activity_plan_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get_with_http_info(site_id, activity_plan_id, opts)
      data
    end

    # Get competitors for the specific activity plan
    # Get all competitors for the activity plan
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(CompetitorAnalysisVisibilityScoreTrendList, Integer, Hash)>] CompetitorAnalysisVisibilityScoreTrendList data, response status code and response headers
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get_with_http_info(site_id, activity_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get"
      end
      # verify the required parameter 'activity_plan_id' is set
      if @api_client.config.client_side_validation && activity_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_plan_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'activity_plan_id' + '}', CGI.escape(activity_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompetitorAnalysisVisibilityScoreTrendList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get competitors search engine visibility historically
    # Get yours and your competitors search engine visibility historically for the activity plan
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [VisibilityScoreHistoryItemList]
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get(site_id, activity_plan_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get_with_http_info(site_id, activity_plan_id, opts)
      data
    end

    # Get competitors search engine visibility historically
    # Get yours and your competitors search engine visibility historically for the activity plan
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(VisibilityScoreHistoryItemList, Integer, Hash)>] VisibilityScoreHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get_with_http_info(site_id, activity_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get"
      end
      # verify the required parameter 'activity_plan_id' is set
      if @api_client.config.client_side_validation && activity_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_plan_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'activity_plan_id' + '}', CGI.escape(activity_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisibilityScoreHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the position distribution of competitors
    # Get the position distribution of your website and your competitors
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [PositionSpreadList]
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get(site_id, activity_plan_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get_with_http_info(site_id, activity_plan_id, opts)
      data
    end

    # Get the position distribution of competitors
    # Get the position distribution of your website and your competitors
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(PositionSpreadList, Integer, Hash)>] PositionSpreadList data, response status code and response headers
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get_with_http_info(site_id, activity_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get"
      end
      # verify the required parameter 'activity_plan_id' is set
      if @api_client.config.client_side_validation && activity_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_plan_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors/positions'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'activity_plan_id' + '}', CGI.escape(activity_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PositionSpreadList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the position distribution for your competitors historically
    # Get the historical position distribution of your website and your competitors
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :range The range of the keywords (default to 'OneToThree')
    # @return [PositionSpreadHistoryItemList]
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get(site_id, activity_plan_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get_with_http_info(site_id, activity_plan_id, opts)
      data
    end

    # Get the position distribution for your competitors historically
    # Get the historical position distribution of your website and your competitors
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :range The range of the keywords (default to 'OneToThree')
    # @return [Array<(PositionSpreadHistoryItemList, Integer, Hash)>] PositionSpreadHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get_with_http_info(site_id, activity_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get"
      end
      # verify the required parameter 'activity_plan_id' is set
      if @api_client.config.client_side_validation && activity_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_plan_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get, must be greater than or equal to 1.'
      end

      allowable_values = ["one_to_three", "four_to_six", "seven_to_ten", "eleven_to_twenty", "twenty_one_to_thirty", "thirty_one_to_fifty", "fifty_one_to_one_hundred"]
      if @api_client.config.client_side_validation && opts[:'range'] && !allowable_values.include?(opts[:'range'])
        fail ArgumentError, "invalid value for \"range\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors/positions/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'activity_plan_id' + '}', CGI.escape(activity_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PositionSpreadHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_plans_activity_plan_id_competitors_positions_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical metrics for the activity plan
    # Get historical metrics for the activity plan
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [ActivityPlanHistoryItemList]
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get(site_id, activity_plan_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get_with_http_info(site_id, activity_plan_id, opts)
      data
    end

    # Get historical metrics for the activity plan
    # Get historical metrics for the activity plan
    # @param site_id [Integer] Id for specific site.
    # @param activity_plan_id [Integer] Id for specific activity plan
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(ActivityPlanHistoryItemList, Integer, Hash)>] ActivityPlanHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get_with_http_info(site_id, activity_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get"
      end
      # verify the required parameter 'activity_plan_id' is set
      if @api_client.config.client_side_validation && activity_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_plan_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'activity_plan_id' + '}', CGI.escape(activity_plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivityPlanHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_plans_activity_plan_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall statistics for all activity plans
    # Get overall statistics for all activity plans on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [ActivityPlanHighlights]
    def sites_site_id_seov2_activity_plans_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_activity_plans_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get overall statistics for all activity plans
    # Get overall statistics for all activity plans on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivityPlanHighlights, Integer, Hash)>] ActivityPlanHighlights data, response status code and response headers
    def sites_site_id_seov2_activity_plans_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_activity_plans_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_activity_plans_summary_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/activity_plans/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivityPlanHighlights'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_activity_plans_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_activity_plans_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get content optimization keywords
    # Get content optimization keywords on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ContentOptimizationKeywordList]
    def sites_site_id_seov2_content_optimization_keywords_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_content_optimization_keywords_get_with_http_info(site_id, opts)
      data
    end

    # Get content optimization keywords
    # Get content optimization keywords on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ContentOptimizationKeywordList, Integer, Hash)>] ContentOptimizationKeywordList data, response status code and response headers
    def sites_site_id_seov2_content_optimization_keywords_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_content_optimization_keywords_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_content_optimization_keywords_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_content_optimization_keywords_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_content_optimization_keywords_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_content_optimization_keywords_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/content_optimization_keywords'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'activity_plan_id'] = opts[:'activity_plan_id'] if !opts[:'activity_plan_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationKeywordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_content_optimization_keywords_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_content_optimization_keywords_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall statistics for content optimization keywords
    # Get overall statistics for content optimization keywords on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @return [ContentOptimizationKeywordHighlights]
    def sites_site_id_seov2_content_optimization_keywords_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_content_optimization_keywords_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get overall statistics for content optimization keywords
    # Get overall statistics for content optimization keywords on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @return [Array<(ContentOptimizationKeywordHighlights, Integer, Hash)>] ContentOptimizationKeywordHighlights data, response status code and response headers
    def sites_site_id_seov2_content_optimization_keywords_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_content_optimization_keywords_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_content_optimization_keywords_summary_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/content_optimization_keywords/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'activity_plan_id'] = opts[:'activity_plan_id'] if !opts[:'activity_plan_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationKeywordHighlights'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_content_optimization_keywords_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_content_optimization_keywords_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall broken links stats
    # Get the overall broken links stats for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [InternalBrokenSeoLinksInfo]
    def sites_site_id_seov2_issues_broken_links_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_broken_links_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall broken links stats
    # Get the overall broken links stats for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(InternalBrokenSeoLinksInfo, Integer, Hash)>] InternalBrokenSeoLinksInfo data, response status code and response headers
    def sites_site_id_seov2_issues_broken_links_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_broken_links_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/broken_links/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalBrokenSeoLinksInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_broken_links_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_broken_links_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall broken links stats for entry pages
    # Get overall broken links stats for entry pages
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [InternalBrokenEntryPagesSeoLinksInfo]
    def sites_site_id_seov2_issues_broken_links_entry_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_broken_links_entry_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall broken links stats for entry pages
    # Get overall broken links stats for entry pages
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(InternalBrokenEntryPagesSeoLinksInfo, Integer, Hash)>] InternalBrokenEntryPagesSeoLinksInfo data, response status code and response headers
    def sites_site_id_seov2_issues_broken_links_entry_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/broken_links_entry_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalBrokenEntryPagesSeoLinksInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_broken_links_entry_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links on entry pages
    # Get broken links on entry pages for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [InternalBrokenSeoLinkList]
    def sites_site_id_seov2_issues_broken_links_entry_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_broken_links_entry_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get broken links on entry pages
    # Get broken links on entry pages for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(InternalBrokenSeoLinkList, Integer, Hash)>] InternalBrokenSeoLinkList data, response status code and response headers
    def sites_site_id_seov2_issues_broken_links_entry_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/broken_links_entry_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalBrokenSeoLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_broken_links_entry_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the occurrences of broken links on entry pages historically
    # Get the occurrences of broken links on entry pages historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_broken_links_entry_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_broken_links_entry_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get the occurrences of broken links on entry pages historically
    # Get the occurrences of broken links on entry pages historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_broken_links_entry_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/broken_links_entry_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_broken_links_entry_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_broken_links_entry_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broken links
    # Get the broken links from issues
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [InternalBrokenSeoLinkList]
    def sites_site_id_seov2_issues_broken_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_broken_links_get_with_http_info(site_id, opts)
      data
    end

    # Get broken links
    # Get the broken links from issues
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(InternalBrokenSeoLinkList, Integer, Hash)>] InternalBrokenSeoLinkList data, response status code and response headers
    def sites_site_id_seov2_issues_broken_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalBrokenSeoLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the occurrences of broken links historically
    # Get the occurrences of broken links historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_broken_links_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_broken_links_history_get_with_http_info(site_id, opts)
      data
    end

    # Get the occurrences of broken links historically
    # Get the occurrences of broken links historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_broken_links_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_broken_links_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_broken_links_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/broken_links/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_broken_links_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_broken_links_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for canonical issue
    # Get overall stats for canonical issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [CanonicalUrlsInfo]
    def sites_site_id_seov2_issues_canonical_urls_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_canonical_urls_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for canonical issue
    # Get overall stats for canonical issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(CanonicalUrlsInfo, Integer, Hash)>] CanonicalUrlsInfo data, response status code and response headers
    def sites_site_id_seov2_issues_canonical_urls_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_canonical_urls_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/canonical_urls/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CanonicalUrlsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_canonical_urls_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_canonical_urls_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages not linking to the canonical page
    # Get pages not linking to the canonical page
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithCanonicalList]
    def sites_site_id_seov2_issues_canonical_urls_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_canonical_urls_get_with_http_info(site_id, opts)
      data
    end

    # Get pages not linking to the canonical page
    # Get pages not linking to the canonical page
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithCanonicalList, Integer, Hash)>] PageWithCanonicalList data, response status code and response headers
    def sites_site_id_seov2_issues_canonical_urls_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_canonical_urls_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/canonical_urls'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithCanonicalList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_canonical_urls_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_canonical_urls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of canonical issue
    # Get historical occurrences of canonical issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_canonical_urls_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_canonical_urls_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of canonical issue
    # Get historical occurrences of canonical issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_canonical_urls_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_canonical_urls_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_canonical_urls_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/canonical_urls/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_canonical_urls_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_canonical_urls_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats of code to text ratio issue
    # Get overall stats of code to text ratio issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesCodeTextRatioInfo]
    def sites_site_id_seov2_issues_code_text_ratio_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_code_text_ratio_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats of code to text ratio issue
    # Get overall stats of code to text ratio issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesCodeTextRatioInfo, Integer, Hash)>] PagesCodeTextRatioInfo data, response status code and response headers
    def sites_site_id_seov2_issues_code_text_ratio_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/code_text_ratio/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesCodeTextRatioInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_code_text_ratio_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages for code to text ratio issue
    # Pages with text-to-code ratio below 30%
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithLowCodeTextRatioList]
    def sites_site_id_seov2_issues_code_text_ratio_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_code_text_ratio_get_with_http_info(site_id, opts)
      data
    end

    # Get pages for code to text ratio issue
    # Pages with text-to-code ratio below 30%
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithLowCodeTextRatioList, Integer, Hash)>] PageWithLowCodeTextRatioList data, response status code and response headers
    def sites_site_id_seov2_issues_code_text_ratio_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/code_text_ratio'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithLowCodeTextRatioList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_code_text_ratio_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of code to text ratio issue
    # Get historical occurrences of code to text ratio issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_code_text_ratio_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_code_text_ratio_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of code to text ratio issue
    # Get historical occurrences of code to text ratio issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_code_text_ratio_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/code_text_ratio/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_code_text_ratio_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_code_text_ratio_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get compression used issue
    # Get compression used issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [CompressionUsed]
    def sites_site_id_seov2_issues_compression_used_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_compression_used_details_get_with_http_info(site_id, opts)
      data
    end

    # Get compression used issue
    # Get compression used issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompressionUsed, Integer, Hash)>] CompressionUsed data, response status code and response headers
    def sites_site_id_seov2_issues_compression_used_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_compression_used_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_compression_used_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/compression_used/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompressionUsed'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_compression_used_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_compression_used_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for the correct 404 issue
    # Get overall stats for the correct 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [LinksStatusCodeCorrect404Info]
    def sites_site_id_seov2_issues_correct404s_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_correct404s_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for the correct 404 issue
    # Get overall stats for the correct 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(LinksStatusCodeCorrect404Info, Integer, Hash)>] LinksStatusCodeCorrect404Info data, response status code and response headers
    def sites_site_id_seov2_issues_correct404s_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_correct404s_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/correct_404s/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinksStatusCodeCorrect404Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_correct404s_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_correct404s_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get links for the correct 404 issue
    # Links should return correctly 404 when it's a 404 and not be a \"soft\" 404.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Link404WithIncorrectStatusCodeList]
    def sites_site_id_seov2_issues_correct404s_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_correct404s_get_with_http_info(site_id, opts)
      data
    end

    # Get links for the correct 404 issue
    # Links should return correctly 404 when it&#39;s a 404 and not be a \&quot;soft\&quot; 404.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(Link404WithIncorrectStatusCodeList, Integer, Hash)>] Link404WithIncorrectStatusCodeList data, response status code and response headers
    def sites_site_id_seov2_issues_correct404s_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_correct404s_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/correct_404s'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Link404WithIncorrectStatusCodeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_correct404s_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_correct404s_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of correct 404 issue
    # Get historical occurrences of correct 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_correct404s_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_correct404s_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of correct 404 issue
    # Get historical occurrences of correct 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_correct404s_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_correct404s_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_correct404s_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/correct_404s/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_correct404s_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_correct404s_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for the css validation issue
    # Get overall stats for the css validation issue. This check is deprecated from November 2019. The data is still available but won't get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [CssValidationErrorInfo]
    def sites_site_id_seov2_issues_css_validation_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_css_validation_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for the css validation issue
    # Get overall stats for the css validation issue. This check is deprecated from November 2019. The data is still available but won&#39;t get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(CssValidationErrorInfo, Integer, Hash)>] CssValidationErrorInfo data, response status code and response headers
    def sites_site_id_seov2_issues_css_validation_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_css_validation_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/css_validation/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CssValidationErrorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_css_validation_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_css_validation_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get stylesheets for the css validation issue
    # Get all stylesheets not passing css validation. This check is deprecated from November 2019. The data is still available but won't get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [CssValidationErrorList]
    def sites_site_id_seov2_issues_css_validation_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_css_validation_get_with_http_info(site_id, opts)
      data
    end

    # Get stylesheets for the css validation issue
    # Get all stylesheets not passing css validation. This check is deprecated from November 2019. The data is still available but won&#39;t get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(CssValidationErrorList, Integer, Hash)>] CssValidationErrorList data, response status code and response headers
    def sites_site_id_seov2_issues_css_validation_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_css_validation_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/css_validation'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CssValidationErrorList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_css_validation_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_css_validation_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of css validation issue
    # Get historical occurrences of css validation issue. This check is deprecated from November 2019. The data is still available but won't get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_css_validation_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_css_validation_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of css validation issue
    # Get historical occurrences of css validation issue. This check is deprecated from November 2019. The data is still available but won&#39;t get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_css_validation_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_css_validation_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_css_validation_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/css_validation/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_css_validation_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_css_validation_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for the dead end pages issue
    # Get overall stats for the dead end pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [DeadEndPagesInfo]
    def sites_site_id_seov2_issues_dead_end_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_dead_end_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for the dead end pages issue
    # Get overall stats for the dead end pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(DeadEndPagesInfo, Integer, Hash)>] DeadEndPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_dead_end_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/dead_end_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeadEndPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_dead_end_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get dead end pages issue
    # Get all the pages with no internal links
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [DeadEndPageList]
    def sites_site_id_seov2_issues_dead_end_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_dead_end_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get dead end pages issue
    # Get all the pages with no internal links
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(DeadEndPageList, Integer, Hash)>] DeadEndPageList data, response status code and response headers
    def sites_site_id_seov2_issues_dead_end_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/dead_end_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeadEndPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_dead_end_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of dead end pages issue
    # Get historical occurrences of dead end pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_dead_end_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_dead_end_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of dead end pages issue
    # Get historical occurrences of dead end pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_dead_end_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/dead_end_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_dead_end_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_dead_end_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get desktop speed issue
    # Get desktop speed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [DesktopSpeed]
    def sites_site_id_seov2_issues_desktop_speed_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_desktop_speed_details_get_with_http_info(site_id, opts)
      data
    end

    # Get desktop speed issue
    # Get desktop speed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DesktopSpeed, Integer, Hash)>] DesktopSpeed data, response status code and response headers
    def sites_site_id_seov2_issues_desktop_speed_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_desktop_speed_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_desktop_speed_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/desktop_speed/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DesktopSpeed'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_desktop_speed_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_desktop_speed_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the desktop speed score historically
    # Get the desktop speed score historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DesktopSpeedHistoryItemList]
    def sites_site_id_seov2_issues_desktop_speed_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_desktop_speed_history_get_with_http_info(site_id, opts)
      data
    end

    # Get the desktop speed score historically
    # Get the desktop speed score historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DesktopSpeedHistoryItemList, Integer, Hash)>] DesktopSpeedHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_desktop_speed_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_desktop_speed_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_desktop_speed_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_desktop_speed_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_desktop_speed_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_desktop_speed_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/desktop_speed/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DesktopSpeedHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_desktop_speed_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_desktop_speed_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for duplicate meta description issue
    # Get overall stats for duplicate meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [DuplicateMetaDescriptionInfo]
    def sites_site_id_seov2_issues_duplicate_description_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_duplicate_description_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for duplicate meta description issue
    # Get overall stats for duplicate meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(DuplicateMetaDescriptionInfo, Integer, Hash)>] DuplicateMetaDescriptionInfo data, response status code and response headers
    def sites_site_id_seov2_issues_duplicate_description_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_duplicate_description_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/duplicate_description/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateMetaDescriptionInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_duplicate_description_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_duplicate_description_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get duplicate description issue
    # Get all duplicate meta descriptions
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaDescriptionValueList]
    def sites_site_id_seov2_issues_duplicate_description_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_duplicate_description_get_with_http_info(site_id, opts)
      data
    end

    # Get duplicate description issue
    # Get all duplicate meta descriptions
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaDescriptionValueList, Integer, Hash)>] MetaDescriptionValueList data, response status code and response headers
    def sites_site_id_seov2_issues_duplicate_description_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_duplicate_description_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/duplicate_description'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_duplicate_description_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_duplicate_description_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of duplicate description issue
    # Get historical occurrences of duplicate meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_duplicate_description_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_duplicate_description_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of duplicate description issue
    # Get historical occurrences of duplicate meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_duplicate_description_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_duplicate_description_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_description_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/duplicate_description/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_duplicate_description_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_duplicate_description_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for duplicate page title issue
    # Get overall stats for duplicate page title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [DuplicateMetaTitleInfo]
    def sites_site_id_seov2_issues_duplicate_page_title_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_duplicate_page_title_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for duplicate page title issue
    # Get overall stats for duplicate page title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(DuplicateMetaTitleInfo, Integer, Hash)>] DuplicateMetaTitleInfo data, response status code and response headers
    def sites_site_id_seov2_issues_duplicate_page_title_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/duplicate_page_title/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateMetaTitleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_duplicate_page_title_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get duplicate page title issue
    # Get all the duplicate page titles
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [DuplicateMetaTitleValueList]
    def sites_site_id_seov2_issues_duplicate_page_title_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_duplicate_page_title_get_with_http_info(site_id, opts)
      data
    end

    # Get duplicate page title issue
    # Get all the duplicate page titles
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(DuplicateMetaTitleValueList, Integer, Hash)>] DuplicateMetaTitleValueList data, response status code and response headers
    def sites_site_id_seov2_issues_duplicate_page_title_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/duplicate_page_title'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateMetaTitleValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_duplicate_page_title_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of duplicate page title issue
    # Get historical occurrences of duplicate page title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_duplicate_page_title_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_duplicate_page_title_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of duplicate page title issue
    # Get historical occurrences of duplicate page title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_duplicate_page_title_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/duplicate_page_title/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_duplicate_page_title_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_duplicate_page_title_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for empty H1 issue
    # Get overall stats for empty H1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [H1EmptyInfo]
    def sites_site_id_seov2_issues_empty_h1_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_empty_h1_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for empty H1 issue
    # Get overall stats for empty H1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(H1EmptyInfo, Integer, Hash)>] H1EmptyInfo data, response status code and response headers
    def sites_site_id_seov2_issues_empty_h1_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_empty_h1_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/empty_h1/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'H1EmptyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_empty_h1_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_empty_h1_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get empty H1 issue
    # Get all pages with an empty H1
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [H1IssuePageList]
    def sites_site_id_seov2_issues_empty_h1_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_empty_h1_get_with_http_info(site_id, opts)
      data
    end

    # Get empty H1 issue
    # Get all pages with an empty H1
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(H1IssuePageList, Integer, Hash)>] H1IssuePageList data, response status code and response headers
    def sites_site_id_seov2_issues_empty_h1_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_empty_h1_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/empty_h1'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'H1IssuePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_empty_h1_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_empty_h1_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of empty H1 issue
    # Get historical occurrences of empty H1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_empty_h1_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_empty_h1_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of empty H1 issue
    # Get historical occurrences of empty H1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_empty_h1_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_empty_h1_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_empty_h1_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/empty_h1/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_empty_h1_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_empty_h1_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get font size legibility issue
    # Get font size legibility issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [FontsizeLegibility]
    def sites_site_id_seov2_issues_fontsize_legibility_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_fontsize_legibility_details_get_with_http_info(site_id, opts)
      data
    end

    # Get font size legibility issue
    # Get font size legibility issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FontsizeLegibility, Integer, Hash)>] FontsizeLegibility data, response status code and response headers
    def sites_site_id_seov2_issues_fontsize_legibility_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_fontsize_legibility_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_fontsize_legibility_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/fontsize_legibility/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FontsizeLegibility'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_fontsize_legibility_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_fontsize_legibility_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issues
    # Get all SEO issues on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category The category filter (default to 'none')
    # @option opts [String] :complexity The complexity filter (default to 'none')
    # @option opts [Boolean] :fixed The fixed filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueWithRecommendationList]
    def sites_site_id_seov2_issues_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_get_with_http_info(site_id, opts)
      data
    end

    # Get issues
    # Get all SEO issues on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category The category filter (default to 'none')
    # @option opts [String] :complexity The complexity filter (default to 'none')
    # @option opts [Boolean] :fixed The fixed filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueWithRecommendationList, Integer, Hash)>] SeoIssueWithRecommendationList data, response status code and response headers
    def sites_site_id_seov2_issues_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_get"
      end
      allowable_values = ["none", "technical", "content", "ux", "mobile"]
      if @api_client.config.client_side_validation && opts[:'category'] && !allowable_values.include?(opts[:'category'])
        fail ArgumentError, "invalid value for \"category\", must be one of #{allowable_values}"
      end
      allowable_values = ["none", "low", "medium", "high", "extreme"]
      if @api_client.config.client_side_validation && opts[:'complexity'] && !allowable_values.include?(opts[:'complexity'])
        fail ArgumentError, "invalid value for \"complexity\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'complexity'] = opts[:'complexity'] if !opts[:'complexity'].nil?
      query_params[:'fixed'] = opts[:'fixed'] if !opts[:'fixed'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueWithRecommendationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for html validation issue
    # Get overall stats for html validation issue. This check is deprecated from November 2019. The data is still available but won't get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [HtmlValidationSeoPagesInfo]
    def sites_site_id_seov2_issues_html_validation_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_html_validation_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for html validation issue
    # Get overall stats for html validation issue. This check is deprecated from November 2019. The data is still available but won&#39;t get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(HtmlValidationSeoPagesInfo, Integer, Hash)>] HtmlValidationSeoPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_html_validation_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_html_validation_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/html_validation/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HtmlValidationSeoPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_html_validation_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_html_validation_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get html validation issue
    # Get all the pages which do not pass html validation. This check is deprecated from November 2019. The data is still available but won't get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [HtmlValidationSeoPageList]
    def sites_site_id_seov2_issues_html_validation_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_html_validation_get_with_http_info(site_id, opts)
      data
    end

    # Get html validation issue
    # Get all the pages which do not pass html validation. This check is deprecated from November 2019. The data is still available but won&#39;t get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(HtmlValidationSeoPageList, Integer, Hash)>] HtmlValidationSeoPageList data, response status code and response headers
    def sites_site_id_seov2_issues_html_validation_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_html_validation_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/html_validation'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HtmlValidationSeoPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_html_validation_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_html_validation_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of html validation issue
    # Get historical occurrences of html validation issue. This check is deprecated from November 2019. The data is still available but won't get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_html_validation_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_html_validation_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of html validation issue
    # Get historical occurrences of html validation issue. This check is deprecated from November 2019. The data is still available but won&#39;t get updated.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_html_validation_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_html_validation_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_html_validation_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/html_validation/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_html_validation_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_html_validation_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for image alt attribute issue
    # Get overall stats for image alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [ImagesWithMissingImageAltAttributeInfo]
    def sites_site_id_seov2_issues_image_alt_attribute_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_alt_attribute_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for image alt attribute issue
    # Get overall stats for image alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(ImagesWithMissingImageAltAttributeInfo, Integer, Hash)>] ImagesWithMissingImageAltAttributeInfo data, response status code and response headers
    def sites_site_id_seov2_issues_image_alt_attribute_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_alt_attribute/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesWithMissingImageAltAttributeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_alt_attribute_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get image alt attribute issue
    # Get all pages where an image is missing an alt attribute
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithMissingImageAltAttributeList]
    def sites_site_id_seov2_issues_image_alt_attribute_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_alt_attribute_get_with_http_info(site_id, opts)
      data
    end

    # Get image alt attribute issue
    # Get all pages where an image is missing an alt attribute
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithMissingImageAltAttributeList, Integer, Hash)>] PageWithMissingImageAltAttributeList data, response status code and response headers
    def sites_site_id_seov2_issues_image_alt_attribute_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_alt_attribute'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithMissingImageAltAttributeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_alt_attribute_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of image alt attribute issue
    # Get historical occurrences of image alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_image_alt_attribute_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_alt_attribute_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of image alt attribute issue
    # Get historical occurrences of image alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_image_alt_attribute_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_alt_attribute/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_alt_attribute_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_alt_attribute_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for image empty alt attribute issue
    # Get overall stats for image empty alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [ImagesWithEmptyImageAltAttributeInfo]
    def sites_site_id_seov2_issues_image_empty_alt_attribute_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_empty_alt_attribute_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for image empty alt attribute issue
    # Get overall stats for image empty alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(ImagesWithEmptyImageAltAttributeInfo, Integer, Hash)>] ImagesWithEmptyImageAltAttributeInfo data, response status code and response headers
    def sites_site_id_seov2_issues_image_empty_alt_attribute_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_empty_alt_attribute/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesWithEmptyImageAltAttributeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_empty_alt_attribute_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get image empty alt attribute issue
    # Get all pages with images that has an empty attribute
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithEmptyImageAltAttributeList]
    def sites_site_id_seov2_issues_image_empty_alt_attribute_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_empty_alt_attribute_get_with_http_info(site_id, opts)
      data
    end

    # Get image empty alt attribute issue
    # Get all pages with images that has an empty attribute
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithEmptyImageAltAttributeList, Integer, Hash)>] PageWithEmptyImageAltAttributeList data, response status code and response headers
    def sites_site_id_seov2_issues_image_empty_alt_attribute_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_empty_alt_attribute'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithEmptyImageAltAttributeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_empty_alt_attribute_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of image empty alt attribute issue
    # Get historical occurrences of image empty alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_image_empty_alt_attribute_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_empty_alt_attribute_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of image empty alt attribute issue
    # Get historical occurrences of image empty alt attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_image_empty_alt_attribute_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_empty_alt_attribute/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_empty_alt_attribute_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_empty_alt_attribute_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for image width height attribute issue
    # Get overall stats for image width height attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [ImagesWithMissingWidthHeightAttributeInfo]
    def sites_site_id_seov2_issues_image_width_height_attribute_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_width_height_attribute_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for image width height attribute issue
    # Get overall stats for image width height attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(ImagesWithMissingWidthHeightAttributeInfo, Integer, Hash)>] ImagesWithMissingWidthHeightAttributeInfo data, response status code and response headers
    def sites_site_id_seov2_issues_image_width_height_attribute_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_width_height_attribute/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesWithMissingWidthHeightAttributeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_width_height_attribute_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get image with height attribute issue
    # Get all pages with an image missing width and/or height attributes
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithMissingImageWidthHeightAttributeList]
    def sites_site_id_seov2_issues_image_width_height_attribute_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_width_height_attribute_get_with_http_info(site_id, opts)
      data
    end

    # Get image with height attribute issue
    # Get all pages with an image missing width and/or height attributes
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithMissingImageWidthHeightAttributeList, Integer, Hash)>] PageWithMissingImageWidthHeightAttributeList data, response status code and response headers
    def sites_site_id_seov2_issues_image_width_height_attribute_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_width_height_attribute'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithMissingImageWidthHeightAttributeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_width_height_attribute_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of image width height attribute issue
    # Get historical occurrences of image width height attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_image_width_height_attribute_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_image_width_height_attribute_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of image width height attribute issue
    # Get historical occurrences of image width height attribute issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_image_width_height_attribute_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/image_width_height_attribute/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_image_width_height_attribute_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_image_width_height_attribute_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for images over 1mb issue
    # Get overall stats for images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [ImagesLargerThan1MbInfo]
    def sites_site_id_seov2_issues_images1mb_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_images1mb_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for images over 1mb issue
    # Get overall stats for images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(ImagesLargerThan1MbInfo, Integer, Hash)>] ImagesLargerThan1MbInfo data, response status code and response headers
    def sites_site_id_seov2_issues_images1mb_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_images1mb_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/images_1mb/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesLargerThan1MbInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_images1mb_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_images1mb_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get images over 1mb issue
    # Get all images that are larger than 1 mb
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [ImagesLargerThan1MbList]
    def sites_site_id_seov2_issues_images1mb_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_images1mb_get_with_http_info(site_id, opts)
      data
    end

    # Get images over 1mb issue
    # Get all images that are larger than 1 mb
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(ImagesLargerThan1MbList, Integer, Hash)>] ImagesLargerThan1MbList data, response status code and response headers
    def sites_site_id_seov2_issues_images1mb_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_images1mb_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/images_1mb'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesLargerThan1MbList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_images1mb_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_images1mb_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of images over 1mb issue
    # Get historical occurrences of images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_images1mb_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_images1mb_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of images over 1mb issue
    # Get historical occurrences of images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_images1mb_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_images1mb_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_images1mb_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/images_1mb/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_images1mb_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_images1mb_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for links to unsafe domains issue
    # Get overall stats for links to unsafe domains issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [UnsafeDomainsSeoInfo]
    def sites_site_id_seov2_issues_links_to_unsafe_domains_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_links_to_unsafe_domains_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for links to unsafe domains issue
    # Get overall stats for links to unsafe domains issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(UnsafeDomainsSeoInfo, Integer, Hash)>] UnsafeDomainsSeoInfo data, response status code and response headers
    def sites_site_id_seov2_issues_links_to_unsafe_domains_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/links_to_unsafe_domains/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeDomainsSeoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_links_to_unsafe_domains_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get links to unsafe domains issue
    # Get all links which link to a domain considered unsafe
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [UnsafeDomainSeoLinkList]
    def sites_site_id_seov2_issues_links_to_unsafe_domains_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_links_to_unsafe_domains_get_with_http_info(site_id, opts)
      data
    end

    # Get links to unsafe domains issue
    # Get all links which link to a domain considered unsafe
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(UnsafeDomainSeoLinkList, Integer, Hash)>] UnsafeDomainSeoLinkList data, response status code and response headers
    def sites_site_id_seov2_issues_links_to_unsafe_domains_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/links_to_unsafe_domains'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeDomainSeoLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_links_to_unsafe_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of unsafe domains issue
    # Get historical occurrences of unsafe domains issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_links_to_unsafe_domains_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_links_to_unsafe_domains_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of unsafe domains issue
    # Get historical occurrences of unsafe domains issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_links_to_unsafe_domains_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/links_to_unsafe_domains/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_links_to_unsafe_domains_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_links_to_unsafe_domains_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for load time issue
    # Get overall stats for load time issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [SlowSeoPagesInfo]
    def sites_site_id_seov2_issues_load_time_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_load_time_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for load time issue
    # Get overall stats for load time issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(SlowSeoPagesInfo, Integer, Hash)>] SlowSeoPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_load_time_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_load_time_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_load_time_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/load_time/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SlowSeoPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_load_time_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_load_time_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get load time issue
    # Get all pages with loading time exceeding 2 seconds
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SlowSeoPageList]
    def sites_site_id_seov2_issues_load_time_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_load_time_get_with_http_info(site_id, opts)
      data
    end

    # Get load time issue
    # Get all pages with loading time exceeding 2 seconds
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SlowSeoPageList, Integer, Hash)>] SlowSeoPageList data, response status code and response headers
    def sites_site_id_seov2_issues_load_time_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_load_time_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_load_time_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_load_time_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_load_time_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_load_time_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/load_time'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SlowSeoPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_load_time_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_load_time_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of load time issue
    # Get historical occurrences of load time issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_load_time_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_load_time_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of load time issue
    # Get historical occurrences of load time issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_load_time_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_load_time_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_load_time_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_load_time_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_load_time_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_load_time_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/load_time/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_load_time_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_load_time_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for the long sentences issue
    # Get overall stats for the long sentences issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [LongSentencePagesInfo]
    def sites_site_id_seov2_issues_long_sentences_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_long_sentences_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for the long sentences issue
    # Get overall stats for the long sentences issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(LongSentencePagesInfo, Integer, Hash)>] LongSentencePagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_long_sentences_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_long_sentences_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/long_sentences/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LongSentencePagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_long_sentences_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_long_sentences_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get long sentences issue
    # Get all pages with sentences longer than 20 words.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [LongSentencePageList]
    def sites_site_id_seov2_issues_long_sentences_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_long_sentences_get_with_http_info(site_id, opts)
      data
    end

    # Get long sentences issue
    # Get all pages with sentences longer than 20 words.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(LongSentencePageList, Integer, Hash)>] LongSentencePageList data, response status code and response headers
    def sites_site_id_seov2_issues_long_sentences_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_long_sentences_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/long_sentences'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LongSentencePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_long_sentences_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_long_sentences_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of long sentences issue
    # Get historical occurrences of long sentences issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_long_sentences_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_long_sentences_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of long sentences issue
    # Get historical occurrences of long sentences issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_long_sentences_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_long_sentences_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_sentences_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/long_sentences/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_long_sentences_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_long_sentences_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for long urls issue
    # Get overall stats for long urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithLongUrlsInfo]
    def sites_site_id_seov2_issues_long_urls_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_long_urls_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for long urls issue
    # Get overall stats for long urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithLongUrlsInfo, Integer, Hash)>] PagesWithLongUrlsInfo data, response status code and response headers
    def sites_site_id_seov2_issues_long_urls_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_long_urls_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/long_urls/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithLongUrlsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_long_urls_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_long_urls_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get long urls issue
    # Get all pages with long urls 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithLongUrlList]
    def sites_site_id_seov2_issues_long_urls_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_long_urls_get_with_http_info(site_id, opts)
      data
    end

    # Get long urls issue
    # Get all pages with long urls 
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithLongUrlList, Integer, Hash)>] PageWithLongUrlList data, response status code and response headers
    def sites_site_id_seov2_issues_long_urls_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_long_urls_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/long_urls'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithLongUrlList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_long_urls_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_long_urls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of long urls issue
    # Get historical occurrences of long urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_long_urls_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_long_urls_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of long urls issue
    # Get historical occurrences of long urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_long_urls_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_long_urls_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_long_urls_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/long_urls/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_long_urls_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_long_urls_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for the many internal links issue
    # Get overall stats for the many internal links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [ManyInternalLinksInfo]
    def sites_site_id_seov2_issues_many_internal_links_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_many_internal_links_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for the many internal links issue
    # Get overall stats for the many internal links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(ManyInternalLinksInfo, Integer, Hash)>] ManyInternalLinksInfo data, response status code and response headers
    def sites_site_id_seov2_issues_many_internal_links_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_many_internal_links_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/many_internal_links/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ManyInternalLinksInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_many_internal_links_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_many_internal_links_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get many internal links issue
    # Get all pages with 60 or more internal links
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ManyInternalLinksPageList]
    def sites_site_id_seov2_issues_many_internal_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_many_internal_links_get_with_http_info(site_id, opts)
      data
    end

    # Get many internal links issue
    # Get all pages with 60 or more internal links
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ManyInternalLinksPageList, Integer, Hash)>] ManyInternalLinksPageList data, response status code and response headers
    def sites_site_id_seov2_issues_many_internal_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_many_internal_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/many_internal_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ManyInternalLinksPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_many_internal_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_many_internal_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of many internal links issue
    # Get historical occurrences of many internal links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_many_internal_links_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_many_internal_links_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of many internal links issue
    # Get historical occurrences of many internal links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_many_internal_links_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_many_internal_links_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_many_internal_links_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/many_internal_links/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_many_internal_links_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_many_internal_links_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta description empty issue
    # Get overall stats for meta description empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaDescriptionEmptyInfo]
    def sites_site_id_seov2_issues_meta_desc_empty_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_empty_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta description empty issue
    # Get overall stats for meta description empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaDescriptionEmptyInfo, Integer, Hash)>] MetaDescriptionEmptyInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_empty_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_empty/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionEmptyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_empty_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta description empty issue
    # Get all pages with an empty meta description
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [MetaDescriptionPageList]
    def sites_site_id_seov2_issues_meta_desc_empty_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_empty_get_with_http_info(site_id, opts)
      data
    end

    # Get meta description empty issue
    # Get all pages with an empty meta description
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(MetaDescriptionPageList, Integer, Hash)>] MetaDescriptionPageList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_empty_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_empty'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_empty_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta description empty issue
    # Get historical occurrences of meta description empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_desc_empty_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_empty_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta description empty issue
    # Get historical occurrences of meta description empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_empty_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_empty/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_empty_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_empty_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta description too long issue
    # Get overall stats for meta description too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaDescriptionTooLongInfo]
    def sites_site_id_seov2_issues_meta_desc_long_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_long_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta description too long issue
    # Get overall stats for meta description too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaDescriptionTooLongInfo, Integer, Hash)>] MetaDescriptionTooLongInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_long_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_long/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionTooLongInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_long_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta description too long issue
    # Get all pages with meta descriptions that are too long
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaDescriptionValueList]
    def sites_site_id_seov2_issues_meta_desc_long_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_long_get_with_http_info(site_id, opts)
      data
    end

    # Get meta description too long issue
    # Get all pages with meta descriptions that are too long
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaDescriptionValueList, Integer, Hash)>] MetaDescriptionValueList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_long_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_long'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_long_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta description too long issue
    # Get historical occurrences of meta description too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_desc_long_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_long_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta description too long issue
    # Get historical occurrences of meta description too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_long_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_long/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_long_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_long_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta description missing issue
    # Get overall stats for meta description missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaDescriptionMissingInfo]
    def sites_site_id_seov2_issues_meta_desc_missing_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_missing_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta description missing issue
    # Get overall stats for meta description missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaDescriptionMissingInfo, Integer, Hash)>] MetaDescriptionMissingInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_missing_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_missing/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionMissingInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_missing_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta description empty issue
    # Get all pages with a missing meta description
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [MetaDescriptionPageList]
    def sites_site_id_seov2_issues_meta_desc_missing_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_missing_get_with_http_info(site_id, opts)
      data
    end

    # Get meta description empty issue
    # Get all pages with a missing meta description
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(MetaDescriptionPageList, Integer, Hash)>] MetaDescriptionPageList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_missing_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_missing'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_missing_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta description missing issue
    # Get historical occurrences of meta description missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_desc_missing_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_missing_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta description missing issue
    # Get historical occurrences of meta description missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_missing_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_missing/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_missing_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_missing_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for multiple meta description issue
    # Get overall stats for multiple meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaDescriptionMultipleInfo]
    def sites_site_id_seov2_issues_meta_desc_multiple_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_multiple_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for multiple meta description issue
    # Get overall stats for multiple meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaDescriptionMultipleInfo, Integer, Hash)>] MetaDescriptionMultipleInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_multiple_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_multiple/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionMultipleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_multiple_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multiple meta description issue
    # Get all pages with multiple meta descriptions
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [MultipleMetaDescriptionPageList]
    def sites_site_id_seov2_issues_meta_desc_multiple_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_multiple_get_with_http_info(site_id, opts)
      data
    end

    # Get multiple meta description issue
    # Get all pages with multiple meta descriptions
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(MultipleMetaDescriptionPageList, Integer, Hash)>] MultipleMetaDescriptionPageList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_multiple_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_multiple'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MultipleMetaDescriptionPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_multiple_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of multiple meta description issue
    # Get historical occurrences of multiple meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_desc_multiple_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_multiple_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of multiple meta description issue
    # Get historical occurrences of multiple meta description issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_multiple_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_multiple/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_multiple_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_multiple_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta description too short issue
    # Get overall stats for meta description too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaDescriptionTooShortInfo]
    def sites_site_id_seov2_issues_meta_desc_short_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_short_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta description too short issue
    # Get overall stats for meta description too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaDescriptionTooShortInfo, Integer, Hash)>] MetaDescriptionTooShortInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_short_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_short/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionTooShortInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_short_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta description too short issue
    # Get all pages with meta description that are too short
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaDescriptionValueList]
    def sites_site_id_seov2_issues_meta_desc_short_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_short_get_with_http_info(site_id, opts)
      data
    end

    # Get meta description too short issue
    # Get all pages with meta description that are too short
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaDescriptionValueList, Integer, Hash)>] MetaDescriptionValueList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_short_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_short'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaDescriptionValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_short_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta description too short issue
    # Get historical occurrences of meta description too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_desc_short_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_desc_short_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta description too short issue
    # Get historical occurrences of meta description too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_desc_short_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_desc_short/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_desc_short_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_desc_short_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta title empty issue
    # Get overall stats for meta title empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaTitleEmptyInfo]
    def sites_site_id_seov2_issues_meta_title_empty_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_empty_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta title empty issue
    # Get overall stats for meta title empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaTitleEmptyInfo, Integer, Hash)>] MetaTitleEmptyInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_empty_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_empty/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleEmptyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_empty_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta title empty issue
    # Get all pages with an empty meta title
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaTitlePageList]
    def sites_site_id_seov2_issues_meta_title_empty_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_empty_get_with_http_info(site_id, opts)
      data
    end

    # Get meta title empty issue
    # Get all pages with an empty meta title
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaTitlePageList, Integer, Hash)>] MetaTitlePageList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_empty_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_empty'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitlePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_empty_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta title empty issue
    # Get historical occurrences of meta title empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_title_empty_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_empty_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta title empty issue
    # Get historical occurrences of meta title empty issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_empty_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_empty/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_empty_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_empty_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta title too long issue
    # Get overall stats for meta title too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaTitleTooLongInfo]
    def sites_site_id_seov2_issues_meta_title_long_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_long_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta title too long issue
    # Get overall stats for meta title too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaTitleTooLongInfo, Integer, Hash)>] MetaTitleTooLongInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_long_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_long_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_long/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleTooLongInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_long_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_long_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta title too long issue
    # Get all pages with a meta title that is too long
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaTitleValueList]
    def sites_site_id_seov2_issues_meta_title_long_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_long_get_with_http_info(site_id, opts)
      data
    end

    # Get meta title too long issue
    # Get all pages with a meta title that is too long
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaTitleValueList, Integer, Hash)>] MetaTitleValueList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_long_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_long_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_long'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_long_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_long_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta title too long issue
    # Get historical occurrences of meta title too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_title_long_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_long_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta title too long issue
    # Get historical occurrences of meta title too long issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_long_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_long_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_long_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_long/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_long_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_long_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta title missing issue
    # Get overall stats for meta title missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaTitleMissingInfo]
    def sites_site_id_seov2_issues_meta_title_missing_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_missing_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta title missing issue
    # Get overall stats for meta title missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaTitleMissingInfo, Integer, Hash)>] MetaTitleMissingInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_missing_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_missing/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleMissingInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_missing_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta title missing issue
    # Get all pages with a missing meta title
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaTitlePageList]
    def sites_site_id_seov2_issues_meta_title_missing_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_missing_get_with_http_info(site_id, opts)
      data
    end

    # Get meta title missing issue
    # Get all pages with a missing meta title
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaTitlePageList, Integer, Hash)>] MetaTitlePageList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_missing_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_missing'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitlePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_missing_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta title missing issue
    # Get historical occurrences of meta title missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_title_missing_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_missing_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta title missing issue
    # Get historical occurrences of meta title missing issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_missing_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_missing/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_missing_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_missing_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for multiple meta title issue
    # Get overall stats for multiple meta title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaTitleMultipleInfo]
    def sites_site_id_seov2_issues_meta_title_multiple_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_multiple_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for multiple meta title issue
    # Get overall stats for multiple meta title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaTitleMultipleInfo, Integer, Hash)>] MetaTitleMultipleInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_multiple_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_multiple/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleMultipleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_multiple_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multiple meta title issue
    # Get all pages with multiple meta titles
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [MultipleMetaTitlePageList]
    def sites_site_id_seov2_issues_meta_title_multiple_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_multiple_get_with_http_info(site_id, opts)
      data
    end

    # Get multiple meta title issue
    # Get all pages with multiple meta titles
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(MultipleMetaTitlePageList, Integer, Hash)>] MultipleMetaTitlePageList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_multiple_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_multiple'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MultipleMetaTitlePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_multiple_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences for multiple meta title issue
    # Get historical occurrences for multiple meta title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_title_multiple_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_multiple_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences for multiple meta title issue
    # Get historical occurrences for multiple meta title issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_multiple_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_multiple/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_multiple_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_multiple_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for meta title too short issue
    # Get overall stats for meta title too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MetaTitleTooShortInfo]
    def sites_site_id_seov2_issues_meta_title_short_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_short_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for meta title too short issue
    # Get overall stats for meta title too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MetaTitleTooShortInfo, Integer, Hash)>] MetaTitleTooShortInfo data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_short_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_short_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_short/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleTooShortInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_short_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_short_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get meta title too short issue
    # Get all pages with meta titles that are too short
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [MetaTitleValueList]
    def sites_site_id_seov2_issues_meta_title_short_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_short_get_with_http_info(site_id, opts)
      data
    end

    # Get meta title too short issue
    # Get all pages with meta titles that are too short
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(MetaTitleValueList, Integer, Hash)>] MetaTitleValueList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_short_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_short_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_short'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaTitleValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_short_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_short_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of meta title too short issue
    # Get historical occurrences of meta title too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_meta_title_short_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_meta_title_short_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of meta title too short issue
    # Get historical occurrences of meta title too short issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_meta_title_short_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_meta_title_short_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_meta_title_short_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/meta_title_short/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_meta_title_short_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_meta_title_short_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for missing h1 issue
    # Get overall stats for missing h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [H1MissingInfo]
    def sites_site_id_seov2_issues_missing_h1_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_missing_h1_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for missing h1 issue
    # Get overall stats for missing h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(H1MissingInfo, Integer, Hash)>] H1MissingInfo data, response status code and response headers
    def sites_site_id_seov2_issues_missing_h1_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_missing_h1_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/missing_h1/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'H1MissingInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_missing_h1_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_missing_h1_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get missing h1 issue
    # Get all pages without a h1
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [H1IssuePageList]
    def sites_site_id_seov2_issues_missing_h1_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_missing_h1_get_with_http_info(site_id, opts)
      data
    end

    # Get missing h1 issue
    # Get all pages without a h1
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(H1IssuePageList, Integer, Hash)>] H1IssuePageList data, response status code and response headers
    def sites_site_id_seov2_issues_missing_h1_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_missing_h1_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/missing_h1'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'H1IssuePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_missing_h1_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_missing_h1_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of missing h1 issue
    # Get historical occurrences of missing h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_missing_h1_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_missing_h1_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of missing h1 issue
    # Get historical occurrences of missing h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_missing_h1_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_missing_h1_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_missing_h1_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/missing_h1/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_missing_h1_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_missing_h1_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get missing robots issue
    # Get missing robots issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [RobotsTxtExist]
    def sites_site_id_seov2_issues_missing_robots_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_missing_robots_details_get_with_http_info(site_id, opts)
      data
    end

    # Get missing robots issue
    # Get missing robots issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RobotsTxtExist, Integer, Hash)>] RobotsTxtExist data, response status code and response headers
    def sites_site_id_seov2_issues_missing_robots_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_missing_robots_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_missing_robots_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/missing_robots/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RobotsTxtExist'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_missing_robots_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_missing_robots_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get missing sitemap issue
    # Get missing sitemap issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [SitemapExist]
    def sites_site_id_seov2_issues_missing_sitemap_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_missing_sitemap_details_get_with_http_info(site_id, opts)
      data
    end

    # Get missing sitemap issue
    # Get missing sitemap issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SitemapExist, Integer, Hash)>] SitemapExist data, response status code and response headers
    def sites_site_id_seov2_issues_missing_sitemap_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_missing_sitemap_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_missing_sitemap_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/missing_sitemap/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SitemapExist'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_missing_sitemap_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_missing_sitemap_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for misspellings on entry pages issue
    # Get overall stats for misspellings on entry pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MisspellingsInfo]
    def sites_site_id_seov2_issues_misspelling_entry_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_misspelling_entry_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for misspellings on entry pages issue
    # Get overall stats for misspellings on entry pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MisspellingsInfo, Integer, Hash)>] MisspellingsInfo data, response status code and response headers
    def sites_site_id_seov2_issues_misspelling_entry_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/misspelling_entry_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MisspellingsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_misspelling_entry_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get misspellings on entry pages issue
    # Get all entry pages with a misspelling
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [MisspellingList]
    def sites_site_id_seov2_issues_misspelling_entry_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_misspelling_entry_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get misspellings on entry pages issue
    # Get all entry pages with a misspelling
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(MisspellingList, Integer, Hash)>] MisspellingList data, response status code and response headers
    def sites_site_id_seov2_issues_misspelling_entry_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/misspelling_entry_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MisspellingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_misspelling_entry_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of misspelling on entry pages issue
    # Get historical occurrences of misspelling on entry pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_misspelling_entry_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_misspelling_entry_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of misspelling on entry pages issue
    # Get historical occurrences of misspelling on entry pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_misspelling_entry_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/misspelling_entry_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_misspelling_entry_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_misspelling_entry_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for misspellings issue
    # Get overall stats for misspellings issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [MisspellingsInfo]
    def sites_site_id_seov2_issues_misspellings_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_misspellings_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for misspellings issue
    # Get overall stats for misspellings issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(MisspellingsInfo, Integer, Hash)>] MisspellingsInfo data, response status code and response headers
    def sites_site_id_seov2_issues_misspellings_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_misspellings_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/misspellings/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MisspellingsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_misspellings_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_misspellings_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get misspellings issue
    # Get all misspellings found on the website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [MisspellingList]
    def sites_site_id_seov2_issues_misspellings_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_misspellings_get_with_http_info(site_id, opts)
      data
    end

    # Get misspellings issue
    # Get all misspellings found on the website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(MisspellingList, Integer, Hash)>] MisspellingList data, response status code and response headers
    def sites_site_id_seov2_issues_misspellings_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_misspellings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/misspellings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MisspellingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of misspelling issue
    # Get historical occurrences of misspelling issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_misspellings_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_misspellings_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of misspelling issue
    # Get historical occurrences of misspelling issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_misspellings_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_misspellings_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_misspellings_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/misspellings/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_misspellings_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_misspellings_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mobile friendly issue
    # Get mobile friendly issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [MobileFriendly]
    def sites_site_id_seov2_issues_mobile_friendly_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_mobile_friendly_details_get_with_http_info(site_id, opts)
      data
    end

    # Get mobile friendly issue
    # Get mobile friendly issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileFriendly, Integer, Hash)>] MobileFriendly data, response status code and response headers
    def sites_site_id_seov2_issues_mobile_friendly_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_mobile_friendly_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_mobile_friendly_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/mobile_friendly/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileFriendly'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_mobile_friendly_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_mobile_friendly_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mobile speed issue
    # Get mobile speed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [MobileSpeed]
    def sites_site_id_seov2_issues_mobile_speed_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_mobile_speed_details_get_with_http_info(site_id, opts)
      data
    end

    # Get mobile speed issue
    # Get mobile speed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileSpeed, Integer, Hash)>] MobileSpeed data, response status code and response headers
    def sites_site_id_seov2_issues_mobile_speed_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_mobile_speed_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_mobile_speed_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/mobile_speed/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileSpeed'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_mobile_speed_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_mobile_speed_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the mobile speed score historically
    # Get the mobile speed score historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [MobileSpeedHistoryItemList]
    def sites_site_id_seov2_issues_mobile_speed_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_mobile_speed_history_get_with_http_info(site_id, opts)
      data
    end

    # Get the mobile speed score historically
    # Get the mobile speed score historically
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(MobileSpeedHistoryItemList, Integer, Hash)>] MobileSpeedHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_mobile_speed_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_mobile_speed_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_mobile_speed_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_mobile_speed_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_mobile_speed_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_mobile_speed_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/mobile_speed/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileSpeedHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_mobile_speed_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_mobile_speed_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mobile viewport issue
    # Get mobile viewport issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [MobileViewport]
    def sites_site_id_seov2_issues_mobile_viewport_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_mobile_viewport_details_get_with_http_info(site_id, opts)
      data
    end

    # Get mobile viewport issue
    # Get mobile viewport issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileViewport, Integer, Hash)>] MobileViewport data, response status code and response headers
    def sites_site_id_seov2_issues_mobile_viewport_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_mobile_viewport_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_mobile_viewport_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/mobile_viewport/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileViewport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_mobile_viewport_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_mobile_viewport_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for multiple h1 issue
    # Get overall stats for multiple h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [H1MultipleInfo]
    def sites_site_id_seov2_issues_multiple_h1_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_multiple_h1_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for multiple h1 issue
    # Get overall stats for multiple h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(H1MultipleInfo, Integer, Hash)>] H1MultipleInfo data, response status code and response headers
    def sites_site_id_seov2_issues_multiple_h1_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_multiple_h1_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/multiple_h1/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'H1MultipleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_multiple_h1_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_multiple_h1_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multiple h1 issue
    # Get all pages with multiple h1s
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [H1IssuePageList]
    def sites_site_id_seov2_issues_multiple_h1_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_multiple_h1_get_with_http_info(site_id, opts)
      data
    end

    # Get multiple h1 issue
    # Get all pages with multiple h1s
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(H1IssuePageList, Integer, Hash)>] H1IssuePageList data, response status code and response headers
    def sites_site_id_seov2_issues_multiple_h1_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_multiple_h1_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/multiple_h1'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'H1IssuePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_multiple_h1_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_multiple_h1_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences for multiple h1 issue
    # Get historical occurrences for multiple h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_multiple_h1_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_multiple_h1_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences for multiple h1 issue
    # Get historical occurrences for multiple h1 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_multiple_h1_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_multiple_h1_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_multiple_h1_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/multiple_h1/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_multiple_h1_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_multiple_h1_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for navigation depth issue
    # Get overall stats for navigation depth issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithHighNavigationDepthInfo]
    def sites_site_id_seov2_issues_navigation_depth_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_navigation_depth_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for navigation depth issue
    # Get overall stats for navigation depth issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithHighNavigationDepthInfo, Integer, Hash)>] PagesWithHighNavigationDepthInfo data, response status code and response headers
    def sites_site_id_seov2_issues_navigation_depth_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_navigation_depth_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/navigation_depth/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithHighNavigationDepthInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_navigation_depth_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_navigation_depth_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get navigation depth issue
    # Get all pages with high navigation depth
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithHighNavigationDepthList]
    def sites_site_id_seov2_issues_navigation_depth_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_navigation_depth_get_with_http_info(site_id, opts)
      data
    end

    # Get navigation depth issue
    # Get all pages with high navigation depth
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithHighNavigationDepthList, Integer, Hash)>] PageWithHighNavigationDepthList data, response status code and response headers
    def sites_site_id_seov2_issues_navigation_depth_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_navigation_depth_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/navigation_depth'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithHighNavigationDepthList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_navigation_depth_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_navigation_depth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of navigation depth issue
    # Get historical occurrences of navigation depth issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_navigation_depth_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_navigation_depth_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of navigation depth issue
    # Get historical occurrences of navigation depth issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_navigation_depth_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_navigation_depth_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_navigation_depth_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/navigation_depth/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_navigation_depth_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_navigation_depth_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get new pages issue
    # Get new pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [NewPagesInfo]
    def sites_site_id_seov2_issues_new_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_new_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get new pages issue
    # Get new pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(NewPagesInfo, Integer, Hash)>] NewPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_new_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_new_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_new_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/new_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NewPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_new_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_new_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of new pages issue
    # Get historical occurrences of new pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_new_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_new_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of new pages issue
    # Get historical occurrences of new pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_new_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_new_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_new_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_new_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_new_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_new_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/new_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_new_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_new_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for nofollow pages issue
    # Get overall stats for nofollow pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [NoFollowPagesInfo]
    def sites_site_id_seov2_issues_nofollow_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_nofollow_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for nofollow pages issue
    # Get overall stats for nofollow pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(NoFollowPagesInfo, Integer, Hash)>] NoFollowPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_nofollow_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/nofollow_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NoFollowPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_nofollow_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get nofollow pages issue
    # Get all pages with a nofollow tag
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [NoFollowPageList]
    def sites_site_id_seov2_issues_nofollow_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_nofollow_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get nofollow pages issue
    # Get all pages with a nofollow tag
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(NoFollowPageList, Integer, Hash)>] NoFollowPageList data, response status code and response headers
    def sites_site_id_seov2_issues_nofollow_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/nofollow_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NoFollowPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_nofollow_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of nofollow pages issue
    # Get historical occurrences of nofollow pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_nofollow_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_nofollow_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of nofollow pages issue
    # Get historical occurrences of nofollow pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_nofollow_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/nofollow_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_nofollow_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_nofollow_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for noindex pages issue
    # Get overall stats for noindex pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [NoIndexPagesInfo]
    def sites_site_id_seov2_issues_noindex_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_noindex_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for noindex pages issue
    # Get overall stats for noindex pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(NoIndexPagesInfo, Integer, Hash)>] NoIndexPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_noindex_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_noindex_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/noindex_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NoIndexPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_noindex_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_noindex_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get noindex pages
    # Get all pages with a noindex tag
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [NoIndexPageList]
    def sites_site_id_seov2_issues_noindex_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_noindex_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get noindex pages
    # Get all pages with a noindex tag
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(NoIndexPageList, Integer, Hash)>] NoIndexPageList data, response status code and response headers
    def sites_site_id_seov2_issues_noindex_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_noindex_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/noindex_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NoIndexPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_noindex_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_noindex_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of noindex pages issue
    # Get historical occurrences of noindex pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_noindex_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_noindex_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of noindex pages issue
    # Get historical occurrences of noindex pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_noindex_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_noindex_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_noindex_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/noindex_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_noindex_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_noindex_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for open graph tag pages issue
    # Get overall stats for open graph tag pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [OpenGraphTagsPagesInfo]
    def sites_site_id_seov2_issues_open_graph_tag_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_open_graph_tag_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for open graph tag pages issue
    # Get overall stats for open graph tag pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(OpenGraphTagsPagesInfo, Integer, Hash)>] OpenGraphTagsPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_open_graph_tag_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/open_graph_tag_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OpenGraphTagsPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_open_graph_tag_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get open graph tag pages issue
    # Get all pages without open graph tags
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [OpenGraphTagsPageList]
    def sites_site_id_seov2_issues_open_graph_tag_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_open_graph_tag_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get open graph tag pages issue
    # Get all pages without open graph tags
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(OpenGraphTagsPageList, Integer, Hash)>] OpenGraphTagsPageList data, response status code and response headers
    def sites_site_id_seov2_issues_open_graph_tag_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/open_graph_tag_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OpenGraphTagsPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_open_graph_tag_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of open graph tag pages issue
    # Get historical occurrences of open graph tag pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_open_graph_tag_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_open_graph_tag_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of open graph tag pages issue
    # Get historical occurrences of open graph tag pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_open_graph_tag_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/open_graph_tag_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_open_graph_tag_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_open_graph_tag_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for page size issue
    # Get overall stats for page size issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PageSizeInfo]
    def sites_site_id_seov2_issues_page_size_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_page_size_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for page size issue
    # Get overall stats for page size issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PageSizeInfo, Integer, Hash)>] PageSizeInfo data, response status code and response headers
    def sites_site_id_seov2_issues_page_size_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_page_size_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_page_size_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/page_size/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageSizeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_page_size_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_page_size_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get page size issue
    # Get all pages with a size over 1 mb
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageTooLargeList]
    def sites_site_id_seov2_issues_page_size_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_page_size_get_with_http_info(site_id, opts)
      data
    end

    # Get page size issue
    # Get all pages with a size over 1 mb
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageTooLargeList, Integer, Hash)>] PageTooLargeList data, response status code and response headers
    def sites_site_id_seov2_issues_page_size_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_page_size_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_page_size_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_page_size_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_page_size_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_page_size_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/page_size'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageTooLargeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_page_size_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_page_size_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of page size issue
    # Get historical occurrences of page size issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_page_size_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_page_size_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of page size issue
    # Get historical occurrences of page size issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_page_size_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_page_size_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_page_size_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_page_size_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_page_size_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_page_size_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/page_size/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_page_size_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_page_size_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for pages with broken links issue
    # Get overall stats for pages with broken links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithBrokenSeoLinksInfo]
    def sites_site_id_seov2_issues_pages_with_broken_links_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_broken_links_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for pages with broken links issue
    # Get overall stats for pages with broken links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithBrokenSeoLinksInfo, Integer, Hash)>] PagesWithBrokenSeoLinksInfo data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_broken_links_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_broken_links/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithBrokenSeoLinksInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_broken_links_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with broken links issue
    # Get all pages with a broken link
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithBrokenSeoLinkList]
    def sites_site_id_seov2_issues_pages_with_broken_links_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_broken_links_get_with_http_info(site_id, opts)
      data
    end

    # Get pages with broken links issue
    # Get all pages with a broken link
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithBrokenSeoLinkList, Integer, Hash)>] PageWithBrokenSeoLinkList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_broken_links_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_broken_links'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithBrokenSeoLinkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_broken_links_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of page with broken links issue
    # Get historical occurrences of page with broken links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_pages_with_broken_links_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_broken_links_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of page with broken links issue
    # Get historical occurrences of page with broken links issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_broken_links_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_broken_links/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_broken_links_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_broken_links_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for pages with frames issue
    # Get overall stats for pages with frames issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithFramesInfo]
    def sites_site_id_seov2_issues_pages_with_frames_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_frames_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for pages with frames issue
    # Get overall stats for pages with frames issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithFramesInfo, Integer, Hash)>] PagesWithFramesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_frames_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_frames/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithFramesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_frames_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with frames issue
    # Get all pages with a frame or iframe
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithFramesList]
    def sites_site_id_seov2_issues_pages_with_frames_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_frames_get_with_http_info(site_id, opts)
      data
    end

    # Get pages with frames issue
    # Get all pages with a frame or iframe
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithFramesList, Integer, Hash)>] PageWithFramesList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_frames_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_frames'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithFramesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_frames_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of page with frames issue
    # Get historical occurrences of page with frames issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_pages_with_frames_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_frames_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of page with frames issue
    # Get historical occurrences of page with frames issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_frames_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_frames/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_frames_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_frames_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for pages with images over 1mb issue
    # Get overall stats for pages with images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithImagesLargerThan1MbInfo]
    def sites_site_id_seov2_issues_pages_with_images1mb_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_images1mb_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for pages with images over 1mb issue
    # Get overall stats for pages with images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithImagesLargerThan1MbInfo, Integer, Hash)>] PagesWithImagesLargerThan1MbInfo data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_images1mb_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_images_1mb/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithImagesLargerThan1MbInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_images1mb_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with images over 1mb issue
    # Get all pages with an image over 1 mb
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithImagesLargerThan1MbList]
    def sites_site_id_seov2_issues_pages_with_images1mb_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_images1mb_get_with_http_info(site_id, opts)
      data
    end

    # Get pages with images over 1mb issue
    # Get all pages with an image over 1 mb
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithImagesLargerThan1MbList, Integer, Hash)>] PageWithImagesLargerThan1MbList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_images1mb_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_images_1mb'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithImagesLargerThan1MbList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_images1mb_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of page with images over 1mb issue
    # Get historical occurrences of page with images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_pages_with_images1mb_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_images1mb_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of page with images over 1mb issue
    # Get historical occurrences of page with images over 1mb issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_images1mb_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_images_1mb/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_images1mb_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_images1mb_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for pages with misspellings issue
    # Get overall stats for pages with misspellings issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithMisspellingInfo]
    def sites_site_id_seov2_issues_pages_with_misspellings_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_misspellings_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for pages with misspellings issue
    # Get overall stats for pages with misspellings issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithMisspellingInfo, Integer, Hash)>] PagesWithMisspellingInfo data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_misspellings_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_misspellings/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithMisspellingInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_misspellings_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with misspellings issue
    # Get all pages with a misspelling
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithMisspellingList]
    def sites_site_id_seov2_issues_pages_with_misspellings_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_misspellings_get_with_http_info(site_id, opts)
      data
    end

    # Get pages with misspellings issue
    # Get all pages with a misspelling
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithMisspellingList, Integer, Hash)>] PageWithMisspellingList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_misspellings_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_misspellings'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithMisspellingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_misspellings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of page with misspellings issue
    # Get historical occurrences of page with misspellings issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_pages_with_misspellings_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_pages_with_misspellings_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of page with misspellings issue
    # Get historical occurrences of page with misspellings issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_pages_with_misspellings_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/pages_with_misspellings/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_pages_with_misspellings_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_pages_with_misspellings_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for parameterized urls issue
    # Get overall stats for parameterized urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesWithParametersInfo]
    def sites_site_id_seov2_issues_parameterized_urls_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_parameterized_urls_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for parameterized urls issue
    # Get overall stats for parameterized urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesWithParametersInfo, Integer, Hash)>] PagesWithParametersInfo data, response status code and response headers
    def sites_site_id_seov2_issues_parameterized_urls_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/parameterized_urls/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesWithParametersInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_parameterized_urls_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get parameterized urls issue
    # Get all pages with a parameterized url
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithParameterList]
    def sites_site_id_seov2_issues_parameterized_urls_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_parameterized_urls_get_with_http_info(site_id, opts)
      data
    end

    # Get parameterized urls issue
    # Get all pages with a parameterized url
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithParameterList, Integer, Hash)>] PageWithParameterList data, response status code and response headers
    def sites_site_id_seov2_issues_parameterized_urls_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/parameterized_urls'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithParameterList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_parameterized_urls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of parameterized urls issue
    # Get historical occurrences of parameterized urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_parameterized_urls_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_parameterized_urls_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of parameterized urls issue
    # Get historical occurrences of parameterized urls issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_parameterized_urls_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/parameterized_urls/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_parameterized_urls_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_parameterized_urls_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for readability page score issue
    # Get overall stats for readability page score issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [ReadabilityScorePagesInfo]
    def sites_site_id_seov2_issues_readability_pages_score_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_readability_pages_score_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for readability page score issue
    # Get overall stats for readability page score issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(ReadabilityScorePagesInfo, Integer, Hash)>] ReadabilityScorePagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_readability_pages_score_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/readability_pages_score/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReadabilityScorePagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_readability_pages_score_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get readability pages score issue
    # Get all pages with a readability score less than 70
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [ReadabilityScorePageList]
    def sites_site_id_seov2_issues_readability_pages_score_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_readability_pages_score_get_with_http_info(site_id, opts)
      data
    end

    # Get readability pages score issue
    # Get all pages with a readability score less than 70
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(ReadabilityScorePageList, Integer, Hash)>] ReadabilityScorePageList data, response status code and response headers
    def sites_site_id_seov2_issues_readability_pages_score_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/readability_pages_score'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReadabilityScorePageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_readability_pages_score_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of readability pages score issue
    # Get historical occurrences of readability pages score issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_readability_pages_score_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_readability_pages_score_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of readability pages score issue
    # Get historical occurrences of readability pages score issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_readability_pages_score_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/readability_pages_score/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_readability_pages_score_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_readability_pages_score_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for redirect 301 issue
    # Get overall stats for redirect 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Redirect301PagesInfo]
    def sites_site_id_seov2_issues_redirect301_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect301_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for redirect 301 issue
    # Get overall stats for redirect 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(Redirect301PagesInfo, Integer, Hash)>] Redirect301PagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_redirect301_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect301_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_301/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Redirect301PagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect301_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect301_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirect 301 issue
    # Get all pages with a 301 redirect
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Redirect301PageList]
    def sites_site_id_seov2_issues_redirect301_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect301_get_with_http_info(site_id, opts)
      data
    end

    # Get redirect 301 issue
    # Get all pages with a 301 redirect
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(Redirect301PageList, Integer, Hash)>] Redirect301PageList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect301_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect301_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_301'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Redirect301PageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect301_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect301_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of redirect 301 issue
    # Get historical occurrences of redirect 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_redirect301_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect301_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of redirect 301 issue
    # Get historical occurrences of redirect 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect301_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect301_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect301_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_301/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect301_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect301_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for redirect chain issue
    # Get overall stats for redirect chain issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [RedirectChainPagesInfo]
    def sites_site_id_seov2_issues_redirect_chain_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_chain_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for redirect chain issue
    # Get overall stats for redirect chain issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(RedirectChainPagesInfo, Integer, Hash)>] RedirectChainPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_chain_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_chain_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_chain/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectChainPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_chain_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_chain_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirect chain issue
    # Get all pages with a redirect chain
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [RedirectChainPageList]
    def sites_site_id_seov2_issues_redirect_chain_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_chain_get_with_http_info(site_id, opts)
      data
    end

    # Get redirect chain issue
    # Get all pages with a redirect chain
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(RedirectChainPageList, Integer, Hash)>] RedirectChainPageList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_chain_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_chain_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_chain'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectChainPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_chain_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_chain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of redirect chain issue
    # Get historical occurrences of redirect chain issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_redirect_chain_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_chain_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of redirect chain issue
    # Get historical occurrences of redirect chain issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_chain_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_chain_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_chain_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_chain/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_chain_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_chain_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for redirect mixed issue
    # Get overall stats for redirect mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [RedirectMixedPagesInfo]
    def sites_site_id_seov2_issues_redirect_mixed_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_mixed_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for redirect mixed issue
    # Get overall stats for redirect mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(RedirectMixedPagesInfo, Integer, Hash)>] RedirectMixedPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_mixed_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_mixed/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectMixedPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_mixed_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirect mixed issue
    # Get all redirect mixed pages
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [RedirectMixedPageList]
    def sites_site_id_seov2_issues_redirect_mixed_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_mixed_get_with_http_info(site_id, opts)
      data
    end

    # Get redirect mixed issue
    # Get all redirect mixed pages
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(RedirectMixedPageList, Integer, Hash)>] RedirectMixedPageList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_mixed_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_mixed'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectMixedPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_mixed_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of redirect mixed issue
    # Get historical occurrences of redirect mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_redirect_mixed_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_mixed_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of redirect mixed issue
    # Get historical occurrences of redirect mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_mixed_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_mixed/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_mixed_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_mixed_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for redirect not 301 issue
    # Get overall stats for redirect not 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [RedirectNot301PagesInfo]
    def sites_site_id_seov2_issues_redirect_not301_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_not301_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for redirect not 301 issue
    # Get overall stats for redirect not 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(RedirectNot301PagesInfo, Integer, Hash)>] RedirectNot301PagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_not301_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_not301_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_not_301/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectNot301PagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_not301_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_not301_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirect not 301 issue
    # Get all pages with a redirect that is not 301
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [RedirectNot301PageList]
    def sites_site_id_seov2_issues_redirect_not301_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_not301_get_with_http_info(site_id, opts)
      data
    end

    # Get redirect not 301 issue
    # Get all pages with a redirect that is not 301
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(RedirectNot301PageList, Integer, Hash)>] RedirectNot301PageList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_not301_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_not301_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_not_301'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectNot301PageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_not301_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_not301_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of redirect not 301 issue
    # Get historical occurrences of redirect not 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_redirect_not301_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_redirect_not301_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of redirect not 301 issue
    # Get historical occurrences of redirect not 301 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_redirect_not301_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_redirect_not301_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_redirect_not301_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/redirect_not_301/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_redirect_not301_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_redirect_not301_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for sitemap excluded pages issue
    # Get overall stats for sitemap excluded pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [PagesInSitemapInfo]
    def sites_site_id_seov2_issues_sitemap_excluded_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_sitemap_excluded_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for sitemap excluded pages issue
    # Get overall stats for sitemap excluded pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(PagesInSitemapInfo, Integer, Hash)>] PagesInSitemapInfo data, response status code and response headers
    def sites_site_id_seov2_issues_sitemap_excluded_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/sitemap_excluded_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagesInSitemapInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_sitemap_excluded_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sitemap excluded pages issue 
    # Get all pages not included in the sitemap
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageNotInSitemapList]
    def sites_site_id_seov2_issues_sitemap_excluded_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_sitemap_excluded_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get sitemap excluded pages issue 
    # Get all pages not included in the sitemap
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageNotInSitemapList, Integer, Hash)>] PageNotInSitemapList data, response status code and response headers
    def sites_site_id_seov2_issues_sitemap_excluded_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/sitemap_excluded_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageNotInSitemapList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_sitemap_excluded_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of sitemap excluded pages issue
    # Get historical occurrences of sitemap excluded pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_sitemap_excluded_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_sitemap_excluded_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of sitemap excluded pages issue
    # Get historical occurrences of sitemap excluded pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_sitemap_excluded_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/sitemap_excluded_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_sitemap_excluded_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_sitemap_excluded_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for ssl enabled issue
    # Get overall stats for ssl enabled issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [SslEnabledPagesInfo]
    def sites_site_id_seov2_issues_ssl_enabled_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_ssl_enabled_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for ssl enabled issue
    # Get overall stats for ssl enabled issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(SslEnabledPagesInfo, Integer, Hash)>] SslEnabledPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_ssl_enabled_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/ssl_enabled/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SslEnabledPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_ssl_enabled_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ssl enabled issue
    # Get all pages without ssl
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SslEnabledPageList]
    def sites_site_id_seov2_issues_ssl_enabled_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_ssl_enabled_get_with_http_info(site_id, opts)
      data
    end

    # Get ssl enabled issue
    # Get all pages without ssl
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SslEnabledPageList, Integer, Hash)>] SslEnabledPageList data, response status code and response headers
    def sites_site_id_seov2_issues_ssl_enabled_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/ssl_enabled'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SslEnabledPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_ssl_enabled_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of ssl enabled issue
    # Get historical occurrences of ssl enabled issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_ssl_enabled_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_ssl_enabled_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of ssl enabled issue
    # Get historical occurrences of ssl enabled issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_ssl_enabled_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/ssl_enabled/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_ssl_enabled_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_ssl_enabled_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for ssl mixed issue
    # Get overall stats for ssl mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [SslMixedContentPagesInfo]
    def sites_site_id_seov2_issues_ssl_mixed_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_ssl_mixed_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for ssl mixed issue
    # Get overall stats for ssl mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(SslMixedContentPagesInfo, Integer, Hash)>] SslMixedContentPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_ssl_mixed_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/ssl_mixed/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SslMixedContentPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_ssl_mixed_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ssl mixed issue
    # Get all pages linking to a http link or pulling in a http resource
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SslMixedContentPageList]
    def sites_site_id_seov2_issues_ssl_mixed_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_ssl_mixed_get_with_http_info(site_id, opts)
      data
    end

    # Get ssl mixed issue
    # Get all pages linking to a http link or pulling in a http resource
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SslMixedContentPageList, Integer, Hash)>] SslMixedContentPageList data, response status code and response headers
    def sites_site_id_seov2_issues_ssl_mixed_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/ssl_mixed'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SslMixedContentPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_ssl_mixed_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of ssl mixed issue
    # Get historical occurrences of ssl mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_ssl_mixed_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_ssl_mixed_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of ssl mixed issue
    # Get historical occurrences of ssl mixed issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_ssl_mixed_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/ssl_mixed/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_ssl_mixed_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_ssl_mixed_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for status code 404 issue
    # Get overall stats for status code 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [LinksStatusCode404Info]
    def sites_site_id_seov2_issues_status_code404_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code404_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for status code 404 issue
    # Get overall stats for status code 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(LinksStatusCode404Info, Integer, Hash)>] LinksStatusCode404Info data, response status code and response headers
    def sites_site_id_seov2_issues_status_code404_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code404_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_404/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinksStatusCode404Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code404_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code404_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status code 404 issue
    # Get all links with status code 404
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [LinkStatusCode404List]
    def sites_site_id_seov2_issues_status_code404_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code404_get_with_http_info(site_id, opts)
      data
    end

    # Get status code 404 issue
    # Get all links with status code 404
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(LinkStatusCode404List, Integer, Hash)>] LinkStatusCode404List data, response status code and response headers
    def sites_site_id_seov2_issues_status_code404_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code404_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_404'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkStatusCode404List'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code404_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code404_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of status code 404 issue
    # Get historical occurrences of status code 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_status_code404_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code404_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of status code 404 issue
    # Get historical occurrences of status code 404 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_status_code404_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code404_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code404_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_404/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code404_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code404_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for status code 4xx issue
    # Get overall stats for status code 4xx issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [LinksStatusCode4xxInfo]
    def sites_site_id_seov2_issues_status_code4xxs_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code4xxs_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for status code 4xx issue
    # Get overall stats for status code 4xx issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(LinksStatusCode4xxInfo, Integer, Hash)>] LinksStatusCode4xxInfo data, response status code and response headers
    def sites_site_id_seov2_issues_status_code4xxs_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_4xxs/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinksStatusCode4xxInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code4xxs_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status code 4xx issue
    # Get all links with status code 4xx
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [LinkStatusCode4xxList]
    def sites_site_id_seov2_issues_status_code4xxs_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code4xxs_get_with_http_info(site_id, opts)
      data
    end

    # Get status code 4xx issue
    # Get all links with status code 4xx
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(LinkStatusCode4xxList, Integer, Hash)>] LinkStatusCode4xxList data, response status code and response headers
    def sites_site_id_seov2_issues_status_code4xxs_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_4xxs'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkStatusCode4xxList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code4xxs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of status code 4xx issue
    # Get historical occurrences of status code 4xx issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_status_code4xxs_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code4xxs_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of status code 4xx issue
    # Get historical occurrences of status code 4xx issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_status_code4xxs_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_4xxs/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code4xxs_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code4xxs_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for status code 500 issue
    # Get overall stats for status code 500 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [LinksStatusCode500Info]
    def sites_site_id_seov2_issues_status_code500s_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code500s_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for status code 500 issue
    # Get overall stats for status code 500 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(LinksStatusCode500Info, Integer, Hash)>] LinksStatusCode500Info data, response status code and response headers
    def sites_site_id_seov2_issues_status_code500s_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code500s_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_500s/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinksStatusCode500Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code500s_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code500s_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status code 500 issue
    # Get all links with status code 500
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [LinkStatusCode500List]
    def sites_site_id_seov2_issues_status_code500s_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code500s_get_with_http_info(site_id, opts)
      data
    end

    # Get status code 500 issue
    # Get all links with status code 500
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(LinkStatusCode500List, Integer, Hash)>] LinkStatusCode500List data, response status code and response headers
    def sites_site_id_seov2_issues_status_code500s_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code500s_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_500s'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkStatusCode500List'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code500s_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code500s_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of status code 500 issue
    # Get historical occurrences of status code 500 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_status_code500s_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_status_code500s_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of status code 500 issue
    # Get historical occurrences of status code 500 issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_status_code500s_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_status_code500s_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_status_code500s_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/status_code_500s/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_status_code500s_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_status_code500s_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for structured markup pages issue
    # Get overall stats for structured markup pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [StructuredDataMarkupPagesInfo]
    def sites_site_id_seov2_issues_structured_markup_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_structured_markup_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for structured markup pages issue
    # Get overall stats for structured markup pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(StructuredDataMarkupPagesInfo, Integer, Hash)>] StructuredDataMarkupPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_structured_markup_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/structured_markup_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StructuredDataMarkupPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_structured_markup_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get structured markup pages issue
    # Get structured markup pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [StructuredDataMarkupPageList]
    def sites_site_id_seov2_issues_structured_markup_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_structured_markup_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get structured markup pages issue
    # Get structured markup pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(StructuredDataMarkupPageList, Integer, Hash)>] StructuredDataMarkupPageList data, response status code and response headers
    def sites_site_id_seov2_issues_structured_markup_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/structured_markup_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StructuredDataMarkupPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_structured_markup_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of structured markup pages issue
    # Get historical occurrences of structured markup pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_structured_markup_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_structured_markup_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of structured markup pages issue
    # Get historical occurrences of structured markup pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_structured_markup_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/structured_markup_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_structured_markup_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_structured_markup_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get touchscreen ready issue
    # Get touchscreen ready issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [TouchscreenReady]
    def sites_site_id_seov2_issues_touchscreen_ready_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_touchscreen_ready_details_get_with_http_info(site_id, opts)
      data
    end

    # Get touchscreen ready issue
    # Get touchscreen ready issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TouchscreenReady, Integer, Hash)>] TouchscreenReady data, response status code and response headers
    def sites_site_id_seov2_issues_touchscreen_ready_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_touchscreen_ready_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_touchscreen_ready_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/touchscreen_ready/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TouchscreenReady'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_touchscreen_ready_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_touchscreen_ready_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get unsafe domain issue
    # Get unsafe domain issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [UnsafeDomainSeo]
    def sites_site_id_seov2_issues_unsafe_domain_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_unsafe_domain_details_get_with_http_info(site_id, opts)
      data
    end

    # Get unsafe domain issue
    # Get unsafe domain issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnsafeDomainSeo, Integer, Hash)>] UnsafeDomainSeo data, response status code and response headers
    def sites_site_id_seov2_issues_unsafe_domain_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_unsafe_domain_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_unsafe_domain_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/unsafe_domain/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnsafeDomainSeo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_unsafe_domain_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_unsafe_domain_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for updated media issue
    # Get overall stats for updated media issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [UpdatedMediaInfo]
    def sites_site_id_seov2_issues_updated_media_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_updated_media_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for updated media issue
    # Get overall stats for updated media issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(UpdatedMediaInfo, Integer, Hash)>] UpdatedMediaInfo data, response status code and response headers
    def sites_site_id_seov2_issues_updated_media_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_updated_media_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/updated_media/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatedMediaInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_updated_media_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_updated_media_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get updated media issue
    # Get all media files not updated within the last year
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [NonUpdatedMediaList]
    def sites_site_id_seov2_issues_updated_media_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_updated_media_get_with_http_info(site_id, opts)
      data
    end

    # Get updated media issue
    # Get all media files not updated within the last year
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_id Id for specific page.
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(NonUpdatedMediaList, Integer, Hash)>] NonUpdatedMediaList data, response status code and response headers
    def sites_site_id_seov2_issues_updated_media_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_updated_media_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/updated_media'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonUpdatedMediaList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_updated_media_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_updated_media_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of updated media issue
    # Get historical occurrences of updated media issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_updated_media_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_updated_media_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of updated media issue
    # Get historical occurrences of updated media issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_updated_media_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_updated_media_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_media_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/updated_media/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_updated_media_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_updated_media_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for updated pages issue
    # Get overall stats for updated pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [NonUpdatedPagesInfo]
    def sites_site_id_seov2_issues_updated_pages_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_updated_pages_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for updated pages issue
    # Get overall stats for updated pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(NonUpdatedPagesInfo, Integer, Hash)>] NonUpdatedPagesInfo data, response status code and response headers
    def sites_site_id_seov2_issues_updated_pages_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_updated_pages_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/updated_pages/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonUpdatedPagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_updated_pages_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_updated_pages_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get updated pages issue
    # Get all pages not updated within the last year
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [NonUpdatedPageList]
    def sites_site_id_seov2_issues_updated_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_updated_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get updated pages issue
    # Get all pages not updated within the last year
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(NonUpdatedPageList, Integer, Hash)>] NonUpdatedPageList data, response status code and response headers
    def sites_site_id_seov2_issues_updated_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_updated_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/updated_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonUpdatedPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_updated_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_updated_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of updated pages issue
    # Get historical occurrences of updated pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_updated_pages_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_updated_pages_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of updated pages issue
    # Get historical occurrences of updated pages issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_updated_pages_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_updated_pages_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_updated_pages_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/updated_pages/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_updated_pages_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_updated_pages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for urls with underscore issue
    # Get overall stats for urls with underscore issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [UrlsWithUnderscoreInfo]
    def sites_site_id_seov2_issues_urls_with_underscore_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_urls_with_underscore_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for urls with underscore issue
    # Get overall stats for urls with underscore issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(UrlsWithUnderscoreInfo, Integer, Hash)>] UrlsWithUnderscoreInfo data, response status code and response headers
    def sites_site_id_seov2_issues_urls_with_underscore_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/urls_with_underscore/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UrlsWithUnderscoreInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_urls_with_underscore_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get urls with underscore issue
    # Get all pages with an url that has an underscore
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [UrlWithUnderscoreList]
    def sites_site_id_seov2_issues_urls_with_underscore_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_urls_with_underscore_get_with_http_info(site_id, opts)
      data
    end

    # Get urls with underscore issue
    # Get all pages with an url that has an underscore
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(UrlWithUnderscoreList, Integer, Hash)>] UrlWithUnderscoreList data, response status code and response headers
    def sites_site_id_seov2_issues_urls_with_underscore_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/urls_with_underscore'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UrlWithUnderscoreList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_urls_with_underscore_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of urls with underscore issue
    # Get historical occurrences of urls with underscore issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_urls_with_underscore_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_urls_with_underscore_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of urls with underscore issue
    # Get historical occurrences of urls with underscore issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_urls_with_underscore_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/urls_with_underscore/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_urls_with_underscore_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_urls_with_underscore_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall stats for words per page issue
    # Get overall stats for words per page issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [WordsPerPageInfo]
    def sites_site_id_seov2_issues_words_per_page_details_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_words_per_page_details_get_with_http_info(site_id, opts)
      data
    end

    # Get overall stats for words per page issue
    # Get overall stats for words per page issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @return [Array<(WordsPerPageInfo, Integer, Hash)>] WordsPerPageInfo data, response status code and response headers
    def sites_site_id_seov2_issues_words_per_page_details_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_words_per_page_details_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_details_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/words_per_page/details'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WordsPerPageInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_words_per_page_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_words_per_page_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get words per page issue
    # Get all pages with word count below 500
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithLessThan500WordsList]
    def sites_site_id_seov2_issues_words_per_page_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_words_per_page_get_with_http_info(site_id, opts)
      data
    end

    # Get words per page issue
    # Get all pages with word count below 500
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithLessThan500WordsList, Integer, Hash)>] PageWithLessThan500WordsList data, response status code and response headers
    def sites_site_id_seov2_issues_words_per_page_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_words_per_page_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/words_per_page'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithLessThan500WordsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_words_per_page_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_words_per_page_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get historical occurrences of words per page issue
    # Get historical occurrences of words per page issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueOccurenceHistoryItemList]
    def sites_site_id_seov2_issues_words_per_page_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_issues_words_per_page_history_get_with_http_info(site_id, opts)
      data
    end

    # Get historical occurrences of words per page issue
    # Get historical occurrences of words per page issue
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueOccurenceHistoryItemList, Integer, Hash)>] SeoIssueOccurenceHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_issues_words_per_page_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_issues_words_per_page_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_issues_words_per_page_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/issues/words_per_page/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueOccurenceHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_issues_words_per_page_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_issues_words_per_page_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get monitored keywords
    # Get all monitored keywords
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [KeywordMonitoringKeywordList]
    def sites_site_id_seov2_keywords_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_keywords_get_with_http_info(site_id, opts)
      data
    end

    # Get monitored keywords
    # Get all monitored keywords
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(KeywordMonitoringKeywordList, Integer, Hash)>] KeywordMonitoringKeywordList data, response status code and response headers
    def sites_site_id_seov2_keywords_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_keywords_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_keywords_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_keywords_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_keywords_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_keywords_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/keywords'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'activity_plan_id'] = opts[:'activity_plan_id'] if !opts[:'activity_plan_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordMonitoringKeywordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_keywords_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_keywords_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ranking pages for the keyword
    # Get your website's ranking pages for the keyword
    # @param site_id [Integer] Id for specific site.
    # @param keyword_id [Integer] Id for specific keyword
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [KeywordRankingList]
    def sites_site_id_seov2_keywords_keyword_id_ranking_pages_get(site_id, keyword_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_keywords_keyword_id_ranking_pages_get_with_http_info(site_id, keyword_id, opts)
      data
    end

    # Get ranking pages for the keyword
    # Get your website&#39;s ranking pages for the keyword
    # @param site_id [Integer] Id for specific site.
    # @param keyword_id [Integer] Id for specific keyword
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(KeywordRankingList, Integer, Hash)>] KeywordRankingList data, response status code and response headers
    def sites_site_id_seov2_keywords_keyword_id_ranking_pages_get_with_http_info(site_id, keyword_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get"
      end
      # verify the required parameter 'keyword_id' is set
      if @api_client.config.client_side_validation && keyword_id.nil?
        fail ArgumentError, "Missing the required parameter 'keyword_id' when calling SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/keywords/{keyword_id}/ranking_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'keyword_id' + '}', CGI.escape(keyword_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'activity_plan_id'] = opts[:'activity_plan_id'] if !opts[:'activity_plan_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KeywordRankingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_keywords_keyword_id_ranking_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_keywords_keyword_id_ranking_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SEO groups
    # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are returned.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [SeoGroupDetailsList]
    def sites_site_id_seov2_overview_groups_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_overview_groups_get_with_http_info(site_id, opts)
      data
    end

    # Get SEO groups
    # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are returned.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(SeoGroupDetailsList, Integer, Hash)>] SeoGroupDetailsList data, response status code and response headers
    def sites_site_id_seov2_overview_groups_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_overview_groups_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_overview_groups_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_overview_groups_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_overview_groups_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_overview_groups_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/overview/groups'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoGroupDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_overview_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_overview_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the SEO scores
    # Get the top category SEO scores for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page_id Id for specific page.
    # @return [SeoScoreDetails]
    def sites_site_id_seov2_overview_score_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_overview_score_get_with_http_info(site_id, opts)
      data
    end

    # Get the SEO scores
    # Get the top category SEO scores for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page_id Id for specific page.
    # @return [Array<(SeoScoreDetails, Integer, Hash)>] SeoScoreDetails data, response status code and response headers
    def sites_site_id_seov2_overview_score_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_overview_score_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_overview_score_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/overview/score'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page_id'] = opts[:'page_id'] if !opts[:'page_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoScoreDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_overview_score_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_overview_score_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the SEO scores historically
    # Get the top category SEO scores historically for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [SeoScoreHistoryItemList]
    def sites_site_id_seov2_overview_score_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_overview_score_history_get_with_http_info(site_id, opts)
      data
    end

    # Get the SEO scores historically
    # Get the top category SEO scores historically for your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(SeoScoreHistoryItemList, Integer, Hash)>] SeoScoreHistoryItemList data, response status code and response headers
    def sites_site_id_seov2_overview_score_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_overview_score_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_overview_score_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_overview_score_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_overview_score_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_overview_score_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/overview/score/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoScoreHistoryItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_overview_score_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_overview_score_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with issues
    # Get all pages found on your website with issues
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SeoRecommendationPageList]
    def sites_site_id_seov2_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get pages with issues
    # Get all pages found on your website with issues
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SeoRecommendationPageList, Integer, Hash)>] SeoRecommendationPageList data, response status code and response headers
    def sites_site_id_seov2_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoRecommendationPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issues for specific page
    # Get the SEO issues found for the specific page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category The category filter (default to 'none')
    # @option opts [String] :complexity The complexity filter (default to 'none')
    # @option opts [Boolean] :fixed The fixed filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [SeoIssueWithRecommendationList]
    def sites_site_id_seov2_pages_page_id_issues_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_pages_page_id_issues_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get issues for specific page
    # Get the SEO issues found for the specific page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category The category filter (default to 'none')
    # @option opts [String] :complexity The complexity filter (default to 'none')
    # @option opts [Boolean] :fixed The fixed filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(SeoIssueWithRecommendationList, Integer, Hash)>] SeoIssueWithRecommendationList data, response status code and response headers
    def sites_site_id_seov2_pages_page_id_issues_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get"
      end
      allowable_values = ["none", "technical", "content", "ux", "mobile"]
      if @api_client.config.client_side_validation && opts[:'category'] && !allowable_values.include?(opts[:'category'])
        fail ArgumentError, "invalid value for \"category\", must be one of #{allowable_values}"
      end
      allowable_values = ["none", "low", "medium", "high", "extreme"]
      if @api_client.config.client_side_validation && opts[:'complexity'] && !allowable_values.include?(opts[:'complexity'])
        fail ArgumentError, "invalid value for \"complexity\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/pages/{page_id}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'complexity'] = opts[:'complexity'] if !opts[:'complexity'].nil?
      query_params[:'fixed'] = opts[:'fixed'] if !opts[:'fixed'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoIssueWithRecommendationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_pages_page_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_pages_page_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get target pages for keywords
    # Get target pages for keywords on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [SeoRecommendationTargetPageList]
    def sites_site_id_seov2_target_pages_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_get_with_http_info(site_id, opts)
      data
    end

    # Get target pages for keywords
    # Get target pages for keywords on your website
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(SeoRecommendationTargetPageList, Integer, Hash)>] SeoRecommendationTargetPageList data, response status code and response headers
    def sites_site_id_seov2_target_pages_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeoRecommendationTargetPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get competing content issues for the target page
    # Get competing content issues for the target page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ContentOptimizationTargetUrlCompetingContentList]
    def sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get competing content issues for the target page
    # Get competing content issues for the target page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ContentOptimizationTargetUrlCompetingContentList, Integer, Hash)>] ContentOptimizationTargetUrlCompetingContentList data, response status code and response headers
    def sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages/pages/{page_id}/competing_content_issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationTargetUrlCompetingContentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the competing content issue type for the page
    # Get the competing content issue type for the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param type [String] The competing content type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keyword The keyword
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ContentOptimizationTargetUrlCompetingContentPageList]
    def sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get(site_id, page_id, type, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get_with_http_info(site_id, page_id, type, opts)
      data
    end

    # Get the competing content issue type for the page
    # Get the competing content issue type for the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param type [String] The competing content type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keyword The keyword
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ContentOptimizationTargetUrlCompetingContentPageList, Integer, Hash)>] ContentOptimizationTargetUrlCompetingContentPageList data, response status code and response headers
    def sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get_with_http_info(site_id, page_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get"
      end
      # verify enum value
      allowable_values = ["h1", "h2", "h3", "title", "meta_description"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages/pages/{page_id}/competing_content_issues/{type}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keyword'] = opts[:'keyword'] if !opts[:'keyword'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationTargetUrlCompetingContentPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_pages_page_id_competing_content_issues_type_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get keyword issues for the page
    # Get keyword issues for the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ContentOptimizationTargetUrlKeywordIssueList]
    def sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get keyword issues for the page
    # Get keyword issues for the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ContentOptimizationTargetUrlKeywordIssueList, Integer, Hash)>] ContentOptimizationTargetUrlKeywordIssueList data, response status code and response headers
    def sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages/pages/{page_id}/keyword_issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationTargetUrlKeywordIssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_pages_page_id_keyword_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get keyword occurrences for the page
    # Get keyword occurrences for the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ContentOptimizationTargetUrlOptimizationList]
    def sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get keyword occurrences for the page
    # Get keyword occurrences for the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ContentOptimizationTargetUrlOptimizationList, Integer, Hash)>] ContentOptimizationTargetUrlOptimizationList data, response status code and response headers
    def sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages/pages/{page_id}/keyword_occurrences'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationTargetUrlOptimizationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_pages_page_id_keyword_occurrences_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the keywords targeting the page
    # Get the keywords targeting the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ContentOptimizationTargetUrlKeywordList]
    def sites_site_id_seov2_target_pages_pages_page_id_keywords_get(site_id, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_pages_page_id_keywords_get_with_http_info(site_id, page_id, opts)
      data
    end

    # Get the keywords targeting the page
    # Get the keywords targeting the page
    # @param site_id [Integer] Id for specific site.
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ContentOptimizationTargetUrlKeywordList, Integer, Hash)>] ContentOptimizationTargetUrlKeywordList data, response status code and response headers
    def sites_site_id_seov2_target_pages_pages_page_id_keywords_get_with_http_info(site_id, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages/pages/{page_id}/keywords'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContentOptimizationTargetUrlKeywordList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_pages_page_id_keywords_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_pages_page_id_keywords_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overall statistics for target pages
    # Get overall statistics for target pages
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @return [TargetPagesIssuesHighlights]
    def sites_site_id_seov2_target_pages_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_seov2_target_pages_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get overall statistics for target pages
    # Get overall statistics for target pages
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activity_plan_id Id for specific activity plan
    # @return [Array<(TargetPagesIssuesHighlights, Integer, Hash)>] TargetPagesIssuesHighlights data, response status code and response headers
    def sites_site_id_seov2_target_pages_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SeoV2Api.sites_site_id_seov2_target_pages_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SeoV2Api.sites_site_id_seov2_target_pages_summary_get"
      end
      # resource path
      local_var_path = '/sites/{site_id}/seov2/target_pages/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'activity_plan_id'] = opts[:'activity_plan_id'] if !opts[:'activity_plan_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TargetPagesIssuesHighlights'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"SeoV2Api.sites_site_id_seov2_target_pages_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SeoV2Api#sites_site_id_seov2_target_pages_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
