=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module SiteimproveAPIClient
  class FeedbackIgnored
    # Id of the feedback.
    attr_accessor :id

    # Title of the page
    attr_accessor :title

    # URL for the live version of the page.
    attr_accessor :url

    # Name of the browser used for submitting the feedback.
    attr_accessor :browser_name

    # Version of the browser used for submitting the feedback.
    attr_accessor :browser_version

    # Comment included in the feedback.
    attr_accessor :comment

    # Type of device used for submitting the feedback.
    attr_accessor :device_type

    # Name of the person who marked the feedback as handled.
    attr_accessor :handled_by

    # When the feedback was marked as handled. Timestamp represented using ISO-8601.
    attr_accessor :handled_date

    # Who ignored the feedback.
    attr_accessor :ignored_by

    # When the feedback was ignored.
    attr_accessor :ignored_date

    # True if the feedback has been flagged as spam, false if not.
    attr_accessor :is_spam

    attr_accessor :note

    # Id of the page the feedback was submitted for.
    attr_accessor :page_id

    # When the feedback was received. Timestamp represented using ISO-8601.
    attr_accessor :received_date

    # Satisfaction rating included in the feedback.
    attr_accessor :satisfaction

    attr_accessor :screen_resolution

    attr_accessor :_siteimprove

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'title' => :'title',
        :'url' => :'url',
        :'browser_name' => :'browser_name',
        :'browser_version' => :'browser_version',
        :'comment' => :'comment',
        :'device_type' => :'device_type',
        :'handled_by' => :'handled_by',
        :'handled_date' => :'handled_date',
        :'ignored_by' => :'ignored_by',
        :'ignored_date' => :'ignored_date',
        :'is_spam' => :'is_spam',
        :'note' => :'note',
        :'page_id' => :'page_id',
        :'received_date' => :'received_date',
        :'satisfaction' => :'satisfaction',
        :'screen_resolution' => :'screen_resolution',
        :'_siteimprove' => :'_siteimprove'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'title' => :'String',
        :'url' => :'String',
        :'browser_name' => :'String',
        :'browser_version' => :'String',
        :'comment' => :'String',
        :'device_type' => :'String',
        :'handled_by' => :'String',
        :'handled_date' => :'Time',
        :'ignored_by' => :'String',
        :'ignored_date' => :'Time',
        :'is_spam' => :'Boolean',
        :'note' => :'FeedbackNote',
        :'page_id' => :'Integer',
        :'received_date' => :'Time',
        :'satisfaction' => :'Float',
        :'screen_resolution' => :'FeedbackResolution',
        :'_siteimprove' => :'Siteimprove'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SiteimproveAPIClient::FeedbackIgnored` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SiteimproveAPIClient::FeedbackIgnored`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'browser_name')
        self.browser_name = attributes[:'browser_name']
      end

      if attributes.key?(:'browser_version')
        self.browser_version = attributes[:'browser_version']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'device_type')
        self.device_type = attributes[:'device_type']
      end

      if attributes.key?(:'handled_by')
        self.handled_by = attributes[:'handled_by']
      end

      if attributes.key?(:'handled_date')
        self.handled_date = attributes[:'handled_date']
      end

      if attributes.key?(:'ignored_by')
        self.ignored_by = attributes[:'ignored_by']
      end

      if attributes.key?(:'ignored_date')
        self.ignored_date = attributes[:'ignored_date']
      end

      if attributes.key?(:'is_spam')
        self.is_spam = attributes[:'is_spam']
      else
        self.is_spam = nil
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'page_id')
        self.page_id = attributes[:'page_id']
      else
        self.page_id = nil
      end

      if attributes.key?(:'received_date')
        self.received_date = attributes[:'received_date']
      else
        self.received_date = nil
      end

      if attributes.key?(:'satisfaction')
        self.satisfaction = attributes[:'satisfaction']
      else
        self.satisfaction = nil
      end

      if attributes.key?(:'screen_resolution')
        self.screen_resolution = attributes[:'screen_resolution']
      end

      if attributes.key?(:'_siteimprove')
        self._siteimprove = attributes[:'_siteimprove']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @is_spam.nil?
        invalid_properties.push('invalid value for "is_spam", is_spam cannot be nil.')
      end

      if @page_id.nil?
        invalid_properties.push('invalid value for "page_id", page_id cannot be nil.')
      end

      if @received_date.nil?
        invalid_properties.push('invalid value for "received_date", received_date cannot be nil.')
      end

      if @satisfaction.nil?
        invalid_properties.push('invalid value for "satisfaction", satisfaction cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @is_spam.nil?
      return false if @page_id.nil?
      return false if @received_date.nil?
      return false if @satisfaction.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          title == o.title &&
          url == o.url &&
          browser_name == o.browser_name &&
          browser_version == o.browser_version &&
          comment == o.comment &&
          device_type == o.device_type &&
          handled_by == o.handled_by &&
          handled_date == o.handled_date &&
          ignored_by == o.ignored_by &&
          ignored_date == o.ignored_date &&
          is_spam == o.is_spam &&
          note == o.note &&
          page_id == o.page_id &&
          received_date == o.received_date &&
          satisfaction == o.satisfaction &&
          screen_resolution == o.screen_resolution &&
          _siteimprove == o._siteimprove
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, title, url, browser_name, browser_version, comment, device_type, handled_by, handled_date, ignored_by, ignored_date, is_spam, note, page_id, received_date, satisfaction, screen_resolution, _siteimprove].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SiteimproveAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
