=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module SiteimproveAPIClient
  class ArchivedPolicyOnAccount
    # The ID of the policy.
    attr_accessor :id

    # The name of the policy.
    attr_accessor :name

    # True if this policy applies to all sites on your account; false if it only applies to a specific site.
    attr_accessor :all_sites

    # The name of the user who archived the policy.
    attr_accessor :archived_by

    # The date and time the policy was archived.
    attr_accessor :archived_date

    # The category of the policy: content, media, documents.
    attr_accessor :category

    # The name of the user who created the policy.
    attr_accessor :created_by

    # The data and time the policy was created.
    attr_accessor :created_date

    # The name of the user who last edited the policy.
    attr_accessor :edited_by

    # The data and time the policy was last edited.
    attr_accessor :last_edited

    # The number of matches for this policy on all sites.
    attr_accessor :matches

    # Explain what the policy does and any actions editors should take (recommended).
    attr_accessor :note

    # The priority of the policy: low, medium, high.
    attr_accessor :priority

    # The number of sites where this policy is used.
    attr_accessor :sites

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'all_sites' => :'all_sites',
        :'archived_by' => :'archived_by',
        :'archived_date' => :'archived_date',
        :'category' => :'category',
        :'created_by' => :'created_by',
        :'created_date' => :'created_date',
        :'edited_by' => :'edited_by',
        :'last_edited' => :'last_edited',
        :'matches' => :'matches',
        :'note' => :'note',
        :'priority' => :'priority',
        :'sites' => :'sites'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'all_sites' => :'Boolean',
        :'archived_by' => :'String',
        :'archived_date' => :'Time',
        :'category' => :'String',
        :'created_by' => :'String',
        :'created_date' => :'Time',
        :'edited_by' => :'String',
        :'last_edited' => :'Time',
        :'matches' => :'Integer',
        :'note' => :'String',
        :'priority' => :'String',
        :'sites' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SiteimproveAPIClient::ArchivedPolicyOnAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SiteimproveAPIClient::ArchivedPolicyOnAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'all_sites')
        self.all_sites = attributes[:'all_sites']
      else
        self.all_sites = nil
      end

      if attributes.key?(:'archived_by')
        self.archived_by = attributes[:'archived_by']
      end

      if attributes.key?(:'archived_date')
        self.archived_date = attributes[:'archived_date']
      else
        self.archived_date = nil
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      else
        self.category = 'content'
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      else
        self.created_date = nil
      end

      if attributes.key?(:'edited_by')
        self.edited_by = attributes[:'edited_by']
      end

      if attributes.key?(:'last_edited')
        self.last_edited = attributes[:'last_edited']
      end

      if attributes.key?(:'matches')
        self.matches = attributes[:'matches']
      else
        self.matches = nil
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      else
        self.priority = 'none'
      end

      if attributes.key?(:'sites')
        self.sites = attributes[:'sites']
      else
        self.sites = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @all_sites.nil?
        invalid_properties.push('invalid value for "all_sites", all_sites cannot be nil.')
      end

      if @archived_date.nil?
        invalid_properties.push('invalid value for "archived_date", archived_date cannot be nil.')
      end

      if @category.nil?
        invalid_properties.push('invalid value for "category", category cannot be nil.')
      end

      if @created_date.nil?
        invalid_properties.push('invalid value for "created_date", created_date cannot be nil.')
      end

      if @matches.nil?
        invalid_properties.push('invalid value for "matches", matches cannot be nil.')
      end

      if @priority.nil?
        invalid_properties.push('invalid value for "priority", priority cannot be nil.')
      end

      if @sites.nil?
        invalid_properties.push('invalid value for "sites", sites cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @all_sites.nil?
      return false if @archived_date.nil?
      return false if @category.nil?
      category_validator = EnumAttributeValidator.new('String', ["content", "media", "documents"])
      return false unless category_validator.valid?(@category)
      return false if @created_date.nil?
      return false if @matches.nil?
      return false if @priority.nil?
      priority_validator = EnumAttributeValidator.new('String', ["none", "low", "medium", "high"])
      return false unless priority_validator.valid?(@priority)
      return false if @sites.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('String', ["content", "media", "documents"])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(priority)
      validator = EnumAttributeValidator.new('String', ["none", "low", "medium", "high"])
      unless validator.valid?(priority)
        fail ArgumentError, "invalid value for \"priority\", must be one of #{validator.allowable_values}."
      end
      @priority = priority
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          all_sites == o.all_sites &&
          archived_by == o.archived_by &&
          archived_date == o.archived_date &&
          category == o.category &&
          created_by == o.created_by &&
          created_date == o.created_date &&
          edited_by == o.edited_by &&
          last_edited == o.last_edited &&
          matches == o.matches &&
          note == o.note &&
          priority == o.priority &&
          sites == o.sites
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, all_sites, archived_by, archived_date, category, created_by, created_date, edited_by, last_edited, matches, note, priority, sites].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SiteimproveAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
